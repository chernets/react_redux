//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ReportService_getAllReportGroups_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
ReportService_getAllReportGroups_args.prototype = {};
ReportService_getAllReportGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getAllReportGroups_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getAllReportGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_getAllReportGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_getAllReportGroups_result.prototype = {};
ReportService_getAllReportGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2016 = 0;
        var _rtmp32020;
        this.success = [];
        var _etype2019 = 0;
        _rtmp32020 = input.readListBegin();
        _etype2019 = _rtmp32020.etype;
        _size2016 = _rtmp32020.size;
        for (var _i2021 = 0; _i2021 < _size2016; ++_i2021)
        {
          var elem2022 = null;
          elem2022 = input.readString().value;
          this.success.push(elem2022);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getAllReportGroups_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getAllReportGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter2023 in this.success)
    {
      if (this.success.hasOwnProperty(iter2023))
      {
        iter2023 = this.success[iter2023];
        output.writeString(iter2023);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_getAllReportTemplates_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
ReportService_getAllReportTemplates_args.prototype = {};
ReportService_getAllReportTemplates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getAllReportTemplates_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getAllReportTemplates_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_getAllReportTemplates_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ReportTemplate]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_getAllReportTemplates_result.prototype = {};
ReportService_getAllReportTemplates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2024 = 0;
        var _rtmp32028;
        this.success = [];
        var _etype2027 = 0;
        _rtmp32028 = input.readListBegin();
        _etype2027 = _rtmp32028.etype;
        _size2024 = _rtmp32028.size;
        for (var _i2029 = 0; _i2029 < _size2024; ++_i2029)
        {
          var elem2030 = null;
          elem2030 = new ReportTemplate();
          elem2030.read(input);
          this.success.push(elem2030);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getAllReportTemplates_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getAllReportTemplates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2031 in this.success)
    {
      if (this.success.hasOwnProperty(iter2031))
      {
        iter2031 = this.success[iter2031];
        iter2031.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_getCountAllReportTemplates_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
ReportService_getCountAllReportTemplates_args.prototype = {};
ReportService_getCountAllReportTemplates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getCountAllReportTemplates_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getCountAllReportTemplates_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_getCountAllReportTemplates_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_getCountAllReportTemplates_result.prototype = {};
ReportService_getCountAllReportTemplates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getCountAllReportTemplates_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getCountAllReportTemplates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_getAllReportTemplateLinks_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
ReportService_getAllReportTemplateLinks_args.prototype = {};
ReportService_getAllReportTemplateLinks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getAllReportTemplateLinks_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getAllReportTemplateLinks_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_getAllReportTemplateLinks_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ReportTemplateLink]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_getAllReportTemplateLinks_result.prototype = {};
ReportService_getAllReportTemplateLinks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2032 = 0;
        var _rtmp32036;
        this.success = [];
        var _etype2035 = 0;
        _rtmp32036 = input.readListBegin();
        _etype2035 = _rtmp32036.etype;
        _size2032 = _rtmp32036.size;
        for (var _i2037 = 0; _i2037 < _size2032; ++_i2037)
        {
          var elem2038 = null;
          elem2038 = new ReportTemplateLink();
          elem2038.read(input);
          this.success.push(elem2038);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_getAllReportTemplateLinks_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_getAllReportTemplateLinks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2039 in this.success)
    {
      if (this.success.hasOwnProperty(iter2039))
      {
        iter2039 = this.success[iter2039];
        iter2039.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_createOrUpdateReport_args = function(args) {
  this.token = null;
  this.reportTemplate = null;
  this.xmlFile = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.reportTemplate !== undefined && args.reportTemplate !== null) {
      this.reportTemplate = new ReportTemplate(args.reportTemplate);
    }
    if (args.xmlFile !== undefined && args.xmlFile !== null) {
      this.xmlFile = args.xmlFile;
    }
  }
};
ReportService_createOrUpdateReport_args.prototype = {};
ReportService_createOrUpdateReport_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.reportTemplate = new ReportTemplate();
        this.reportTemplate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.xmlFile = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_createOrUpdateReport_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_createOrUpdateReport_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.reportTemplate !== null && this.reportTemplate !== undefined) {
    output.writeFieldBegin('reportTemplate', Thrift.Type.STRUCT, 2);
    this.reportTemplate.write(output);
    output.writeFieldEnd();
  }
  if (this.xmlFile !== null && this.xmlFile !== undefined) {
    output.writeFieldBegin('xmlFile', Thrift.Type.STRING, 3);
    output.writeBinary(this.xmlFile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_createOrUpdateReport_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ReportTemplate(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_createOrUpdateReport_result.prototype = {};
ReportService_createOrUpdateReport_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ReportTemplate();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_createOrUpdateReport_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_createOrUpdateReport_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_downloadReportTemplate_args = function(args) {
  this.token = null;
  this.templateId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
  }
};
ReportService_downloadReportTemplate_args.prototype = {};
ReportService_downloadReportTemplate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.templateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_downloadReportTemplate_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_downloadReportTemplate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.STRING, 2);
    output.writeString(this.templateId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_downloadReportTemplate_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_downloadReportTemplate_result.prototype = {};
ReportService_downloadReportTemplate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_downloadReportTemplate_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_downloadReportTemplate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_removeReportTemplate_args = function(args) {
  this.token = null;
  this.templateId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
  }
};
ReportService_removeReportTemplate_args.prototype = {};
ReportService_removeReportTemplate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.templateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_removeReportTemplate_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_removeReportTemplate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.STRING, 2);
    output.writeString(this.templateId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_removeReportTemplate_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_removeReportTemplate_result.prototype = {};
ReportService_removeReportTemplate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_removeReportTemplate_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_removeReportTemplate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_reportTemplateToPattern_args = function(args) {
  this.token = null;
  this.templateId = null;
  this.docPatternId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
  }
};
ReportService_reportTemplateToPattern_args.prototype = {};
ReportService_reportTemplateToPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.templateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_reportTemplateToPattern_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_reportTemplateToPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.STRING, 2);
    output.writeString(this.templateId);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 3);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_reportTemplateToPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_reportTemplateToPattern_result.prototype = {};
ReportService_reportTemplateToPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_reportTemplateToPattern_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_reportTemplateToPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_reportTemplateToUserOrGroup_args = function(args) {
  this.token = null;
  this.templateId = null;
  this.userGroups = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
    if (args.userGroups !== undefined && args.userGroups !== null) {
      this.userGroups = Thrift.copyList(args.userGroups, [UserOrGroup]);
    }
  }
};
ReportService_reportTemplateToUserOrGroup_args.prototype = {};
ReportService_reportTemplateToUserOrGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.templateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2040 = 0;
        var _rtmp32044;
        this.userGroups = [];
        var _etype2043 = 0;
        _rtmp32044 = input.readListBegin();
        _etype2043 = _rtmp32044.etype;
        _size2040 = _rtmp32044.size;
        for (var _i2045 = 0; _i2045 < _size2040; ++_i2045)
        {
          var elem2046 = null;
          elem2046 = new UserOrGroup();
          elem2046.read(input);
          this.userGroups.push(elem2046);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_reportTemplateToUserOrGroup_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_reportTemplateToUserOrGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.STRING, 2);
    output.writeString(this.templateId);
    output.writeFieldEnd();
  }
  if (this.userGroups !== null && this.userGroups !== undefined) {
    output.writeFieldBegin('userGroups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.userGroups.length);
    for (var iter2047 in this.userGroups)
    {
      if (this.userGroups.hasOwnProperty(iter2047))
      {
        iter2047 = this.userGroups[iter2047];
        iter2047.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_reportTemplateToUserOrGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_reportTemplateToUserOrGroup_result.prototype = {};
ReportService_reportTemplateToUserOrGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_reportTemplateToUserOrGroup_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_reportTemplateToUserOrGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_removeReportTemplateFromDocumentPattern_args = function(args) {
  this.token = null;
  this.templateId = null;
  this.docPatternId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
  }
};
ReportService_removeReportTemplateFromDocumentPattern_args.prototype = {};
ReportService_removeReportTemplateFromDocumentPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.templateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_removeReportTemplateFromDocumentPattern_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_removeReportTemplateFromDocumentPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.STRING, 2);
    output.writeString(this.templateId);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 3);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_removeReportTemplateFromDocumentPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_removeReportTemplateFromDocumentPattern_result.prototype = {};
ReportService_removeReportTemplateFromDocumentPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_removeReportTemplateFromDocumentPattern_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_removeReportTemplateFromDocumentPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_removeReportTemplateFromUserOrGroup_args = function(args) {
  this.token = null;
  this.templateId = null;
  this.userGroups = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
    if (args.userGroups !== undefined && args.userGroups !== null) {
      this.userGroups = Thrift.copyList(args.userGroups, [UserOrGroup]);
    }
  }
};
ReportService_removeReportTemplateFromUserOrGroup_args.prototype = {};
ReportService_removeReportTemplateFromUserOrGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.templateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2048 = 0;
        var _rtmp32052;
        this.userGroups = [];
        var _etype2051 = 0;
        _rtmp32052 = input.readListBegin();
        _etype2051 = _rtmp32052.etype;
        _size2048 = _rtmp32052.size;
        for (var _i2053 = 0; _i2053 < _size2048; ++_i2053)
        {
          var elem2054 = null;
          elem2054 = new UserOrGroup();
          elem2054.read(input);
          this.userGroups.push(elem2054);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_removeReportTemplateFromUserOrGroup_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_removeReportTemplateFromUserOrGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.STRING, 2);
    output.writeString(this.templateId);
    output.writeFieldEnd();
  }
  if (this.userGroups !== null && this.userGroups !== undefined) {
    output.writeFieldBegin('userGroups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.userGroups.length);
    for (var iter2055 in this.userGroups)
    {
      if (this.userGroups.hasOwnProperty(iter2055))
      {
        iter2055 = this.userGroups[iter2055];
        iter2055.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_removeReportTemplateFromUserOrGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_removeReportTemplateFromUserOrGroup_result.prototype = {};
ReportService_removeReportTemplateFromUserOrGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_removeReportTemplateFromUserOrGroup_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_removeReportTemplateFromUserOrGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_generateDigitalDocument_args = function(args) {
  this.token = null;
  this.reportType = null;
  this.digitalViewId = null;
  this.docId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.reportType !== undefined && args.reportType !== null) {
      this.reportType = args.reportType;
    }
    if (args.digitalViewId !== undefined && args.digitalViewId !== null) {
      this.digitalViewId = args.digitalViewId;
    }
    if (args.docId !== undefined && args.docId !== null) {
      this.docId = args.docId;
    }
  }
};
ReportService_generateDigitalDocument_args.prototype = {};
ReportService_generateDigitalDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.reportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.digitalViewId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.docId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_generateDigitalDocument_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_generateDigitalDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.reportType !== null && this.reportType !== undefined) {
    output.writeFieldBegin('reportType', Thrift.Type.I32, 2);
    output.writeI32(this.reportType);
    output.writeFieldEnd();
  }
  if (this.digitalViewId !== null && this.digitalViewId !== undefined) {
    output.writeFieldBegin('digitalViewId', Thrift.Type.STRING, 3);
    output.writeString(this.digitalViewId);
    output.writeFieldEnd();
  }
  if (this.docId !== null && this.docId !== undefined) {
    output.writeFieldBegin('docId', Thrift.Type.STRING, 4);
    output.writeString(this.docId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_generateDigitalDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_generateDigitalDocument_result.prototype = {};
ReportService_generateDigitalDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_generateDigitalDocument_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_generateDigitalDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_generateReport_args = function(args) {
  this.token = null;
  this.reportType = null;
  this.templateId = null;
  this.params = null;
  this.docId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.reportType !== undefined && args.reportType !== null) {
      this.reportType = args.reportType;
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [ReportFilledParam]);
    }
    if (args.docId !== undefined && args.docId !== null) {
      this.docId = args.docId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
ReportService_generateReport_args.prototype = {};
ReportService_generateReport_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.reportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.templateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size2056 = 0;
        var _rtmp32060;
        this.params = [];
        var _etype2059 = 0;
        _rtmp32060 = input.readListBegin();
        _etype2059 = _rtmp32060.etype;
        _size2056 = _rtmp32060.size;
        for (var _i2061 = 0; _i2061 < _size2056; ++_i2061)
        {
          var elem2062 = null;
          elem2062 = new ReportFilledParam();
          elem2062.read(input);
          this.params.push(elem2062);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.docId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_generateReport_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_generateReport_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.reportType !== null && this.reportType !== undefined) {
    output.writeFieldBegin('reportType', Thrift.Type.I32, 2);
    output.writeI32(this.reportType);
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.STRING, 3);
    output.writeString(this.templateId);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
    for (var iter2063 in this.params)
    {
      if (this.params.hasOwnProperty(iter2063))
      {
        iter2063 = this.params[iter2063];
        iter2063.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.docId !== null && this.docId !== undefined) {
    output.writeFieldBegin('docId', Thrift.Type.STRING, 5);
    output.writeString(this.docId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 6);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_generateReport_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_generateReport_result.prototype = {};
ReportService_generateReport_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_generateReport_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_generateReport_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_generateReportByFilter_args = function(args) {
  this.token = null;
  this.reportType = null;
  this.templateId = null;
  this.filter = null;
  this.forAllUsers = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.reportType !== undefined && args.reportType !== null) {
      this.reportType = args.reportType;
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
    if (args.forAllUsers !== undefined && args.forAllUsers !== null) {
      this.forAllUsers = args.forAllUsers;
    }
  }
};
ReportService_generateReportByFilter_args.prototype = {};
ReportService_generateReportByFilter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.reportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.templateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.forAllUsers = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_generateReportByFilter_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_generateReportByFilter_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.reportType !== null && this.reportType !== undefined) {
    output.writeFieldBegin('reportType', Thrift.Type.I32, 2);
    output.writeI32(this.reportType);
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.STRING, 3);
    output.writeString(this.templateId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.forAllUsers !== null && this.forAllUsers !== undefined) {
    output.writeFieldBegin('forAllUsers', Thrift.Type.BOOL, 5);
    output.writeBool(this.forAllUsers);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_generateReportByFilter_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_generateReportByFilter_result.prototype = {};
ReportService_generateReportByFilter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_generateReportByFilter_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_generateReportByFilter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_attachReportToDoc_args = function(args) {
  this.token = null;
  this.reportType = null;
  this.templateId = null;
  this.params = null;
  this.docId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.reportType !== undefined && args.reportType !== null) {
      this.reportType = args.reportType;
    }
    if (args.templateId !== undefined && args.templateId !== null) {
      this.templateId = args.templateId;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [ReportFilledParam]);
    }
    if (args.docId !== undefined && args.docId !== null) {
      this.docId = args.docId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
ReportService_attachReportToDoc_args.prototype = {};
ReportService_attachReportToDoc_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.reportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.templateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size2064 = 0;
        var _rtmp32068;
        this.params = [];
        var _etype2067 = 0;
        _rtmp32068 = input.readListBegin();
        _etype2067 = _rtmp32068.etype;
        _size2064 = _rtmp32068.size;
        for (var _i2069 = 0; _i2069 < _size2064; ++_i2069)
        {
          var elem2070 = null;
          elem2070 = new ReportFilledParam();
          elem2070.read(input);
          this.params.push(elem2070);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.docId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_attachReportToDoc_args.prototype.write = function(output) {
  output.writeStructBegin('ReportService_attachReportToDoc_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.reportType !== null && this.reportType !== undefined) {
    output.writeFieldBegin('reportType', Thrift.Type.I32, 2);
    output.writeI32(this.reportType);
    output.writeFieldEnd();
  }
  if (this.templateId !== null && this.templateId !== undefined) {
    output.writeFieldBegin('templateId', Thrift.Type.STRING, 3);
    output.writeString(this.templateId);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
    for (var iter2071 in this.params)
    {
      if (this.params.hasOwnProperty(iter2071))
      {
        iter2071 = this.params[iter2071];
        iter2071.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.docId !== null && this.docId !== undefined) {
    output.writeFieldBegin('docId', Thrift.Type.STRING, 5);
    output.writeString(this.docId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 6);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportService_attachReportToDoc_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ReportService_attachReportToDoc_result.prototype = {};
ReportService_attachReportToDoc_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportService_attachReportToDoc_result.prototype.write = function(output) {
  output.writeStructBegin('ReportService_attachReportToDoc_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ReportServiceClient.prototype = {};
ReportServiceClient.prototype.getAllReportGroups = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllReportGroups(token, filter);
    return this.recv_getAllReportGroups();
  } else {
    var postData = this.send_getAllReportGroups(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllReportGroups);
  }
};

ReportServiceClient.prototype.send_getAllReportGroups = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllReportGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new ReportService_getAllReportGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_getAllReportGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_getAllReportGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllReportGroups failed: unknown result';
};
ReportServiceClient.prototype.getAllReportTemplates = function(token, docPatternId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllReportTemplates(token, docPatternId, filter);
    return this.recv_getAllReportTemplates();
  } else {
    var postData = this.send_getAllReportTemplates(token, docPatternId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllReportTemplates);
  }
};

ReportServiceClient.prototype.send_getAllReportTemplates = function(token, docPatternId, filter, callback) {
  this.output.writeMessageBegin('getAllReportTemplates', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    filter: filter
  };
  var args = new ReportService_getAllReportTemplates_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_getAllReportTemplates = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_getAllReportTemplates_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllReportTemplates failed: unknown result';
};
ReportServiceClient.prototype.getCountAllReportTemplates = function(token, docPatternId, filter, callback) {
  if (callback === undefined) {
    this.send_getCountAllReportTemplates(token, docPatternId, filter);
    return this.recv_getCountAllReportTemplates();
  } else {
    var postData = this.send_getCountAllReportTemplates(token, docPatternId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCountAllReportTemplates);
  }
};

ReportServiceClient.prototype.send_getCountAllReportTemplates = function(token, docPatternId, filter, callback) {
  this.output.writeMessageBegin('getCountAllReportTemplates', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    filter: filter
  };
  var args = new ReportService_getCountAllReportTemplates_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_getCountAllReportTemplates = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_getCountAllReportTemplates_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAllReportTemplates failed: unknown result';
};
ReportServiceClient.prototype.getAllReportTemplateLinks = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllReportTemplateLinks(token, filter);
    return this.recv_getAllReportTemplateLinks();
  } else {
    var postData = this.send_getAllReportTemplateLinks(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllReportTemplateLinks);
  }
};

ReportServiceClient.prototype.send_getAllReportTemplateLinks = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllReportTemplateLinks', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new ReportService_getAllReportTemplateLinks_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_getAllReportTemplateLinks = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_getAllReportTemplateLinks_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllReportTemplateLinks failed: unknown result';
};
ReportServiceClient.prototype.createOrUpdateReport = function(token, reportTemplate, xmlFile, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateReport(token, reportTemplate, xmlFile);
    return this.recv_createOrUpdateReport();
  } else {
    var postData = this.send_createOrUpdateReport(token, reportTemplate, xmlFile, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateReport);
  }
};

ReportServiceClient.prototype.send_createOrUpdateReport = function(token, reportTemplate, xmlFile, callback) {
  this.output.writeMessageBegin('createOrUpdateReport', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    reportTemplate: reportTemplate,
    xmlFile: xmlFile
  };
  var args = new ReportService_createOrUpdateReport_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_createOrUpdateReport = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_createOrUpdateReport_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateReport failed: unknown result';
};
ReportServiceClient.prototype.downloadReportTemplate = function(token, templateId, callback) {
  if (callback === undefined) {
    this.send_downloadReportTemplate(token, templateId);
    return this.recv_downloadReportTemplate();
  } else {
    var postData = this.send_downloadReportTemplate(token, templateId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_downloadReportTemplate);
  }
};

ReportServiceClient.prototype.send_downloadReportTemplate = function(token, templateId, callback) {
  this.output.writeMessageBegin('downloadReportTemplate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    templateId: templateId
  };
  var args = new ReportService_downloadReportTemplate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_downloadReportTemplate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_downloadReportTemplate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'downloadReportTemplate failed: unknown result';
};
ReportServiceClient.prototype.removeReportTemplate = function(token, templateId, callback) {
  if (callback === undefined) {
    this.send_removeReportTemplate(token, templateId);
    return this.recv_removeReportTemplate();
  } else {
    var postData = this.send_removeReportTemplate(token, templateId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeReportTemplate);
  }
};

ReportServiceClient.prototype.send_removeReportTemplate = function(token, templateId, callback) {
  this.output.writeMessageBegin('removeReportTemplate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    templateId: templateId
  };
  var args = new ReportService_removeReportTemplate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_removeReportTemplate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_removeReportTemplate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeReportTemplate failed: unknown result';
};
ReportServiceClient.prototype.reportTemplateToPattern = function(token, templateId, docPatternId, callback) {
  if (callback === undefined) {
    this.send_reportTemplateToPattern(token, templateId, docPatternId);
    return this.recv_reportTemplateToPattern();
  } else {
    var postData = this.send_reportTemplateToPattern(token, templateId, docPatternId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_reportTemplateToPattern);
  }
};

ReportServiceClient.prototype.send_reportTemplateToPattern = function(token, templateId, docPatternId, callback) {
  this.output.writeMessageBegin('reportTemplateToPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    templateId: templateId,
    docPatternId: docPatternId
  };
  var args = new ReportService_reportTemplateToPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_reportTemplateToPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_reportTemplateToPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reportTemplateToPattern failed: unknown result';
};
ReportServiceClient.prototype.reportTemplateToUserOrGroup = function(token, templateId, userGroups, callback) {
  if (callback === undefined) {
    this.send_reportTemplateToUserOrGroup(token, templateId, userGroups);
    return this.recv_reportTemplateToUserOrGroup();
  } else {
    var postData = this.send_reportTemplateToUserOrGroup(token, templateId, userGroups, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_reportTemplateToUserOrGroup);
  }
};

ReportServiceClient.prototype.send_reportTemplateToUserOrGroup = function(token, templateId, userGroups, callback) {
  this.output.writeMessageBegin('reportTemplateToUserOrGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    templateId: templateId,
    userGroups: userGroups
  };
  var args = new ReportService_reportTemplateToUserOrGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_reportTemplateToUserOrGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_reportTemplateToUserOrGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reportTemplateToUserOrGroup failed: unknown result';
};
ReportServiceClient.prototype.removeReportTemplateFromDocumentPattern = function(token, templateId, docPatternId, callback) {
  if (callback === undefined) {
    this.send_removeReportTemplateFromDocumentPattern(token, templateId, docPatternId);
    return this.recv_removeReportTemplateFromDocumentPattern();
  } else {
    var postData = this.send_removeReportTemplateFromDocumentPattern(token, templateId, docPatternId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeReportTemplateFromDocumentPattern);
  }
};

ReportServiceClient.prototype.send_removeReportTemplateFromDocumentPattern = function(token, templateId, docPatternId, callback) {
  this.output.writeMessageBegin('removeReportTemplateFromDocumentPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    templateId: templateId,
    docPatternId: docPatternId
  };
  var args = new ReportService_removeReportTemplateFromDocumentPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_removeReportTemplateFromDocumentPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_removeReportTemplateFromDocumentPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeReportTemplateFromDocumentPattern failed: unknown result';
};
ReportServiceClient.prototype.removeReportTemplateFromUserOrGroup = function(token, templateId, userGroups, callback) {
  if (callback === undefined) {
    this.send_removeReportTemplateFromUserOrGroup(token, templateId, userGroups);
    return this.recv_removeReportTemplateFromUserOrGroup();
  } else {
    var postData = this.send_removeReportTemplateFromUserOrGroup(token, templateId, userGroups, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeReportTemplateFromUserOrGroup);
  }
};

ReportServiceClient.prototype.send_removeReportTemplateFromUserOrGroup = function(token, templateId, userGroups, callback) {
  this.output.writeMessageBegin('removeReportTemplateFromUserOrGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    templateId: templateId,
    userGroups: userGroups
  };
  var args = new ReportService_removeReportTemplateFromUserOrGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_removeReportTemplateFromUserOrGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_removeReportTemplateFromUserOrGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeReportTemplateFromUserOrGroup failed: unknown result';
};
ReportServiceClient.prototype.generateDigitalDocument = function(token, reportType, digitalViewId, docId, callback) {
  if (callback === undefined) {
    this.send_generateDigitalDocument(token, reportType, digitalViewId, docId);
    return this.recv_generateDigitalDocument();
  } else {
    var postData = this.send_generateDigitalDocument(token, reportType, digitalViewId, docId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_generateDigitalDocument);
  }
};

ReportServiceClient.prototype.send_generateDigitalDocument = function(token, reportType, digitalViewId, docId, callback) {
  this.output.writeMessageBegin('generateDigitalDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    reportType: reportType,
    digitalViewId: digitalViewId,
    docId: docId
  };
  var args = new ReportService_generateDigitalDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_generateDigitalDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_generateDigitalDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'generateDigitalDocument failed: unknown result';
};
ReportServiceClient.prototype.generateReport = function(token, reportType, templateId, params, docId, registryId, callback) {
  if (callback === undefined) {
    this.send_generateReport(token, reportType, templateId, params, docId, registryId);
    return this.recv_generateReport();
  } else {
    var postData = this.send_generateReport(token, reportType, templateId, params, docId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_generateReport);
  }
};

ReportServiceClient.prototype.send_generateReport = function(token, reportType, templateId, params, docId, registryId, callback) {
  this.output.writeMessageBegin('generateReport', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    reportType: reportType,
    templateId: templateId,
    params: params,
    docId: docId,
    registryId: registryId
  };
  var args = new ReportService_generateReport_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_generateReport = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_generateReport_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'generateReport failed: unknown result';
};
ReportServiceClient.prototype.generateReportByFilter = function(token, reportType, templateId, filter, forAllUsers, callback) {
  if (callback === undefined) {
    this.send_generateReportByFilter(token, reportType, templateId, filter, forAllUsers);
    return this.recv_generateReportByFilter();
  } else {
    var postData = this.send_generateReportByFilter(token, reportType, templateId, filter, forAllUsers, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_generateReportByFilter);
  }
};

ReportServiceClient.prototype.send_generateReportByFilter = function(token, reportType, templateId, filter, forAllUsers, callback) {
  this.output.writeMessageBegin('generateReportByFilter', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    reportType: reportType,
    templateId: templateId,
    filter: filter,
    forAllUsers: forAllUsers
  };
  var args = new ReportService_generateReportByFilter_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_generateReportByFilter = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_generateReportByFilter_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'generateReportByFilter failed: unknown result';
};
ReportServiceClient.prototype.attachReportToDoc = function(token, reportType, templateId, params, docId, registryId, callback) {
  if (callback === undefined) {
    this.send_attachReportToDoc(token, reportType, templateId, params, docId, registryId);
    return this.recv_attachReportToDoc();
  } else {
    var postData = this.send_attachReportToDoc(token, reportType, templateId, params, docId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_attachReportToDoc);
  }
};

ReportServiceClient.prototype.send_attachReportToDoc = function(token, reportType, templateId, params, docId, registryId, callback) {
  this.output.writeMessageBegin('attachReportToDoc', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    reportType: reportType,
    templateId: templateId,
    params: params,
    docId: docId,
    registryId: registryId
  };
  var args = new ReportService_attachReportToDoc_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ReportServiceClient.prototype.recv_attachReportToDoc = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ReportService_attachReportToDoc_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'attachReportToDoc failed: unknown result';
};
