//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

UserManagementService_getUserOrGroup_args = function(args) {
  this.token = null;
  this.userOrGroupId = null;
  this.userOrGroupType = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userOrGroupId !== undefined && args.userOrGroupId !== null) {
      this.userOrGroupId = args.userOrGroupId;
    }
    if (args.userOrGroupType !== undefined && args.userOrGroupType !== null) {
      this.userOrGroupType = args.userOrGroupType;
    }
  }
};
UserManagementService_getUserOrGroup_args.prototype = {};
UserManagementService_getUserOrGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userOrGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.userOrGroupType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getUserOrGroup_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getUserOrGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userOrGroupId !== null && this.userOrGroupId !== undefined) {
    output.writeFieldBegin('userOrGroupId', Thrift.Type.STRING, 2);
    output.writeString(this.userOrGroupId);
    output.writeFieldEnd();
  }
  if (this.userOrGroupType !== null && this.userOrGroupType !== undefined) {
    output.writeFieldBegin('userOrGroupType', Thrift.Type.I32, 3);
    output.writeI32(this.userOrGroupType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getUserOrGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new UserOrGroup(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getUserOrGroup_result.prototype = {};
UserManagementService_getUserOrGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UserOrGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getUserOrGroup_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getUserOrGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllUsersAndGroups_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getAllUsersAndGroups_args.prototype = {};
UserManagementService_getAllUsersAndGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllUsersAndGroups_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllUsersAndGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllUsersAndGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserOrGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getAllUsersAndGroups_result.prototype = {};
UserManagementService_getAllUsersAndGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size622 = 0;
        var _rtmp3626;
        this.success = [];
        var _etype625 = 0;
        _rtmp3626 = input.readListBegin();
        _etype625 = _rtmp3626.etype;
        _size622 = _rtmp3626.size;
        for (var _i627 = 0; _i627 < _size622; ++_i627)
        {
          var elem628 = null;
          elem628 = new UserOrGroup();
          elem628.read(input);
          this.success.push(elem628);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllUsersAndGroups_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllUsersAndGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter629 in this.success)
    {
      if (this.success.hasOwnProperty(iter629))
      {
        iter629 = this.success[iter629];
        iter629.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getCountAllUsersAndGroups_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getCountAllUsersAndGroups_args.prototype = {};
UserManagementService_getCountAllUsersAndGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getCountAllUsersAndGroups_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getCountAllUsersAndGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getCountAllUsersAndGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getCountAllUsersAndGroups_result.prototype = {};
UserManagementService_getCountAllUsersAndGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getCountAllUsersAndGroups_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getCountAllUsersAndGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllUsersByGroup_args = function(args) {
  this.token = null;
  this.groupId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getAllUsersByGroup_args.prototype = {};
UserManagementService_getAllUsersByGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllUsersByGroup_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllUsersByGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllUsersByGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserOrGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getAllUsersByGroup_result.prototype = {};
UserManagementService_getAllUsersByGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size630 = 0;
        var _rtmp3634;
        this.success = [];
        var _etype633 = 0;
        _rtmp3634 = input.readListBegin();
        _etype633 = _rtmp3634.etype;
        _size630 = _rtmp3634.size;
        for (var _i635 = 0; _i635 < _size630; ++_i635)
        {
          var elem636 = null;
          elem636 = new UserOrGroup();
          elem636.read(input);
          this.success.push(elem636);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllUsersByGroup_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllUsersByGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter637 in this.success)
    {
      if (this.success.hasOwnProperty(iter637))
      {
        iter637 = this.success[iter637];
        iter637.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getCountAllUsersByGroup_args = function(args) {
  this.token = null;
  this.groupId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getCountAllUsersByGroup_args.prototype = {};
UserManagementService_getCountAllUsersByGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getCountAllUsersByGroup_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getCountAllUsersByGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getCountAllUsersByGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getCountAllUsersByGroup_result.prototype = {};
UserManagementService_getCountAllUsersByGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getCountAllUsersByGroup_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getCountAllUsersByGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllUsers_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getAllUsers_args.prototype = {};
UserManagementService_getAllUsers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllUsers_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllUsers_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllUsers_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserOrGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getAllUsers_result.prototype = {};
UserManagementService_getAllUsers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size638 = 0;
        var _rtmp3642;
        this.success = [];
        var _etype641 = 0;
        _rtmp3642 = input.readListBegin();
        _etype641 = _rtmp3642.etype;
        _size638 = _rtmp3642.size;
        for (var _i643 = 0; _i643 < _size638; ++_i643)
        {
          var elem644 = null;
          elem644 = new UserOrGroup();
          elem644.read(input);
          this.success.push(elem644);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllUsers_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllUsers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter645 in this.success)
    {
      if (this.success.hasOwnProperty(iter645))
      {
        iter645 = this.success[iter645];
        iter645.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllGroups_args = function(args) {
  this.token = null;
  this.groupId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getAllGroups_args.prototype = {};
UserManagementService_getAllGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllGroups_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserOrGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getAllGroups_result.prototype = {};
UserManagementService_getAllGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size646 = 0;
        var _rtmp3650;
        this.success = [];
        var _etype649 = 0;
        _rtmp3650 = input.readListBegin();
        _etype649 = _rtmp3650.etype;
        _size646 = _rtmp3650.size;
        for (var _i651 = 0; _i651 < _size646; ++_i651)
        {
          var elem652 = null;
          elem652 = new UserOrGroup();
          elem652.read(input);
          this.success.push(elem652);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllGroups_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter653 in this.success)
    {
      if (this.success.hasOwnProperty(iter653))
      {
        iter653 = this.success[iter653];
        iter653.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getCountAllGroups_args = function(args) {
  this.token = null;
  this.groupId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getCountAllGroups_args.prototype = {};
UserManagementService_getCountAllGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getCountAllGroups_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getCountAllGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 2);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getCountAllGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getCountAllGroups_result.prototype = {};
UserManagementService_getCountAllGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getCountAllGroups_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getCountAllGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getRolesByUserOrGroup_args = function(args) {
  this.token = null;
  this.type = null;
  this.userOrGroupId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.userOrGroupId !== undefined && args.userOrGroupId !== null) {
      this.userOrGroupId = args.userOrGroupId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getRolesByUserOrGroup_args.prototype = {};
UserManagementService_getRolesByUserOrGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userOrGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getRolesByUserOrGroup_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getRolesByUserOrGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.userOrGroupId !== null && this.userOrGroupId !== undefined) {
    output.writeFieldBegin('userOrGroupId', Thrift.Type.STRING, 3);
    output.writeString(this.userOrGroupId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getRolesByUserOrGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getRolesByUserOrGroup_result.prototype = {};
UserManagementService_getRolesByUserOrGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size654 = 0;
        var _rtmp3658;
        this.success = [];
        var _etype657 = 0;
        _rtmp3658 = input.readSetBegin();
        _etype657 = _rtmp3658.etype;
        _size654 = _rtmp3658.size;
        for (var _i659 = 0; _i659 < _size654; ++_i659)
        {
          var elem660 = null;
          elem660 = input.readString().value;
          this.success.push(elem660);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getRolesByUserOrGroup_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getRolesByUserOrGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter661 in this.success)
    {
      if (this.success.hasOwnProperty(iter661))
      {
        iter661 = this.success[iter661];
        output.writeString(iter661);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getUserOrGroupsByRole_args = function(args) {
  this.token = null;
  this.role = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getUserOrGroupsByRole_args.prototype = {};
UserManagementService_getUserOrGroupsByRole_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getUserOrGroupsByRole_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getUserOrGroupsByRole_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 2);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getUserOrGroupsByRole_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserOrGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getUserOrGroupsByRole_result.prototype = {};
UserManagementService_getUserOrGroupsByRole_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size662 = 0;
        var _rtmp3666;
        this.success = [];
        var _etype665 = 0;
        _rtmp3666 = input.readListBegin();
        _etype665 = _rtmp3666.etype;
        _size662 = _rtmp3666.size;
        for (var _i667 = 0; _i667 < _size662; ++_i667)
        {
          var elem668 = null;
          elem668 = new UserOrGroup();
          elem668.read(input);
          this.success.push(elem668);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getUserOrGroupsByRole_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getUserOrGroupsByRole_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter669 in this.success)
    {
      if (this.success.hasOwnProperty(iter669))
      {
        iter669 = this.success[iter669];
        iter669.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_createOrUpdateUserGroup_args = function(args) {
  this.token = null;
  this.userGroup = null;
  this.accountId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userGroup !== undefined && args.userGroup !== null) {
      this.userGroup = new UserOrGroup(args.userGroup);
    }
    if (args.accountId !== undefined && args.accountId !== null) {
      this.accountId = args.accountId;
    }
  }
};
UserManagementService_createOrUpdateUserGroup_args.prototype = {};
UserManagementService_createOrUpdateUserGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userGroup = new UserOrGroup();
        this.userGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_createOrUpdateUserGroup_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_createOrUpdateUserGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userGroup !== null && this.userGroup !== undefined) {
    output.writeFieldBegin('userGroup', Thrift.Type.STRUCT, 2);
    this.userGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 3);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_createOrUpdateUserGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new UserOrGroup(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_createOrUpdateUserGroup_result.prototype = {};
UserManagementService_createOrUpdateUserGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UserOrGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_createOrUpdateUserGroup_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_createOrUpdateUserGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_addUsersToGroups_args = function(args) {
  this.token = null;
  this.groupsId = null;
  this.usersId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.groupsId !== undefined && args.groupsId !== null) {
      this.groupsId = Thrift.copyList(args.groupsId, [null]);
    }
    if (args.usersId !== undefined && args.usersId !== null) {
      this.usersId = Thrift.copyList(args.usersId, [null]);
    }
  }
};
UserManagementService_addUsersToGroups_args.prototype = {};
UserManagementService_addUsersToGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size670 = 0;
        var _rtmp3674;
        this.groupsId = [];
        var _etype673 = 0;
        _rtmp3674 = input.readListBegin();
        _etype673 = _rtmp3674.etype;
        _size670 = _rtmp3674.size;
        for (var _i675 = 0; _i675 < _size670; ++_i675)
        {
          var elem676 = null;
          elem676 = input.readString().value;
          this.groupsId.push(elem676);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size677 = 0;
        var _rtmp3681;
        this.usersId = [];
        var _etype680 = 0;
        _rtmp3681 = input.readListBegin();
        _etype680 = _rtmp3681.etype;
        _size677 = _rtmp3681.size;
        for (var _i682 = 0; _i682 < _size677; ++_i682)
        {
          var elem683 = null;
          elem683 = input.readString().value;
          this.usersId.push(elem683);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_addUsersToGroups_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_addUsersToGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.groupsId !== null && this.groupsId !== undefined) {
    output.writeFieldBegin('groupsId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.groupsId.length);
    for (var iter684 in this.groupsId)
    {
      if (this.groupsId.hasOwnProperty(iter684))
      {
        iter684 = this.groupsId[iter684];
        output.writeString(iter684);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.usersId !== null && this.usersId !== undefined) {
    output.writeFieldBegin('usersId', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.usersId.length);
    for (var iter685 in this.usersId)
    {
      if (this.usersId.hasOwnProperty(iter685))
      {
        iter685 = this.usersId[iter685];
        output.writeString(iter685);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_addUsersToGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_addUsersToGroups_result.prototype = {};
UserManagementService_addUsersToGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_addUsersToGroups_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_addUsersToGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_createOrUpdateUser_args = function(args) {
  this.token = null;
  this.user = null;
  this.login = null;
  this.password = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = new UserOrGroup(args.user);
    }
    if (args.login !== undefined && args.login !== null) {
      this.login = args.login;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
UserManagementService_createOrUpdateUser_args.prototype = {};
UserManagementService_createOrUpdateUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new UserOrGroup();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_createOrUpdateUser_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_createOrUpdateUser_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 2);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 3);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_createOrUpdateUser_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new UserOrGroup(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_createOrUpdateUser_result.prototype = {};
UserManagementService_createOrUpdateUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UserOrGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_createOrUpdateUser_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_createOrUpdateUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_removeClient_args = function(args) {
  this.token = null;
  this.userId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
UserManagementService_removeClient_args.prototype = {};
UserManagementService_removeClient_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_removeClient_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_removeClient_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_removeClient_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_removeClient_result.prototype = {};
UserManagementService_removeClient_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_removeClient_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_removeClient_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_removeUsersFromGroups_args = function(args) {
  this.token = null;
  this.groupsId = null;
  this.usersId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.groupsId !== undefined && args.groupsId !== null) {
      this.groupsId = Thrift.copyList(args.groupsId, [null]);
    }
    if (args.usersId !== undefined && args.usersId !== null) {
      this.usersId = Thrift.copyList(args.usersId, [null]);
    }
  }
};
UserManagementService_removeUsersFromGroups_args.prototype = {};
UserManagementService_removeUsersFromGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size686 = 0;
        var _rtmp3690;
        this.groupsId = [];
        var _etype689 = 0;
        _rtmp3690 = input.readListBegin();
        _etype689 = _rtmp3690.etype;
        _size686 = _rtmp3690.size;
        for (var _i691 = 0; _i691 < _size686; ++_i691)
        {
          var elem692 = null;
          elem692 = input.readString().value;
          this.groupsId.push(elem692);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size693 = 0;
        var _rtmp3697;
        this.usersId = [];
        var _etype696 = 0;
        _rtmp3697 = input.readListBegin();
        _etype696 = _rtmp3697.etype;
        _size693 = _rtmp3697.size;
        for (var _i698 = 0; _i698 < _size693; ++_i698)
        {
          var elem699 = null;
          elem699 = input.readString().value;
          this.usersId.push(elem699);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_removeUsersFromGroups_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_removeUsersFromGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.groupsId !== null && this.groupsId !== undefined) {
    output.writeFieldBegin('groupsId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.groupsId.length);
    for (var iter700 in this.groupsId)
    {
      if (this.groupsId.hasOwnProperty(iter700))
      {
        iter700 = this.groupsId[iter700];
        output.writeString(iter700);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.usersId !== null && this.usersId !== undefined) {
    output.writeFieldBegin('usersId', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.usersId.length);
    for (var iter701 in this.usersId)
    {
      if (this.usersId.hasOwnProperty(iter701))
      {
        iter701 = this.usersId[iter701];
        output.writeString(iter701);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_removeUsersFromGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_removeUsersFromGroups_result.prototype = {};
UserManagementService_removeUsersFromGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_removeUsersFromGroups_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_removeUsersFromGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_removeGroup_args = function(args) {
  this.token = null;
  this.groupsId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.groupsId !== undefined && args.groupsId !== null) {
      this.groupsId = Thrift.copyList(args.groupsId, [null]);
    }
  }
};
UserManagementService_removeGroup_args.prototype = {};
UserManagementService_removeGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size702 = 0;
        var _rtmp3706;
        this.groupsId = [];
        var _etype705 = 0;
        _rtmp3706 = input.readListBegin();
        _etype705 = _rtmp3706.etype;
        _size702 = _rtmp3706.size;
        for (var _i707 = 0; _i707 < _size702; ++_i707)
        {
          var elem708 = null;
          elem708 = input.readString().value;
          this.groupsId.push(elem708);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_removeGroup_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_removeGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.groupsId !== null && this.groupsId !== undefined) {
    output.writeFieldBegin('groupsId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.groupsId.length);
    for (var iter709 in this.groupsId)
    {
      if (this.groupsId.hasOwnProperty(iter709))
      {
        iter709 = this.groupsId[iter709];
        output.writeString(iter709);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_removeGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_removeGroup_result.prototype = {};
UserManagementService_removeGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_removeGroup_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_removeGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_blockUsers_args = function(args) {
  this.token = null;
  this.userIds = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userIds !== undefined && args.userIds !== null) {
      this.userIds = Thrift.copyList(args.userIds, [null]);
    }
  }
};
UserManagementService_blockUsers_args.prototype = {};
UserManagementService_blockUsers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size710 = 0;
        var _rtmp3714;
        this.userIds = [];
        var _etype713 = 0;
        _rtmp3714 = input.readListBegin();
        _etype713 = _rtmp3714.etype;
        _size710 = _rtmp3714.size;
        for (var _i715 = 0; _i715 < _size710; ++_i715)
        {
          var elem716 = null;
          elem716 = input.readString().value;
          this.userIds.push(elem716);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_blockUsers_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_blockUsers_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.userIds.length);
    for (var iter717 in this.userIds)
    {
      if (this.userIds.hasOwnProperty(iter717))
      {
        iter717 = this.userIds[iter717];
        output.writeString(iter717);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_blockUsers_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_blockUsers_result.prototype = {};
UserManagementService_blockUsers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_blockUsers_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_blockUsers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_unBlockUsers_args = function(args) {
  this.token = null;
  this.userIds = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userIds !== undefined && args.userIds !== null) {
      this.userIds = Thrift.copyList(args.userIds, [null]);
    }
  }
};
UserManagementService_unBlockUsers_args.prototype = {};
UserManagementService_unBlockUsers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size718 = 0;
        var _rtmp3722;
        this.userIds = [];
        var _etype721 = 0;
        _rtmp3722 = input.readListBegin();
        _etype721 = _rtmp3722.etype;
        _size718 = _rtmp3722.size;
        for (var _i723 = 0; _i723 < _size718; ++_i723)
        {
          var elem724 = null;
          elem724 = input.readString().value;
          this.userIds.push(elem724);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_unBlockUsers_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_unBlockUsers_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.userIds.length);
    for (var iter725 in this.userIds)
    {
      if (this.userIds.hasOwnProperty(iter725))
      {
        iter725 = this.userIds[iter725];
        output.writeString(iter725);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_unBlockUsers_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_unBlockUsers_result.prototype = {};
UserManagementService_unBlockUsers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_unBlockUsers_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_unBlockUsers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllExistingRoles_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getAllExistingRoles_args.prototype = {};
UserManagementService_getAllExistingRoles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllExistingRoles_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllExistingRoles_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllExistingRoles_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getAllExistingRoles_result.prototype = {};
UserManagementService_getAllExistingRoles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size726 = 0;
        var _rtmp3730;
        this.success = [];
        var _etype729 = 0;
        _rtmp3730 = input.readListBegin();
        _etype729 = _rtmp3730.etype;
        _size726 = _rtmp3730.size;
        for (var _i731 = 0; _i731 < _size726; ++_i731)
        {
          var elem732 = null;
          elem732 = input.readString().value;
          this.success.push(elem732);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllExistingRoles_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllExistingRoles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter733 in this.success)
    {
      if (this.success.hasOwnProperty(iter733))
      {
        iter733 = this.success[iter733];
        output.writeString(iter733);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_addRolesToUsersOrGroups_args = function(args) {
  this.token = null;
  this.usersOrGroups = null;
  this.roles = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.usersOrGroups !== undefined && args.usersOrGroups !== null) {
      this.usersOrGroups = Thrift.copyList(args.usersOrGroups, [UserOrGroup]);
    }
    if (args.roles !== undefined && args.roles !== null) {
      this.roles = Thrift.copyList(args.roles, [null]);
    }
  }
};
UserManagementService_addRolesToUsersOrGroups_args.prototype = {};
UserManagementService_addRolesToUsersOrGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size734 = 0;
        var _rtmp3738;
        this.usersOrGroups = [];
        var _etype737 = 0;
        _rtmp3738 = input.readListBegin();
        _etype737 = _rtmp3738.etype;
        _size734 = _rtmp3738.size;
        for (var _i739 = 0; _i739 < _size734; ++_i739)
        {
          var elem740 = null;
          elem740 = new UserOrGroup();
          elem740.read(input);
          this.usersOrGroups.push(elem740);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size741 = 0;
        var _rtmp3745;
        this.roles = [];
        var _etype744 = 0;
        _rtmp3745 = input.readListBegin();
        _etype744 = _rtmp3745.etype;
        _size741 = _rtmp3745.size;
        for (var _i746 = 0; _i746 < _size741; ++_i746)
        {
          var elem747 = null;
          elem747 = input.readString().value;
          this.roles.push(elem747);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_addRolesToUsersOrGroups_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_addRolesToUsersOrGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.usersOrGroups !== null && this.usersOrGroups !== undefined) {
    output.writeFieldBegin('usersOrGroups', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.usersOrGroups.length);
    for (var iter748 in this.usersOrGroups)
    {
      if (this.usersOrGroups.hasOwnProperty(iter748))
      {
        iter748 = this.usersOrGroups[iter748];
        iter748.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.roles !== null && this.roles !== undefined) {
    output.writeFieldBegin('roles', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.roles.length);
    for (var iter749 in this.roles)
    {
      if (this.roles.hasOwnProperty(iter749))
      {
        iter749 = this.roles[iter749];
        output.writeString(iter749);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_addRolesToUsersOrGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_addRolesToUsersOrGroups_result.prototype = {};
UserManagementService_addRolesToUsersOrGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_addRolesToUsersOrGroups_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_addRolesToUsersOrGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_revokeRolesFromUsersOrGroups_args = function(args) {
  this.token = null;
  this.usersOrGroups = null;
  this.roles = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.usersOrGroups !== undefined && args.usersOrGroups !== null) {
      this.usersOrGroups = Thrift.copyList(args.usersOrGroups, [UserOrGroup]);
    }
    if (args.roles !== undefined && args.roles !== null) {
      this.roles = Thrift.copyList(args.roles, [null]);
    }
  }
};
UserManagementService_revokeRolesFromUsersOrGroups_args.prototype = {};
UserManagementService_revokeRolesFromUsersOrGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size750 = 0;
        var _rtmp3754;
        this.usersOrGroups = [];
        var _etype753 = 0;
        _rtmp3754 = input.readListBegin();
        _etype753 = _rtmp3754.etype;
        _size750 = _rtmp3754.size;
        for (var _i755 = 0; _i755 < _size750; ++_i755)
        {
          var elem756 = null;
          elem756 = new UserOrGroup();
          elem756.read(input);
          this.usersOrGroups.push(elem756);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size757 = 0;
        var _rtmp3761;
        this.roles = [];
        var _etype760 = 0;
        _rtmp3761 = input.readListBegin();
        _etype760 = _rtmp3761.etype;
        _size757 = _rtmp3761.size;
        for (var _i762 = 0; _i762 < _size757; ++_i762)
        {
          var elem763 = null;
          elem763 = input.readString().value;
          this.roles.push(elem763);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_revokeRolesFromUsersOrGroups_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_revokeRolesFromUsersOrGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.usersOrGroups !== null && this.usersOrGroups !== undefined) {
    output.writeFieldBegin('usersOrGroups', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.usersOrGroups.length);
    for (var iter764 in this.usersOrGroups)
    {
      if (this.usersOrGroups.hasOwnProperty(iter764))
      {
        iter764 = this.usersOrGroups[iter764];
        iter764.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.roles !== null && this.roles !== undefined) {
    output.writeFieldBegin('roles', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.roles.length);
    for (var iter765 in this.roles)
    {
      if (this.roles.hasOwnProperty(iter765))
      {
        iter765 = this.roles[iter765];
        output.writeString(iter765);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_revokeRolesFromUsersOrGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_revokeRolesFromUsersOrGroups_result.prototype = {};
UserManagementService_revokeRolesFromUsersOrGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_revokeRolesFromUsersOrGroups_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_revokeRolesFromUsersOrGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getRolesByUser_args = function(args) {
  this.token = null;
  this.userId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
UserManagementService_getRolesByUser_args.prototype = {};
UserManagementService_getRolesByUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getRolesByUser_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getRolesByUser_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getRolesByUser_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [RoleScHelper]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getRolesByUser_result.prototype = {};
UserManagementService_getRolesByUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size766 = 0;
        var _rtmp3770;
        this.success = {};
        var _ktype767 = 0;
        var _vtype768 = 0;
        _rtmp3770 = input.readMapBegin();
        _ktype767 = _rtmp3770.ktype;
        _vtype768 = _rtmp3770.vtype;
        _size766 = _rtmp3770.size;
        for (var _i771 = 0; _i771 < _size766; ++_i771)
        {
          if (_i771 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key772 = null;
          var val773 = null;
          key772 = input.readString().value;
          val773 = new RoleScHelper();
          val773.read(input);
          this.success[key772] = val773;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getRolesByUser_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getRolesByUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter774 in this.success)
    {
      if (this.success.hasOwnProperty(kiter774))
      {
        var viter775 = this.success[kiter774];
        output.writeString(kiter774);
        viter775.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_loadUserPublicKey_args = function(args) {
  this.token = null;
  this.publicKey = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = args.publicKey;
    }
  }
};
UserManagementService_loadUserPublicKey_args.prototype = {};
UserManagementService_loadUserPublicKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.publicKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_loadUserPublicKey_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_loadUserPublicKey_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRING, 2);
    output.writeString(this.publicKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_loadUserPublicKey_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_loadUserPublicKey_result.prototype = {};
UserManagementService_loadUserPublicKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_loadUserPublicKey_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_loadUserPublicKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllUserPublicKeyInfo_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getAllUserPublicKeyInfo_args.prototype = {};
UserManagementService_getAllUserPublicKeyInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllUserPublicKeyInfo_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllUserPublicKeyInfo_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllUserPublicKeyInfo_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserKeyData]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getAllUserPublicKeyInfo_result.prototype = {};
UserManagementService_getAllUserPublicKeyInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size776 = 0;
        var _rtmp3780;
        this.success = [];
        var _etype779 = 0;
        _rtmp3780 = input.readListBegin();
        _etype779 = _rtmp3780.etype;
        _size776 = _rtmp3780.size;
        for (var _i781 = 0; _i781 < _size776; ++_i781)
        {
          var elem782 = null;
          elem782 = new UserKeyData();
          elem782.read(input);
          this.success.push(elem782);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllUserPublicKeyInfo_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllUserPublicKeyInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter783 in this.success)
    {
      if (this.success.hasOwnProperty(iter783))
      {
        iter783 = this.success[iter783];
        iter783.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_createOrUpdateClientDelegates_args = function(args) {
  this.token = null;
  this.toUserId = null;
  this.clientDelegates = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.toUserId !== undefined && args.toUserId !== null) {
      this.toUserId = args.toUserId;
    }
    if (args.clientDelegates !== undefined && args.clientDelegates !== null) {
      this.clientDelegates = Thrift.copyList(args.clientDelegates, [ClientDelegate]);
    }
  }
};
UserManagementService_createOrUpdateClientDelegates_args.prototype = {};
UserManagementService_createOrUpdateClientDelegates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toUserId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size784 = 0;
        var _rtmp3788;
        this.clientDelegates = [];
        var _etype787 = 0;
        _rtmp3788 = input.readListBegin();
        _etype787 = _rtmp3788.etype;
        _size784 = _rtmp3788.size;
        for (var _i789 = 0; _i789 < _size784; ++_i789)
        {
          var elem790 = null;
          elem790 = new ClientDelegate();
          elem790.read(input);
          this.clientDelegates.push(elem790);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_createOrUpdateClientDelegates_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_createOrUpdateClientDelegates_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.toUserId !== null && this.toUserId !== undefined) {
    output.writeFieldBegin('toUserId', Thrift.Type.STRING, 2);
    output.writeString(this.toUserId);
    output.writeFieldEnd();
  }
  if (this.clientDelegates !== null && this.clientDelegates !== undefined) {
    output.writeFieldBegin('clientDelegates', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.clientDelegates.length);
    for (var iter791 in this.clientDelegates)
    {
      if (this.clientDelegates.hasOwnProperty(iter791))
      {
        iter791 = this.clientDelegates[iter791];
        iter791.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_createOrUpdateClientDelegates_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_createOrUpdateClientDelegates_result.prototype = {};
UserManagementService_createOrUpdateClientDelegates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_createOrUpdateClientDelegates_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_createOrUpdateClientDelegates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_revokeClientDelegates_args = function(args) {
  this.token = null;
  this.delegateIds = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.delegateIds !== undefined && args.delegateIds !== null) {
      this.delegateIds = Thrift.copyList(args.delegateIds, [null]);
    }
  }
};
UserManagementService_revokeClientDelegates_args.prototype = {};
UserManagementService_revokeClientDelegates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size792 = 0;
        var _rtmp3796;
        this.delegateIds = [];
        var _etype795 = 0;
        _rtmp3796 = input.readSetBegin();
        _etype795 = _rtmp3796.etype;
        _size792 = _rtmp3796.size;
        for (var _i797 = 0; _i797 < _size792; ++_i797)
        {
          var elem798 = null;
          elem798 = input.readString().value;
          this.delegateIds.push(elem798);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_revokeClientDelegates_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_revokeClientDelegates_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.delegateIds !== null && this.delegateIds !== undefined) {
    output.writeFieldBegin('delegateIds', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.delegateIds.length);
    for (var iter799 in this.delegateIds)
    {
      if (this.delegateIds.hasOwnProperty(iter799))
      {
        iter799 = this.delegateIds[iter799];
        output.writeString(iter799);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_revokeClientDelegates_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_revokeClientDelegates_result.prototype = {};
UserManagementService_revokeClientDelegates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_revokeClientDelegates_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_revokeClientDelegates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllClientDelegates_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getAllClientDelegates_args.prototype = {};
UserManagementService_getAllClientDelegates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllClientDelegates_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllClientDelegates_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllClientDelegates_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ClientDelegate]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getAllClientDelegates_result.prototype = {};
UserManagementService_getAllClientDelegates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size800 = 0;
        var _rtmp3804;
        this.success = [];
        var _etype803 = 0;
        _rtmp3804 = input.readListBegin();
        _etype803 = _rtmp3804.etype;
        _size800 = _rtmp3804.size;
        for (var _i805 = 0; _i805 < _size800; ++_i805)
        {
          var elem806 = null;
          elem806 = new ClientDelegate();
          elem806.read(input);
          this.success.push(elem806);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllClientDelegates_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllClientDelegates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter807 in this.success)
    {
      if (this.success.hasOwnProperty(iter807))
      {
        iter807 = this.success[iter807];
        iter807.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllClientsForDelegate_args = function(args) {
  this.token = null;
  this.userId = null;
  this.reverse = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.reverse !== undefined && args.reverse !== null) {
      this.reverse = args.reverse;
    }
  }
};
UserManagementService_getAllClientsForDelegate_args.prototype = {};
UserManagementService_getAllClientsForDelegate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.reverse = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllClientsForDelegate_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllClientsForDelegate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.reverse !== null && this.reverse !== undefined) {
    output.writeFieldBegin('reverse', Thrift.Type.BOOL, 3);
    output.writeBool(this.reverse);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllClientsForDelegate_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserOrGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getAllClientsForDelegate_result.prototype = {};
UserManagementService_getAllClientsForDelegate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size808 = 0;
        var _rtmp3812;
        this.success = [];
        var _etype811 = 0;
        _rtmp3812 = input.readListBegin();
        _etype811 = _rtmp3812.etype;
        _size808 = _rtmp3812.size;
        for (var _i813 = 0; _i813 < _size808; ++_i813)
        {
          var elem814 = null;
          elem814 = new UserOrGroup();
          elem814.read(input);
          this.success.push(elem814);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllClientsForDelegate_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllClientsForDelegate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter815 in this.success)
    {
      if (this.success.hasOwnProperty(iter815))
      {
        iter815 = this.success[iter815];
        iter815.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllNotificationsForDelegate_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
UserManagementService_getAllNotificationsForDelegate_args.prototype = {};
UserManagementService_getAllNotificationsForDelegate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllNotificationsForDelegate_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllNotificationsForDelegate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAllNotificationsForDelegate_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getAllNotificationsForDelegate_result.prototype = {};
UserManagementService_getAllNotificationsForDelegate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size816 = 0;
        var _rtmp3820;
        this.success = {};
        var _ktype817 = 0;
        var _vtype818 = 0;
        _rtmp3820 = input.readMapBegin();
        _ktype817 = _rtmp3820.ktype;
        _vtype818 = _rtmp3820.vtype;
        _size816 = _rtmp3820.size;
        for (var _i821 = 0; _i821 < _size816; ++_i821)
        {
          if (_i821 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key822 = null;
          var val823 = null;
          key822 = input.readString().value;
          val823 = input.readI32().value;
          this.success[key822] = val823;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAllNotificationsForDelegate_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAllNotificationsForDelegate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.success));
    for (var kiter824 in this.success)
    {
      if (this.success.hasOwnProperty(kiter824))
      {
        var viter825 = this.success[kiter824];
        output.writeString(kiter824);
        output.writeI32(viter825);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAccounts_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getAccounts_args.prototype = {};
UserManagementService_getAccounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAccounts_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAccounts_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getAccounts_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Account]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getAccounts_result.prototype = {};
UserManagementService_getAccounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size826 = 0;
        var _rtmp3830;
        this.success = [];
        var _etype829 = 0;
        _rtmp3830 = input.readListBegin();
        _etype829 = _rtmp3830.etype;
        _size826 = _rtmp3830.size;
        for (var _i831 = 0; _i831 < _size826; ++_i831)
        {
          var elem832 = null;
          elem832 = new Account();
          elem832.read(input);
          this.success.push(elem832);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getAccounts_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getAccounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter833 in this.success)
    {
      if (this.success.hasOwnProperty(iter833))
      {
        iter833 = this.success[iter833];
        iter833.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getSecurityClassificationsByUser_args = function(args) {
  this.token = null;
  this.userId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
UserManagementService_getSecurityClassificationsByUser_args.prototype = {};
UserManagementService_getSecurityClassificationsByUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getSecurityClassificationsByUser_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getSecurityClassificationsByUser_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getSecurityClassificationsByUser_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [RoleScHelper]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getSecurityClassificationsByUser_result.prototype = {};
UserManagementService_getSecurityClassificationsByUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size834 = 0;
        var _rtmp3838;
        this.success = {};
        var _ktype835 = 0;
        var _vtype836 = 0;
        _rtmp3838 = input.readMapBegin();
        _ktype835 = _rtmp3838.ktype;
        _vtype836 = _rtmp3838.vtype;
        _size834 = _rtmp3838.size;
        for (var _i839 = 0; _i839 < _size834; ++_i839)
        {
          if (_i839 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key840 = null;
          var val841 = null;
          key840 = input.readString().value;
          val841 = new RoleScHelper();
          val841.read(input);
          this.success[key840] = val841;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getSecurityClassificationsByUser_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getSecurityClassificationsByUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter842 in this.success)
    {
      if (this.success.hasOwnProperty(kiter842))
      {
        var viter843 = this.success[kiter842];
        output.writeString(kiter842);
        viter843.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getUserChief_args = function(args) {
  this.token = null;
  this.userId = null;
  this.level = null;
  this.userTypes = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.level !== undefined && args.level !== null) {
      this.level = args.level;
    }
    if (args.userTypes !== undefined && args.userTypes !== null) {
      this.userTypes = Thrift.copyList(args.userTypes, [null]);
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
UserManagementService_getUserChief_args.prototype = {};
UserManagementService_getUserChief_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size844 = 0;
        var _rtmp3848;
        this.userTypes = [];
        var _etype847 = 0;
        _rtmp3848 = input.readSetBegin();
        _etype847 = _rtmp3848.etype;
        _size844 = _rtmp3848.size;
        for (var _i849 = 0; _i849 < _size844; ++_i849)
        {
          var elem850 = null;
          elem850 = input.readI32().value;
          this.userTypes.push(elem850);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getUserChief_args.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getUserChief_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 3);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.userTypes !== null && this.userTypes !== undefined) {
    output.writeFieldBegin('userTypes', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I32, this.userTypes.length);
    for (var iter851 in this.userTypes)
    {
      if (this.userTypes.hasOwnProperty(iter851))
      {
        iter851 = this.userTypes[iter851];
        output.writeI32(iter851);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 5);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementService_getUserChief_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserOrGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
UserManagementService_getUserChief_result.prototype = {};
UserManagementService_getUserChief_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size852 = 0;
        var _rtmp3856;
        this.success = [];
        var _etype855 = 0;
        _rtmp3856 = input.readListBegin();
        _etype855 = _rtmp3856.etype;
        _size852 = _rtmp3856.size;
        for (var _i857 = 0; _i857 < _size852; ++_i857)
        {
          var elem858 = null;
          elem858 = new UserOrGroup();
          elem858.read(input);
          this.success.push(elem858);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserManagementService_getUserChief_result.prototype.write = function(output) {
  output.writeStructBegin('UserManagementService_getUserChief_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter859 in this.success)
    {
      if (this.success.hasOwnProperty(iter859))
      {
        iter859 = this.success[iter859];
        iter859.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserManagementServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
UserManagementServiceClient.prototype = {};
UserManagementServiceClient.prototype.getUserOrGroup = function(token, userOrGroupId, userOrGroupType, callback) {
  if (callback === undefined) {
    this.send_getUserOrGroup(token, userOrGroupId, userOrGroupType);
    return this.recv_getUserOrGroup();
  } else {
    var postData = this.send_getUserOrGroup(token, userOrGroupId, userOrGroupType, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getUserOrGroup);
  }
};

UserManagementServiceClient.prototype.send_getUserOrGroup = function(token, userOrGroupId, userOrGroupType, callback) {
  this.output.writeMessageBegin('getUserOrGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userOrGroupId: userOrGroupId,
    userOrGroupType: userOrGroupType
  };
  var args = new UserManagementService_getUserOrGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getUserOrGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getUserOrGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserOrGroup failed: unknown result';
};
UserManagementServiceClient.prototype.getAllUsersAndGroups = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllUsersAndGroups(token, filter);
    return this.recv_getAllUsersAndGroups();
  } else {
    var postData = this.send_getAllUsersAndGroups(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllUsersAndGroups);
  }
};

UserManagementServiceClient.prototype.send_getAllUsersAndGroups = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllUsersAndGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new UserManagementService_getAllUsersAndGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getAllUsersAndGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getAllUsersAndGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllUsersAndGroups failed: unknown result';
};
UserManagementServiceClient.prototype.getCountAllUsersAndGroups = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getCountAllUsersAndGroups(token, filter);
    return this.recv_getCountAllUsersAndGroups();
  } else {
    var postData = this.send_getCountAllUsersAndGroups(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCountAllUsersAndGroups);
  }
};

UserManagementServiceClient.prototype.send_getCountAllUsersAndGroups = function(token, filter, callback) {
  this.output.writeMessageBegin('getCountAllUsersAndGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new UserManagementService_getCountAllUsersAndGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getCountAllUsersAndGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getCountAllUsersAndGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAllUsersAndGroups failed: unknown result';
};
UserManagementServiceClient.prototype.getAllUsersByGroup = function(token, groupId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllUsersByGroup(token, groupId, filter);
    return this.recv_getAllUsersByGroup();
  } else {
    var postData = this.send_getAllUsersByGroup(token, groupId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllUsersByGroup);
  }
};

UserManagementServiceClient.prototype.send_getAllUsersByGroup = function(token, groupId, filter, callback) {
  this.output.writeMessageBegin('getAllUsersByGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    groupId: groupId,
    filter: filter
  };
  var args = new UserManagementService_getAllUsersByGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getAllUsersByGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getAllUsersByGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllUsersByGroup failed: unknown result';
};
UserManagementServiceClient.prototype.getCountAllUsersByGroup = function(token, groupId, filter, callback) {
  if (callback === undefined) {
    this.send_getCountAllUsersByGroup(token, groupId, filter);
    return this.recv_getCountAllUsersByGroup();
  } else {
    var postData = this.send_getCountAllUsersByGroup(token, groupId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCountAllUsersByGroup);
  }
};

UserManagementServiceClient.prototype.send_getCountAllUsersByGroup = function(token, groupId, filter, callback) {
  this.output.writeMessageBegin('getCountAllUsersByGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    groupId: groupId,
    filter: filter
  };
  var args = new UserManagementService_getCountAllUsersByGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getCountAllUsersByGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getCountAllUsersByGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAllUsersByGroup failed: unknown result';
};
UserManagementServiceClient.prototype.getAllUsers = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllUsers(token, filter);
    return this.recv_getAllUsers();
  } else {
    var postData = this.send_getAllUsers(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllUsers);
  }
};

UserManagementServiceClient.prototype.send_getAllUsers = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllUsers', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new UserManagementService_getAllUsers_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getAllUsers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getAllUsers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllUsers failed: unknown result';
};
UserManagementServiceClient.prototype.getAllGroups = function(token, groupId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllGroups(token, groupId, filter);
    return this.recv_getAllGroups();
  } else {
    var postData = this.send_getAllGroups(token, groupId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllGroups);
  }
};

UserManagementServiceClient.prototype.send_getAllGroups = function(token, groupId, filter, callback) {
  this.output.writeMessageBegin('getAllGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    groupId: groupId,
    filter: filter
  };
  var args = new UserManagementService_getAllGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getAllGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getAllGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllGroups failed: unknown result';
};
UserManagementServiceClient.prototype.getCountAllGroups = function(token, groupId, filter, callback) {
  if (callback === undefined) {
    this.send_getCountAllGroups(token, groupId, filter);
    return this.recv_getCountAllGroups();
  } else {
    var postData = this.send_getCountAllGroups(token, groupId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCountAllGroups);
  }
};

UserManagementServiceClient.prototype.send_getCountAllGroups = function(token, groupId, filter, callback) {
  this.output.writeMessageBegin('getCountAllGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    groupId: groupId,
    filter: filter
  };
  var args = new UserManagementService_getCountAllGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getCountAllGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getCountAllGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAllGroups failed: unknown result';
};
UserManagementServiceClient.prototype.getRolesByUserOrGroup = function(token, type, userOrGroupId, filter, callback) {
  if (callback === undefined) {
    this.send_getRolesByUserOrGroup(token, type, userOrGroupId, filter);
    return this.recv_getRolesByUserOrGroup();
  } else {
    var postData = this.send_getRolesByUserOrGroup(token, type, userOrGroupId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getRolesByUserOrGroup);
  }
};

UserManagementServiceClient.prototype.send_getRolesByUserOrGroup = function(token, type, userOrGroupId, filter, callback) {
  this.output.writeMessageBegin('getRolesByUserOrGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    type: type,
    userOrGroupId: userOrGroupId,
    filter: filter
  };
  var args = new UserManagementService_getRolesByUserOrGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getRolesByUserOrGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getRolesByUserOrGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRolesByUserOrGroup failed: unknown result';
};
UserManagementServiceClient.prototype.getUserOrGroupsByRole = function(token, role, filter, callback) {
  if (callback === undefined) {
    this.send_getUserOrGroupsByRole(token, role, filter);
    return this.recv_getUserOrGroupsByRole();
  } else {
    var postData = this.send_getUserOrGroupsByRole(token, role, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getUserOrGroupsByRole);
  }
};

UserManagementServiceClient.prototype.send_getUserOrGroupsByRole = function(token, role, filter, callback) {
  this.output.writeMessageBegin('getUserOrGroupsByRole', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    role: role,
    filter: filter
  };
  var args = new UserManagementService_getUserOrGroupsByRole_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getUserOrGroupsByRole = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getUserOrGroupsByRole_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserOrGroupsByRole failed: unknown result';
};
UserManagementServiceClient.prototype.createOrUpdateUserGroup = function(token, userGroup, accountId, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateUserGroup(token, userGroup, accountId);
    return this.recv_createOrUpdateUserGroup();
  } else {
    var postData = this.send_createOrUpdateUserGroup(token, userGroup, accountId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateUserGroup);
  }
};

UserManagementServiceClient.prototype.send_createOrUpdateUserGroup = function(token, userGroup, accountId, callback) {
  this.output.writeMessageBegin('createOrUpdateUserGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userGroup: userGroup,
    accountId: accountId
  };
  var args = new UserManagementService_createOrUpdateUserGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_createOrUpdateUserGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_createOrUpdateUserGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateUserGroup failed: unknown result';
};
UserManagementServiceClient.prototype.addUsersToGroups = function(token, groupsId, usersId, callback) {
  if (callback === undefined) {
    this.send_addUsersToGroups(token, groupsId, usersId);
    return this.recv_addUsersToGroups();
  } else {
    var postData = this.send_addUsersToGroups(token, groupsId, usersId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addUsersToGroups);
  }
};

UserManagementServiceClient.prototype.send_addUsersToGroups = function(token, groupsId, usersId, callback) {
  this.output.writeMessageBegin('addUsersToGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    groupsId: groupsId,
    usersId: usersId
  };
  var args = new UserManagementService_addUsersToGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_addUsersToGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_addUsersToGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addUsersToGroups failed: unknown result';
};
UserManagementServiceClient.prototype.createOrUpdateUser = function(token, user, login, password, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateUser(token, user, login, password);
    return this.recv_createOrUpdateUser();
  } else {
    var postData = this.send_createOrUpdateUser(token, user, login, password, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateUser);
  }
};

UserManagementServiceClient.prototype.send_createOrUpdateUser = function(token, user, login, password, callback) {
  this.output.writeMessageBegin('createOrUpdateUser', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    user: user,
    login: login,
    password: password
  };
  var args = new UserManagementService_createOrUpdateUser_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_createOrUpdateUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_createOrUpdateUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateUser failed: unknown result';
};
UserManagementServiceClient.prototype.removeClient = function(token, userId, callback) {
  if (callback === undefined) {
    this.send_removeClient(token, userId);
    return this.recv_removeClient();
  } else {
    var postData = this.send_removeClient(token, userId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeClient);
  }
};

UserManagementServiceClient.prototype.send_removeClient = function(token, userId, callback) {
  this.output.writeMessageBegin('removeClient', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userId: userId
  };
  var args = new UserManagementService_removeClient_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_removeClient = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_removeClient_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeClient failed: unknown result';
};
UserManagementServiceClient.prototype.removeUsersFromGroups = function(token, groupsId, usersId, callback) {
  if (callback === undefined) {
    this.send_removeUsersFromGroups(token, groupsId, usersId);
    return this.recv_removeUsersFromGroups();
  } else {
    var postData = this.send_removeUsersFromGroups(token, groupsId, usersId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeUsersFromGroups);
  }
};

UserManagementServiceClient.prototype.send_removeUsersFromGroups = function(token, groupsId, usersId, callback) {
  this.output.writeMessageBegin('removeUsersFromGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    groupsId: groupsId,
    usersId: usersId
  };
  var args = new UserManagementService_removeUsersFromGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_removeUsersFromGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_removeUsersFromGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeUsersFromGroups failed: unknown result';
};
UserManagementServiceClient.prototype.removeGroup = function(token, groupsId, callback) {
  if (callback === undefined) {
    this.send_removeGroup(token, groupsId);
    return this.recv_removeGroup();
  } else {
    var postData = this.send_removeGroup(token, groupsId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeGroup);
  }
};

UserManagementServiceClient.prototype.send_removeGroup = function(token, groupsId, callback) {
  this.output.writeMessageBegin('removeGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    groupsId: groupsId
  };
  var args = new UserManagementService_removeGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_removeGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_removeGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeGroup failed: unknown result';
};
UserManagementServiceClient.prototype.blockUsers = function(token, userIds, callback) {
  if (callback === undefined) {
    this.send_blockUsers(token, userIds);
    return this.recv_blockUsers();
  } else {
    var postData = this.send_blockUsers(token, userIds, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_blockUsers);
  }
};

UserManagementServiceClient.prototype.send_blockUsers = function(token, userIds, callback) {
  this.output.writeMessageBegin('blockUsers', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userIds: userIds
  };
  var args = new UserManagementService_blockUsers_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_blockUsers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_blockUsers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'blockUsers failed: unknown result';
};
UserManagementServiceClient.prototype.unBlockUsers = function(token, userIds, callback) {
  if (callback === undefined) {
    this.send_unBlockUsers(token, userIds);
    return this.recv_unBlockUsers();
  } else {
    var postData = this.send_unBlockUsers(token, userIds, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_unBlockUsers);
  }
};

UserManagementServiceClient.prototype.send_unBlockUsers = function(token, userIds, callback) {
  this.output.writeMessageBegin('unBlockUsers', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userIds: userIds
  };
  var args = new UserManagementService_unBlockUsers_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_unBlockUsers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_unBlockUsers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'unBlockUsers failed: unknown result';
};
UserManagementServiceClient.prototype.getAllExistingRoles = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllExistingRoles(token, filter);
    return this.recv_getAllExistingRoles();
  } else {
    var postData = this.send_getAllExistingRoles(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllExistingRoles);
  }
};

UserManagementServiceClient.prototype.send_getAllExistingRoles = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllExistingRoles', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new UserManagementService_getAllExistingRoles_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getAllExistingRoles = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getAllExistingRoles_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllExistingRoles failed: unknown result';
};
UserManagementServiceClient.prototype.addRolesToUsersOrGroups = function(token, usersOrGroups, roles, callback) {
  if (callback === undefined) {
    this.send_addRolesToUsersOrGroups(token, usersOrGroups, roles);
    return this.recv_addRolesToUsersOrGroups();
  } else {
    var postData = this.send_addRolesToUsersOrGroups(token, usersOrGroups, roles, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addRolesToUsersOrGroups);
  }
};

UserManagementServiceClient.prototype.send_addRolesToUsersOrGroups = function(token, usersOrGroups, roles, callback) {
  this.output.writeMessageBegin('addRolesToUsersOrGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    usersOrGroups: usersOrGroups,
    roles: roles
  };
  var args = new UserManagementService_addRolesToUsersOrGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_addRolesToUsersOrGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_addRolesToUsersOrGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addRolesToUsersOrGroups failed: unknown result';
};
UserManagementServiceClient.prototype.revokeRolesFromUsersOrGroups = function(token, usersOrGroups, roles, callback) {
  if (callback === undefined) {
    this.send_revokeRolesFromUsersOrGroups(token, usersOrGroups, roles);
    return this.recv_revokeRolesFromUsersOrGroups();
  } else {
    var postData = this.send_revokeRolesFromUsersOrGroups(token, usersOrGroups, roles, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_revokeRolesFromUsersOrGroups);
  }
};

UserManagementServiceClient.prototype.send_revokeRolesFromUsersOrGroups = function(token, usersOrGroups, roles, callback) {
  this.output.writeMessageBegin('revokeRolesFromUsersOrGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    usersOrGroups: usersOrGroups,
    roles: roles
  };
  var args = new UserManagementService_revokeRolesFromUsersOrGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_revokeRolesFromUsersOrGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_revokeRolesFromUsersOrGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'revokeRolesFromUsersOrGroups failed: unknown result';
};
UserManagementServiceClient.prototype.getRolesByUser = function(token, userId, callback) {
  if (callback === undefined) {
    this.send_getRolesByUser(token, userId);
    return this.recv_getRolesByUser();
  } else {
    var postData = this.send_getRolesByUser(token, userId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getRolesByUser);
  }
};

UserManagementServiceClient.prototype.send_getRolesByUser = function(token, userId, callback) {
  this.output.writeMessageBegin('getRolesByUser', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userId: userId
  };
  var args = new UserManagementService_getRolesByUser_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getRolesByUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getRolesByUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRolesByUser failed: unknown result';
};
UserManagementServiceClient.prototype.loadUserPublicKey = function(token, publicKey, callback) {
  if (callback === undefined) {
    this.send_loadUserPublicKey(token, publicKey);
    return this.recv_loadUserPublicKey();
  } else {
    var postData = this.send_loadUserPublicKey(token, publicKey, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_loadUserPublicKey);
  }
};

UserManagementServiceClient.prototype.send_loadUserPublicKey = function(token, publicKey, callback) {
  this.output.writeMessageBegin('loadUserPublicKey', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    publicKey: publicKey
  };
  var args = new UserManagementService_loadUserPublicKey_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_loadUserPublicKey = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_loadUserPublicKey_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'loadUserPublicKey failed: unknown result';
};
UserManagementServiceClient.prototype.getAllUserPublicKeyInfo = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllUserPublicKeyInfo(token, filter);
    return this.recv_getAllUserPublicKeyInfo();
  } else {
    var postData = this.send_getAllUserPublicKeyInfo(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllUserPublicKeyInfo);
  }
};

UserManagementServiceClient.prototype.send_getAllUserPublicKeyInfo = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllUserPublicKeyInfo', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new UserManagementService_getAllUserPublicKeyInfo_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getAllUserPublicKeyInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getAllUserPublicKeyInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllUserPublicKeyInfo failed: unknown result';
};
UserManagementServiceClient.prototype.createOrUpdateClientDelegates = function(token, toUserId, clientDelegates, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateClientDelegates(token, toUserId, clientDelegates);
    return this.recv_createOrUpdateClientDelegates();
  } else {
    var postData = this.send_createOrUpdateClientDelegates(token, toUserId, clientDelegates, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateClientDelegates);
  }
};

UserManagementServiceClient.prototype.send_createOrUpdateClientDelegates = function(token, toUserId, clientDelegates, callback) {
  this.output.writeMessageBegin('createOrUpdateClientDelegates', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    toUserId: toUserId,
    clientDelegates: clientDelegates
  };
  var args = new UserManagementService_createOrUpdateClientDelegates_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_createOrUpdateClientDelegates = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_createOrUpdateClientDelegates_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateClientDelegates failed: unknown result';
};
UserManagementServiceClient.prototype.revokeClientDelegates = function(token, delegateIds, callback) {
  if (callback === undefined) {
    this.send_revokeClientDelegates(token, delegateIds);
    return this.recv_revokeClientDelegates();
  } else {
    var postData = this.send_revokeClientDelegates(token, delegateIds, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_revokeClientDelegates);
  }
};

UserManagementServiceClient.prototype.send_revokeClientDelegates = function(token, delegateIds, callback) {
  this.output.writeMessageBegin('revokeClientDelegates', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    delegateIds: delegateIds
  };
  var args = new UserManagementService_revokeClientDelegates_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_revokeClientDelegates = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_revokeClientDelegates_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'revokeClientDelegates failed: unknown result';
};
UserManagementServiceClient.prototype.getAllClientDelegates = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllClientDelegates(token, filter);
    return this.recv_getAllClientDelegates();
  } else {
    var postData = this.send_getAllClientDelegates(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllClientDelegates);
  }
};

UserManagementServiceClient.prototype.send_getAllClientDelegates = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllClientDelegates', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new UserManagementService_getAllClientDelegates_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getAllClientDelegates = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getAllClientDelegates_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllClientDelegates failed: unknown result';
};
UserManagementServiceClient.prototype.getAllClientsForDelegate = function(token, userId, reverse, callback) {
  if (callback === undefined) {
    this.send_getAllClientsForDelegate(token, userId, reverse);
    return this.recv_getAllClientsForDelegate();
  } else {
    var postData = this.send_getAllClientsForDelegate(token, userId, reverse, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllClientsForDelegate);
  }
};

UserManagementServiceClient.prototype.send_getAllClientsForDelegate = function(token, userId, reverse, callback) {
  this.output.writeMessageBegin('getAllClientsForDelegate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userId: userId,
    reverse: reverse
  };
  var args = new UserManagementService_getAllClientsForDelegate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getAllClientsForDelegate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getAllClientsForDelegate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllClientsForDelegate failed: unknown result';
};
UserManagementServiceClient.prototype.getAllNotificationsForDelegate = function(token, callback) {
  if (callback === undefined) {
    this.send_getAllNotificationsForDelegate(token);
    return this.recv_getAllNotificationsForDelegate();
  } else {
    var postData = this.send_getAllNotificationsForDelegate(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllNotificationsForDelegate);
  }
};

UserManagementServiceClient.prototype.send_getAllNotificationsForDelegate = function(token, callback) {
  this.output.writeMessageBegin('getAllNotificationsForDelegate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new UserManagementService_getAllNotificationsForDelegate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getAllNotificationsForDelegate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getAllNotificationsForDelegate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllNotificationsForDelegate failed: unknown result';
};
UserManagementServiceClient.prototype.getAccounts = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAccounts(token, filter);
    return this.recv_getAccounts();
  } else {
    var postData = this.send_getAccounts(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAccounts);
  }
};

UserManagementServiceClient.prototype.send_getAccounts = function(token, filter, callback) {
  this.output.writeMessageBegin('getAccounts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new UserManagementService_getAccounts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getAccounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getAccounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAccounts failed: unknown result';
};
UserManagementServiceClient.prototype.getSecurityClassificationsByUser = function(token, userId, callback) {
  if (callback === undefined) {
    this.send_getSecurityClassificationsByUser(token, userId);
    return this.recv_getSecurityClassificationsByUser();
  } else {
    var postData = this.send_getSecurityClassificationsByUser(token, userId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSecurityClassificationsByUser);
  }
};

UserManagementServiceClient.prototype.send_getSecurityClassificationsByUser = function(token, userId, callback) {
  this.output.writeMessageBegin('getSecurityClassificationsByUser', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userId: userId
  };
  var args = new UserManagementService_getSecurityClassificationsByUser_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getSecurityClassificationsByUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getSecurityClassificationsByUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSecurityClassificationsByUser failed: unknown result';
};
UserManagementServiceClient.prototype.getUserChief = function(token, userId, level, userTypes, filter, callback) {
  if (callback === undefined) {
    this.send_getUserChief(token, userId, level, userTypes, filter);
    return this.recv_getUserChief();
  } else {
    var postData = this.send_getUserChief(token, userId, level, userTypes, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getUserChief);
  }
};

UserManagementServiceClient.prototype.send_getUserChief = function(token, userId, level, userTypes, filter, callback) {
  this.output.writeMessageBegin('getUserChief', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userId: userId,
    level: level,
    userTypes: userTypes,
    filter: filter
  };
  var args = new UserManagementService_getUserChief_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UserManagementServiceClient.prototype.recv_getUserChief = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserManagementService_getUserChief_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUserChief failed: unknown result';
};
