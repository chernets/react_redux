//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

SecurityClassificationService_getAllSecurityClassification_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
SecurityClassificationService_getAllSecurityClassification_args.prototype = {};
SecurityClassificationService_getAllSecurityClassification_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassification_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_getAllSecurityClassification_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassification_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SecurityClassification]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_getAllSecurityClassification_result.prototype = {};
SecurityClassificationService_getAllSecurityClassification_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2136 = 0;
        var _rtmp32140;
        this.success = [];
        var _etype2139 = 0;
        _rtmp32140 = input.readListBegin();
        _etype2139 = _rtmp32140.etype;
        _size2136 = _rtmp32140.size;
        for (var _i2141 = 0; _i2141 < _size2136; ++_i2141)
        {
          var elem2142 = null;
          elem2142 = new SecurityClassification();
          elem2142.read(input);
          this.success.push(elem2142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassification_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_getAllSecurityClassification_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2143 in this.success)
    {
      if (this.success.hasOwnProperty(iter2143))
      {
        iter2143 = this.success[iter2143];
        iter2143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_createOrUpdateSecurityClassification_args = function(args) {
  this.token = null;
  this.securityClassification = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.securityClassification !== undefined && args.securityClassification !== null) {
      this.securityClassification = new SecurityClassification(args.securityClassification);
    }
  }
};
SecurityClassificationService_createOrUpdateSecurityClassification_args.prototype = {};
SecurityClassificationService_createOrUpdateSecurityClassification_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.securityClassification = new SecurityClassification();
        this.securityClassification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_createOrUpdateSecurityClassification_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_createOrUpdateSecurityClassification_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.securityClassification !== null && this.securityClassification !== undefined) {
    output.writeFieldBegin('securityClassification', Thrift.Type.STRUCT, 2);
    this.securityClassification.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_createOrUpdateSecurityClassification_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SecurityClassification(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_createOrUpdateSecurityClassification_result.prototype = {};
SecurityClassificationService_createOrUpdateSecurityClassification_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SecurityClassification();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_createOrUpdateSecurityClassification_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_createOrUpdateSecurityClassification_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassification_args = function(args) {
  this.token = null;
  this.securityClassificationId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.securityClassificationId !== undefined && args.securityClassificationId !== null) {
      this.securityClassificationId = args.securityClassificationId;
    }
  }
};
SecurityClassificationService_removeSecurityClassification_args.prototype = {};
SecurityClassificationService_removeSecurityClassification_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.securityClassificationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassification_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_removeSecurityClassification_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.securityClassificationId !== null && this.securityClassificationId !== undefined) {
    output.writeFieldBegin('securityClassificationId', Thrift.Type.STRING, 2);
    output.writeString(this.securityClassificationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassification_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_removeSecurityClassification_result.prototype = {};
SecurityClassificationService_removeSecurityClassification_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassification_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_removeSecurityClassification_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationsToUserGroups_args = function(args) {
  this.token = null;
  this.securityClassificationIds = null;
  this.userOrGroups = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.securityClassificationIds !== undefined && args.securityClassificationIds !== null) {
      this.securityClassificationIds = Thrift.copyList(args.securityClassificationIds, [null]);
    }
    if (args.userOrGroups !== undefined && args.userOrGroups !== null) {
      this.userOrGroups = Thrift.copyList(args.userOrGroups, [UserOrGroup]);
    }
  }
};
SecurityClassificationService_addSecurityClassificationsToUserGroups_args.prototype = {};
SecurityClassificationService_addSecurityClassificationsToUserGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2144 = 0;
        var _rtmp32148;
        this.securityClassificationIds = [];
        var _etype2147 = 0;
        _rtmp32148 = input.readListBegin();
        _etype2147 = _rtmp32148.etype;
        _size2144 = _rtmp32148.size;
        for (var _i2149 = 0; _i2149 < _size2144; ++_i2149)
        {
          var elem2150 = null;
          elem2150 = input.readString().value;
          this.securityClassificationIds.push(elem2150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2151 = 0;
        var _rtmp32155;
        this.userOrGroups = [];
        var _etype2154 = 0;
        _rtmp32155 = input.readListBegin();
        _etype2154 = _rtmp32155.etype;
        _size2151 = _rtmp32155.size;
        for (var _i2156 = 0; _i2156 < _size2151; ++_i2156)
        {
          var elem2157 = null;
          elem2157 = new UserOrGroup();
          elem2157.read(input);
          this.userOrGroups.push(elem2157);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationsToUserGroups_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_addSecurityClassificationsToUserGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.securityClassificationIds !== null && this.securityClassificationIds !== undefined) {
    output.writeFieldBegin('securityClassificationIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.securityClassificationIds.length);
    for (var iter2158 in this.securityClassificationIds)
    {
      if (this.securityClassificationIds.hasOwnProperty(iter2158))
      {
        iter2158 = this.securityClassificationIds[iter2158];
        output.writeString(iter2158);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userOrGroups !== null && this.userOrGroups !== undefined) {
    output.writeFieldBegin('userOrGroups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroups.length);
    for (var iter2159 in this.userOrGroups)
    {
      if (this.userOrGroups.hasOwnProperty(iter2159))
      {
        iter2159 = this.userOrGroups[iter2159];
        iter2159.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationsToUserGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_addSecurityClassificationsToUserGroups_result.prototype = {};
SecurityClassificationService_addSecurityClassificationsToUserGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationsToUserGroups_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_addSecurityClassificationsToUserGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationsFromUserGroups_args = function(args) {
  this.token = null;
  this.securityClassificationIds = null;
  this.userOrGroups = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.securityClassificationIds !== undefined && args.securityClassificationIds !== null) {
      this.securityClassificationIds = Thrift.copyList(args.securityClassificationIds, [null]);
    }
    if (args.userOrGroups !== undefined && args.userOrGroups !== null) {
      this.userOrGroups = Thrift.copyList(args.userOrGroups, [UserOrGroup]);
    }
  }
};
SecurityClassificationService_removeSecurityClassificationsFromUserGroups_args.prototype = {};
SecurityClassificationService_removeSecurityClassificationsFromUserGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2160 = 0;
        var _rtmp32164;
        this.securityClassificationIds = [];
        var _etype2163 = 0;
        _rtmp32164 = input.readListBegin();
        _etype2163 = _rtmp32164.etype;
        _size2160 = _rtmp32164.size;
        for (var _i2165 = 0; _i2165 < _size2160; ++_i2165)
        {
          var elem2166 = null;
          elem2166 = input.readString().value;
          this.securityClassificationIds.push(elem2166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2167 = 0;
        var _rtmp32171;
        this.userOrGroups = [];
        var _etype2170 = 0;
        _rtmp32171 = input.readListBegin();
        _etype2170 = _rtmp32171.etype;
        _size2167 = _rtmp32171.size;
        for (var _i2172 = 0; _i2172 < _size2167; ++_i2172)
        {
          var elem2173 = null;
          elem2173 = new UserOrGroup();
          elem2173.read(input);
          this.userOrGroups.push(elem2173);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationsFromUserGroups_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_removeSecurityClassificationsFromUserGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.securityClassificationIds !== null && this.securityClassificationIds !== undefined) {
    output.writeFieldBegin('securityClassificationIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.securityClassificationIds.length);
    for (var iter2174 in this.securityClassificationIds)
    {
      if (this.securityClassificationIds.hasOwnProperty(iter2174))
      {
        iter2174 = this.securityClassificationIds[iter2174];
        output.writeString(iter2174);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userOrGroups !== null && this.userOrGroups !== undefined) {
    output.writeFieldBegin('userOrGroups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroups.length);
    for (var iter2175 in this.userOrGroups)
    {
      if (this.userOrGroups.hasOwnProperty(iter2175))
      {
        iter2175 = this.userOrGroups[iter2175];
        iter2175.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationsFromUserGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_removeSecurityClassificationsFromUserGroups_result.prototype = {};
SecurityClassificationService_removeSecurityClassificationsFromUserGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationsFromUserGroups_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_removeSecurityClassificationsFromUserGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationsByUserOrGroup_args = function(args) {
  this.token = null;
  this.type = null;
  this.userOrGroupId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.userOrGroupId !== undefined && args.userOrGroupId !== null) {
      this.userOrGroupId = args.userOrGroupId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
SecurityClassificationService_getAllSecurityClassificationsByUserOrGroup_args.prototype = {};
SecurityClassificationService_getAllSecurityClassificationsByUserOrGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userOrGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationsByUserOrGroup_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_getAllSecurityClassificationsByUserOrGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.userOrGroupId !== null && this.userOrGroupId !== undefined) {
    output.writeFieldBegin('userOrGroupId', Thrift.Type.STRING, 3);
    output.writeString(this.userOrGroupId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationsByUserOrGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SecurityClassification]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_getAllSecurityClassificationsByUserOrGroup_result.prototype = {};
SecurityClassificationService_getAllSecurityClassificationsByUserOrGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2176 = 0;
        var _rtmp32180;
        this.success = [];
        var _etype2179 = 0;
        _rtmp32180 = input.readListBegin();
        _etype2179 = _rtmp32180.etype;
        _size2176 = _rtmp32180.size;
        for (var _i2181 = 0; _i2181 < _size2176; ++_i2181)
        {
          var elem2182 = null;
          elem2182 = new SecurityClassification();
          elem2182.read(input);
          this.success.push(elem2182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationsByUserOrGroup_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_getAllSecurityClassificationsByUserOrGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2183 in this.success)
    {
      if (this.success.hasOwnProperty(iter2183))
      {
        iter2183 = this.success[iter2183];
        iter2183.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationByPatternId_args = function(args) {
  this.token = null;
  this.patternId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.patternId !== undefined && args.patternId !== null) {
      this.patternId = args.patternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
SecurityClassificationService_getAllSecurityClassificationByPatternId_args.prototype = {};
SecurityClassificationService_getAllSecurityClassificationByPatternId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.patternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationByPatternId_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_getAllSecurityClassificationByPatternId_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.patternId !== null && this.patternId !== undefined) {
    output.writeFieldBegin('patternId', Thrift.Type.STRING, 2);
    output.writeString(this.patternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationByPatternId_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SecurityClassification]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_getAllSecurityClassificationByPatternId_result.prototype = {};
SecurityClassificationService_getAllSecurityClassificationByPatternId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2184 = 0;
        var _rtmp32188;
        this.success = [];
        var _etype2187 = 0;
        _rtmp32188 = input.readListBegin();
        _etype2187 = _rtmp32188.etype;
        _size2184 = _rtmp32188.size;
        for (var _i2189 = 0; _i2189 < _size2184; ++_i2189)
        {
          var elem2190 = null;
          elem2190 = new SecurityClassification();
          elem2190.read(input);
          this.success.push(elem2190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationByPatternId_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_getAllSecurityClassificationByPatternId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2191 in this.success)
    {
      if (this.success.hasOwnProperty(iter2191))
      {
        iter2191 = this.success[iter2191];
        iter2191.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationByDocumentId_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
SecurityClassificationService_getAllSecurityClassificationByDocumentId_args.prototype = {};
SecurityClassificationService_getAllSecurityClassificationByDocumentId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationByDocumentId_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_getAllSecurityClassificationByDocumentId_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationByDocumentId_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SecurityClassification]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_getAllSecurityClassificationByDocumentId_result.prototype = {};
SecurityClassificationService_getAllSecurityClassificationByDocumentId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2192 = 0;
        var _rtmp32196;
        this.success = [];
        var _etype2195 = 0;
        _rtmp32196 = input.readListBegin();
        _etype2195 = _rtmp32196.etype;
        _size2192 = _rtmp32196.size;
        for (var _i2197 = 0; _i2197 < _size2192; ++_i2197)
        {
          var elem2198 = null;
          elem2198 = new SecurityClassification();
          elem2198.read(input);
          this.success.push(elem2198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationByDocumentId_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_getAllSecurityClassificationByDocumentId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2199 in this.success)
    {
      if (this.success.hasOwnProperty(iter2199))
      {
        iter2199 = this.success[iter2199];
        iter2199.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationsToDocPattern_args = function(args) {
  this.token = null;
  this.securityClassificationsId = null;
  this.docPatternId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.securityClassificationsId !== undefined && args.securityClassificationsId !== null) {
      this.securityClassificationsId = Thrift.copyList(args.securityClassificationsId, [null]);
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
  }
};
SecurityClassificationService_addSecurityClassificationsToDocPattern_args.prototype = {};
SecurityClassificationService_addSecurityClassificationsToDocPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2200 = 0;
        var _rtmp32204;
        this.securityClassificationsId = [];
        var _etype2203 = 0;
        _rtmp32204 = input.readListBegin();
        _etype2203 = _rtmp32204.etype;
        _size2200 = _rtmp32204.size;
        for (var _i2205 = 0; _i2205 < _size2200; ++_i2205)
        {
          var elem2206 = null;
          elem2206 = input.readString().value;
          this.securityClassificationsId.push(elem2206);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationsToDocPattern_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_addSecurityClassificationsToDocPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.securityClassificationsId !== null && this.securityClassificationsId !== undefined) {
    output.writeFieldBegin('securityClassificationsId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.securityClassificationsId.length);
    for (var iter2207 in this.securityClassificationsId)
    {
      if (this.securityClassificationsId.hasOwnProperty(iter2207))
      {
        iter2207 = this.securityClassificationsId[iter2207];
        output.writeString(iter2207);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 3);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationsToDocPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_addSecurityClassificationsToDocPattern_result.prototype = {};
SecurityClassificationService_addSecurityClassificationsToDocPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationsToDocPattern_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_addSecurityClassificationsToDocPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationsFromDocPattern_args = function(args) {
  this.token = null;
  this.securityClassificationsId = null;
  this.docPatternId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.securityClassificationsId !== undefined && args.securityClassificationsId !== null) {
      this.securityClassificationsId = Thrift.copyList(args.securityClassificationsId, [null]);
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
  }
};
SecurityClassificationService_removeSecurityClassificationsFromDocPattern_args.prototype = {};
SecurityClassificationService_removeSecurityClassificationsFromDocPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2208 = 0;
        var _rtmp32212;
        this.securityClassificationsId = [];
        var _etype2211 = 0;
        _rtmp32212 = input.readListBegin();
        _etype2211 = _rtmp32212.etype;
        _size2208 = _rtmp32212.size;
        for (var _i2213 = 0; _i2213 < _size2208; ++_i2213)
        {
          var elem2214 = null;
          elem2214 = input.readString().value;
          this.securityClassificationsId.push(elem2214);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationsFromDocPattern_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_removeSecurityClassificationsFromDocPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.securityClassificationsId !== null && this.securityClassificationsId !== undefined) {
    output.writeFieldBegin('securityClassificationsId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.securityClassificationsId.length);
    for (var iter2215 in this.securityClassificationsId)
    {
      if (this.securityClassificationsId.hasOwnProperty(iter2215))
      {
        iter2215 = this.securityClassificationsId[iter2215];
        output.writeString(iter2215);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 3);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationsFromDocPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_removeSecurityClassificationsFromDocPattern_result.prototype = {};
SecurityClassificationService_removeSecurityClassificationsFromDocPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationsFromDocPattern_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_removeSecurityClassificationsFromDocPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationsToDocument_args = function(args) {
  this.token = null;
  this.securityClassificationsId = null;
  this.documentId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.securityClassificationsId !== undefined && args.securityClassificationsId !== null) {
      this.securityClassificationsId = Thrift.copyList(args.securityClassificationsId, [null]);
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
SecurityClassificationService_addSecurityClassificationsToDocument_args.prototype = {};
SecurityClassificationService_addSecurityClassificationsToDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2216 = 0;
        var _rtmp32220;
        this.securityClassificationsId = [];
        var _etype2219 = 0;
        _rtmp32220 = input.readListBegin();
        _etype2219 = _rtmp32220.etype;
        _size2216 = _rtmp32220.size;
        for (var _i2221 = 0; _i2221 < _size2216; ++_i2221)
        {
          var elem2222 = null;
          elem2222 = input.readString().value;
          this.securityClassificationsId.push(elem2222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationsToDocument_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_addSecurityClassificationsToDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.securityClassificationsId !== null && this.securityClassificationsId !== undefined) {
    output.writeFieldBegin('securityClassificationsId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.securityClassificationsId.length);
    for (var iter2223 in this.securityClassificationsId)
    {
      if (this.securityClassificationsId.hasOwnProperty(iter2223))
      {
        iter2223 = this.securityClassificationsId[iter2223];
        output.writeString(iter2223);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 3);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationsToDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_addSecurityClassificationsToDocument_result.prototype = {};
SecurityClassificationService_addSecurityClassificationsToDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationsToDocument_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_addSecurityClassificationsToDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_changeSecurityClassificationsForDocument_args = function(args) {
  this.token = null;
  this.addedSecurityClassificationsId = null;
  this.removedSecurityClassificationsId = null;
  this.documentId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.addedSecurityClassificationsId !== undefined && args.addedSecurityClassificationsId !== null) {
      this.addedSecurityClassificationsId = Thrift.copyList(args.addedSecurityClassificationsId, [null]);
    }
    if (args.removedSecurityClassificationsId !== undefined && args.removedSecurityClassificationsId !== null) {
      this.removedSecurityClassificationsId = Thrift.copyList(args.removedSecurityClassificationsId, [null]);
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
SecurityClassificationService_changeSecurityClassificationsForDocument_args.prototype = {};
SecurityClassificationService_changeSecurityClassificationsForDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2224 = 0;
        var _rtmp32228;
        this.addedSecurityClassificationsId = [];
        var _etype2227 = 0;
        _rtmp32228 = input.readListBegin();
        _etype2227 = _rtmp32228.etype;
        _size2224 = _rtmp32228.size;
        for (var _i2229 = 0; _i2229 < _size2224; ++_i2229)
        {
          var elem2230 = null;
          elem2230 = input.readString().value;
          this.addedSecurityClassificationsId.push(elem2230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2231 = 0;
        var _rtmp32235;
        this.removedSecurityClassificationsId = [];
        var _etype2234 = 0;
        _rtmp32235 = input.readListBegin();
        _etype2234 = _rtmp32235.etype;
        _size2231 = _rtmp32235.size;
        for (var _i2236 = 0; _i2236 < _size2231; ++_i2236)
        {
          var elem2237 = null;
          elem2237 = input.readString().value;
          this.removedSecurityClassificationsId.push(elem2237);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_changeSecurityClassificationsForDocument_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_changeSecurityClassificationsForDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.addedSecurityClassificationsId !== null && this.addedSecurityClassificationsId !== undefined) {
    output.writeFieldBegin('addedSecurityClassificationsId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.addedSecurityClassificationsId.length);
    for (var iter2238 in this.addedSecurityClassificationsId)
    {
      if (this.addedSecurityClassificationsId.hasOwnProperty(iter2238))
      {
        iter2238 = this.addedSecurityClassificationsId[iter2238];
        output.writeString(iter2238);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.removedSecurityClassificationsId !== null && this.removedSecurityClassificationsId !== undefined) {
    output.writeFieldBegin('removedSecurityClassificationsId', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.removedSecurityClassificationsId.length);
    for (var iter2239 in this.removedSecurityClassificationsId)
    {
      if (this.removedSecurityClassificationsId.hasOwnProperty(iter2239))
      {
        iter2239 = this.removedSecurityClassificationsId[iter2239];
        output.writeString(iter2239);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 4);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 5);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_changeSecurityClassificationsForDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_changeSecurityClassificationsForDocument_result.prototype = {};
SecurityClassificationService_changeSecurityClassificationsForDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_changeSecurityClassificationsForDocument_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_changeSecurityClassificationsForDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationsFromDocument_args = function(args) {
  this.token = null;
  this.securityClassificationsId = null;
  this.documentId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.securityClassificationsId !== undefined && args.securityClassificationsId !== null) {
      this.securityClassificationsId = Thrift.copyList(args.securityClassificationsId, [null]);
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
SecurityClassificationService_removeSecurityClassificationsFromDocument_args.prototype = {};
SecurityClassificationService_removeSecurityClassificationsFromDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2240 = 0;
        var _rtmp32244;
        this.securityClassificationsId = [];
        var _etype2243 = 0;
        _rtmp32244 = input.readListBegin();
        _etype2243 = _rtmp32244.etype;
        _size2240 = _rtmp32244.size;
        for (var _i2245 = 0; _i2245 < _size2240; ++_i2245)
        {
          var elem2246 = null;
          elem2246 = input.readString().value;
          this.securityClassificationsId.push(elem2246);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationsFromDocument_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_removeSecurityClassificationsFromDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.securityClassificationsId !== null && this.securityClassificationsId !== undefined) {
    output.writeFieldBegin('securityClassificationsId', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.securityClassificationsId.length);
    for (var iter2247 in this.securityClassificationsId)
    {
      if (this.securityClassificationsId.hasOwnProperty(iter2247))
      {
        iter2247 = this.securityClassificationsId[iter2247];
        output.writeString(iter2247);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 3);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationsFromDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_removeSecurityClassificationsFromDocument_result.prototype = {};
SecurityClassificationService_removeSecurityClassificationsFromDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationsFromDocument_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_removeSecurityClassificationsFromDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationDependencies_args = function(args) {
  this.token = null;
  this.securityClassificationId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.securityClassificationId !== undefined && args.securityClassificationId !== null) {
      this.securityClassificationId = args.securityClassificationId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
SecurityClassificationService_getAllSecurityClassificationDependencies_args.prototype = {};
SecurityClassificationService_getAllSecurityClassificationDependencies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.securityClassificationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationDependencies_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_getAllSecurityClassificationDependencies_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.securityClassificationId !== null && this.securityClassificationId !== undefined) {
    output.writeFieldBegin('securityClassificationId', Thrift.Type.STRING, 2);
    output.writeString(this.securityClassificationId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationDependencies_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SecurityClassification]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_getAllSecurityClassificationDependencies_result.prototype = {};
SecurityClassificationService_getAllSecurityClassificationDependencies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2248 = 0;
        var _rtmp32252;
        this.success = [];
        var _etype2251 = 0;
        _rtmp32252 = input.readListBegin();
        _etype2251 = _rtmp32252.etype;
        _size2248 = _rtmp32252.size;
        for (var _i2253 = 0; _i2253 < _size2248; ++_i2253)
        {
          var elem2254 = null;
          elem2254 = new SecurityClassification();
          elem2254.read(input);
          this.success.push(elem2254);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_getAllSecurityClassificationDependencies_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_getAllSecurityClassificationDependencies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2255 in this.success)
    {
      if (this.success.hasOwnProperty(iter2255))
      {
        iter2255 = this.success[iter2255];
        iter2255.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationDependencies_args = function(args) {
  this.token = null;
  this.securityClassificationId = null;
  this.securityClassificationsId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.securityClassificationId !== undefined && args.securityClassificationId !== null) {
      this.securityClassificationId = args.securityClassificationId;
    }
    if (args.securityClassificationsId !== undefined && args.securityClassificationsId !== null) {
      this.securityClassificationsId = Thrift.copyList(args.securityClassificationsId, [null]);
    }
  }
};
SecurityClassificationService_addSecurityClassificationDependencies_args.prototype = {};
SecurityClassificationService_addSecurityClassificationDependencies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.securityClassificationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2256 = 0;
        var _rtmp32260;
        this.securityClassificationsId = [];
        var _etype2259 = 0;
        _rtmp32260 = input.readListBegin();
        _etype2259 = _rtmp32260.etype;
        _size2256 = _rtmp32260.size;
        for (var _i2261 = 0; _i2261 < _size2256; ++_i2261)
        {
          var elem2262 = null;
          elem2262 = input.readString().value;
          this.securityClassificationsId.push(elem2262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationDependencies_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_addSecurityClassificationDependencies_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.securityClassificationId !== null && this.securityClassificationId !== undefined) {
    output.writeFieldBegin('securityClassificationId', Thrift.Type.STRING, 2);
    output.writeString(this.securityClassificationId);
    output.writeFieldEnd();
  }
  if (this.securityClassificationsId !== null && this.securityClassificationsId !== undefined) {
    output.writeFieldBegin('securityClassificationsId', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.securityClassificationsId.length);
    for (var iter2263 in this.securityClassificationsId)
    {
      if (this.securityClassificationsId.hasOwnProperty(iter2263))
      {
        iter2263 = this.securityClassificationsId[iter2263];
        output.writeString(iter2263);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationDependencies_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_addSecurityClassificationDependencies_result.prototype = {};
SecurityClassificationService_addSecurityClassificationDependencies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_addSecurityClassificationDependencies_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_addSecurityClassificationDependencies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationDependencies_args = function(args) {
  this.token = null;
  this.securityClassificationId = null;
  this.securityClassificationsId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.securityClassificationId !== undefined && args.securityClassificationId !== null) {
      this.securityClassificationId = args.securityClassificationId;
    }
    if (args.securityClassificationsId !== undefined && args.securityClassificationsId !== null) {
      this.securityClassificationsId = Thrift.copyList(args.securityClassificationsId, [null]);
    }
  }
};
SecurityClassificationService_removeSecurityClassificationDependencies_args.prototype = {};
SecurityClassificationService_removeSecurityClassificationDependencies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.securityClassificationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2264 = 0;
        var _rtmp32268;
        this.securityClassificationsId = [];
        var _etype2267 = 0;
        _rtmp32268 = input.readListBegin();
        _etype2267 = _rtmp32268.etype;
        _size2264 = _rtmp32268.size;
        for (var _i2269 = 0; _i2269 < _size2264; ++_i2269)
        {
          var elem2270 = null;
          elem2270 = input.readString().value;
          this.securityClassificationsId.push(elem2270);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationDependencies_args.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_removeSecurityClassificationDependencies_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.securityClassificationId !== null && this.securityClassificationId !== undefined) {
    output.writeFieldBegin('securityClassificationId', Thrift.Type.STRING, 2);
    output.writeString(this.securityClassificationId);
    output.writeFieldEnd();
  }
  if (this.securityClassificationsId !== null && this.securityClassificationsId !== undefined) {
    output.writeFieldBegin('securityClassificationsId', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.securityClassificationsId.length);
    for (var iter2271 in this.securityClassificationsId)
    {
      if (this.securityClassificationsId.hasOwnProperty(iter2271))
      {
        iter2271 = this.securityClassificationsId[iter2271];
        output.writeString(iter2271);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationDependencies_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SecurityClassificationService_removeSecurityClassificationDependencies_result.prototype = {};
SecurityClassificationService_removeSecurityClassificationDependencies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassificationService_removeSecurityClassificationDependencies_result.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassificationService_removeSecurityClassificationDependencies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassificationServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
SecurityClassificationServiceClient.prototype = {};
SecurityClassificationServiceClient.prototype.getAllSecurityClassification = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllSecurityClassification(token, filter);
    return this.recv_getAllSecurityClassification();
  } else {
    var postData = this.send_getAllSecurityClassification(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllSecurityClassification);
  }
};

SecurityClassificationServiceClient.prototype.send_getAllSecurityClassification = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllSecurityClassification', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new SecurityClassificationService_getAllSecurityClassification_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_getAllSecurityClassification = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_getAllSecurityClassification_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllSecurityClassification failed: unknown result';
};
SecurityClassificationServiceClient.prototype.createOrUpdateSecurityClassification = function(token, securityClassification, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateSecurityClassification(token, securityClassification);
    return this.recv_createOrUpdateSecurityClassification();
  } else {
    var postData = this.send_createOrUpdateSecurityClassification(token, securityClassification, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateSecurityClassification);
  }
};

SecurityClassificationServiceClient.prototype.send_createOrUpdateSecurityClassification = function(token, securityClassification, callback) {
  this.output.writeMessageBegin('createOrUpdateSecurityClassification', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    securityClassification: securityClassification
  };
  var args = new SecurityClassificationService_createOrUpdateSecurityClassification_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_createOrUpdateSecurityClassification = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_createOrUpdateSecurityClassification_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateSecurityClassification failed: unknown result';
};
SecurityClassificationServiceClient.prototype.removeSecurityClassification = function(token, securityClassificationId, callback) {
  if (callback === undefined) {
    this.send_removeSecurityClassification(token, securityClassificationId);
    return this.recv_removeSecurityClassification();
  } else {
    var postData = this.send_removeSecurityClassification(token, securityClassificationId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeSecurityClassification);
  }
};

SecurityClassificationServiceClient.prototype.send_removeSecurityClassification = function(token, securityClassificationId, callback) {
  this.output.writeMessageBegin('removeSecurityClassification', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    securityClassificationId: securityClassificationId
  };
  var args = new SecurityClassificationService_removeSecurityClassification_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_removeSecurityClassification = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_removeSecurityClassification_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeSecurityClassification failed: unknown result';
};
SecurityClassificationServiceClient.prototype.addSecurityClassificationsToUserGroups = function(token, securityClassificationIds, userOrGroups, callback) {
  if (callback === undefined) {
    this.send_addSecurityClassificationsToUserGroups(token, securityClassificationIds, userOrGroups);
    return this.recv_addSecurityClassificationsToUserGroups();
  } else {
    var postData = this.send_addSecurityClassificationsToUserGroups(token, securityClassificationIds, userOrGroups, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addSecurityClassificationsToUserGroups);
  }
};

SecurityClassificationServiceClient.prototype.send_addSecurityClassificationsToUserGroups = function(token, securityClassificationIds, userOrGroups, callback) {
  this.output.writeMessageBegin('addSecurityClassificationsToUserGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    securityClassificationIds: securityClassificationIds,
    userOrGroups: userOrGroups
  };
  var args = new SecurityClassificationService_addSecurityClassificationsToUserGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_addSecurityClassificationsToUserGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_addSecurityClassificationsToUserGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addSecurityClassificationsToUserGroups failed: unknown result';
};
SecurityClassificationServiceClient.prototype.removeSecurityClassificationsFromUserGroups = function(token, securityClassificationIds, userOrGroups, callback) {
  if (callback === undefined) {
    this.send_removeSecurityClassificationsFromUserGroups(token, securityClassificationIds, userOrGroups);
    return this.recv_removeSecurityClassificationsFromUserGroups();
  } else {
    var postData = this.send_removeSecurityClassificationsFromUserGroups(token, securityClassificationIds, userOrGroups, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeSecurityClassificationsFromUserGroups);
  }
};

SecurityClassificationServiceClient.prototype.send_removeSecurityClassificationsFromUserGroups = function(token, securityClassificationIds, userOrGroups, callback) {
  this.output.writeMessageBegin('removeSecurityClassificationsFromUserGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    securityClassificationIds: securityClassificationIds,
    userOrGroups: userOrGroups
  };
  var args = new SecurityClassificationService_removeSecurityClassificationsFromUserGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_removeSecurityClassificationsFromUserGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_removeSecurityClassificationsFromUserGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeSecurityClassificationsFromUserGroups failed: unknown result';
};
SecurityClassificationServiceClient.prototype.getAllSecurityClassificationsByUserOrGroup = function(token, type, userOrGroupId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllSecurityClassificationsByUserOrGroup(token, type, userOrGroupId, filter);
    return this.recv_getAllSecurityClassificationsByUserOrGroup();
  } else {
    var postData = this.send_getAllSecurityClassificationsByUserOrGroup(token, type, userOrGroupId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllSecurityClassificationsByUserOrGroup);
  }
};

SecurityClassificationServiceClient.prototype.send_getAllSecurityClassificationsByUserOrGroup = function(token, type, userOrGroupId, filter, callback) {
  this.output.writeMessageBegin('getAllSecurityClassificationsByUserOrGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    type: type,
    userOrGroupId: userOrGroupId,
    filter: filter
  };
  var args = new SecurityClassificationService_getAllSecurityClassificationsByUserOrGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_getAllSecurityClassificationsByUserOrGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_getAllSecurityClassificationsByUserOrGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllSecurityClassificationsByUserOrGroup failed: unknown result';
};
SecurityClassificationServiceClient.prototype.getAllSecurityClassificationByPatternId = function(token, patternId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllSecurityClassificationByPatternId(token, patternId, filter);
    return this.recv_getAllSecurityClassificationByPatternId();
  } else {
    var postData = this.send_getAllSecurityClassificationByPatternId(token, patternId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllSecurityClassificationByPatternId);
  }
};

SecurityClassificationServiceClient.prototype.send_getAllSecurityClassificationByPatternId = function(token, patternId, filter, callback) {
  this.output.writeMessageBegin('getAllSecurityClassificationByPatternId', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    patternId: patternId,
    filter: filter
  };
  var args = new SecurityClassificationService_getAllSecurityClassificationByPatternId_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_getAllSecurityClassificationByPatternId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_getAllSecurityClassificationByPatternId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllSecurityClassificationByPatternId failed: unknown result';
};
SecurityClassificationServiceClient.prototype.getAllSecurityClassificationByDocumentId = function(token, documentId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllSecurityClassificationByDocumentId(token, documentId, filter);
    return this.recv_getAllSecurityClassificationByDocumentId();
  } else {
    var postData = this.send_getAllSecurityClassificationByDocumentId(token, documentId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllSecurityClassificationByDocumentId);
  }
};

SecurityClassificationServiceClient.prototype.send_getAllSecurityClassificationByDocumentId = function(token, documentId, filter, callback) {
  this.output.writeMessageBegin('getAllSecurityClassificationByDocumentId', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    filter: filter
  };
  var args = new SecurityClassificationService_getAllSecurityClassificationByDocumentId_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_getAllSecurityClassificationByDocumentId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_getAllSecurityClassificationByDocumentId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllSecurityClassificationByDocumentId failed: unknown result';
};
SecurityClassificationServiceClient.prototype.addSecurityClassificationsToDocPattern = function(token, securityClassificationsId, docPatternId, callback) {
  if (callback === undefined) {
    this.send_addSecurityClassificationsToDocPattern(token, securityClassificationsId, docPatternId);
    return this.recv_addSecurityClassificationsToDocPattern();
  } else {
    var postData = this.send_addSecurityClassificationsToDocPattern(token, securityClassificationsId, docPatternId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addSecurityClassificationsToDocPattern);
  }
};

SecurityClassificationServiceClient.prototype.send_addSecurityClassificationsToDocPattern = function(token, securityClassificationsId, docPatternId, callback) {
  this.output.writeMessageBegin('addSecurityClassificationsToDocPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    securityClassificationsId: securityClassificationsId,
    docPatternId: docPatternId
  };
  var args = new SecurityClassificationService_addSecurityClassificationsToDocPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_addSecurityClassificationsToDocPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_addSecurityClassificationsToDocPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addSecurityClassificationsToDocPattern failed: unknown result';
};
SecurityClassificationServiceClient.prototype.removeSecurityClassificationsFromDocPattern = function(token, securityClassificationsId, docPatternId, callback) {
  if (callback === undefined) {
    this.send_removeSecurityClassificationsFromDocPattern(token, securityClassificationsId, docPatternId);
    return this.recv_removeSecurityClassificationsFromDocPattern();
  } else {
    var postData = this.send_removeSecurityClassificationsFromDocPattern(token, securityClassificationsId, docPatternId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeSecurityClassificationsFromDocPattern);
  }
};

SecurityClassificationServiceClient.prototype.send_removeSecurityClassificationsFromDocPattern = function(token, securityClassificationsId, docPatternId, callback) {
  this.output.writeMessageBegin('removeSecurityClassificationsFromDocPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    securityClassificationsId: securityClassificationsId,
    docPatternId: docPatternId
  };
  var args = new SecurityClassificationService_removeSecurityClassificationsFromDocPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_removeSecurityClassificationsFromDocPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_removeSecurityClassificationsFromDocPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeSecurityClassificationsFromDocPattern failed: unknown result';
};
SecurityClassificationServiceClient.prototype.addSecurityClassificationsToDocument = function(token, securityClassificationsId, documentId, registryId, callback) {
  if (callback === undefined) {
    this.send_addSecurityClassificationsToDocument(token, securityClassificationsId, documentId, registryId);
    return this.recv_addSecurityClassificationsToDocument();
  } else {
    var postData = this.send_addSecurityClassificationsToDocument(token, securityClassificationsId, documentId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addSecurityClassificationsToDocument);
  }
};

SecurityClassificationServiceClient.prototype.send_addSecurityClassificationsToDocument = function(token, securityClassificationsId, documentId, registryId, callback) {
  this.output.writeMessageBegin('addSecurityClassificationsToDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    securityClassificationsId: securityClassificationsId,
    documentId: documentId,
    registryId: registryId
  };
  var args = new SecurityClassificationService_addSecurityClassificationsToDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_addSecurityClassificationsToDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_addSecurityClassificationsToDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addSecurityClassificationsToDocument failed: unknown result';
};
SecurityClassificationServiceClient.prototype.changeSecurityClassificationsForDocument = function(token, addedSecurityClassificationsId, removedSecurityClassificationsId, documentId, registryId, callback) {
  if (callback === undefined) {
    this.send_changeSecurityClassificationsForDocument(token, addedSecurityClassificationsId, removedSecurityClassificationsId, documentId, registryId);
    return this.recv_changeSecurityClassificationsForDocument();
  } else {
    var postData = this.send_changeSecurityClassificationsForDocument(token, addedSecurityClassificationsId, removedSecurityClassificationsId, documentId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeSecurityClassificationsForDocument);
  }
};

SecurityClassificationServiceClient.prototype.send_changeSecurityClassificationsForDocument = function(token, addedSecurityClassificationsId, removedSecurityClassificationsId, documentId, registryId, callback) {
  this.output.writeMessageBegin('changeSecurityClassificationsForDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    addedSecurityClassificationsId: addedSecurityClassificationsId,
    removedSecurityClassificationsId: removedSecurityClassificationsId,
    documentId: documentId,
    registryId: registryId
  };
  var args = new SecurityClassificationService_changeSecurityClassificationsForDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_changeSecurityClassificationsForDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_changeSecurityClassificationsForDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeSecurityClassificationsForDocument failed: unknown result';
};
SecurityClassificationServiceClient.prototype.removeSecurityClassificationsFromDocument = function(token, securityClassificationsId, documentId, registryId, callback) {
  if (callback === undefined) {
    this.send_removeSecurityClassificationsFromDocument(token, securityClassificationsId, documentId, registryId);
    return this.recv_removeSecurityClassificationsFromDocument();
  } else {
    var postData = this.send_removeSecurityClassificationsFromDocument(token, securityClassificationsId, documentId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeSecurityClassificationsFromDocument);
  }
};

SecurityClassificationServiceClient.prototype.send_removeSecurityClassificationsFromDocument = function(token, securityClassificationsId, documentId, registryId, callback) {
  this.output.writeMessageBegin('removeSecurityClassificationsFromDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    securityClassificationsId: securityClassificationsId,
    documentId: documentId,
    registryId: registryId
  };
  var args = new SecurityClassificationService_removeSecurityClassificationsFromDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_removeSecurityClassificationsFromDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_removeSecurityClassificationsFromDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeSecurityClassificationsFromDocument failed: unknown result';
};
SecurityClassificationServiceClient.prototype.getAllSecurityClassificationDependencies = function(token, securityClassificationId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllSecurityClassificationDependencies(token, securityClassificationId, filter);
    return this.recv_getAllSecurityClassificationDependencies();
  } else {
    var postData = this.send_getAllSecurityClassificationDependencies(token, securityClassificationId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllSecurityClassificationDependencies);
  }
};

SecurityClassificationServiceClient.prototype.send_getAllSecurityClassificationDependencies = function(token, securityClassificationId, filter, callback) {
  this.output.writeMessageBegin('getAllSecurityClassificationDependencies', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    securityClassificationId: securityClassificationId,
    filter: filter
  };
  var args = new SecurityClassificationService_getAllSecurityClassificationDependencies_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_getAllSecurityClassificationDependencies = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_getAllSecurityClassificationDependencies_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllSecurityClassificationDependencies failed: unknown result';
};
SecurityClassificationServiceClient.prototype.addSecurityClassificationDependencies = function(token, securityClassificationId, securityClassificationsId, callback) {
  if (callback === undefined) {
    this.send_addSecurityClassificationDependencies(token, securityClassificationId, securityClassificationsId);
    return this.recv_addSecurityClassificationDependencies();
  } else {
    var postData = this.send_addSecurityClassificationDependencies(token, securityClassificationId, securityClassificationsId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addSecurityClassificationDependencies);
  }
};

SecurityClassificationServiceClient.prototype.send_addSecurityClassificationDependencies = function(token, securityClassificationId, securityClassificationsId, callback) {
  this.output.writeMessageBegin('addSecurityClassificationDependencies', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    securityClassificationId: securityClassificationId,
    securityClassificationsId: securityClassificationsId
  };
  var args = new SecurityClassificationService_addSecurityClassificationDependencies_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_addSecurityClassificationDependencies = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_addSecurityClassificationDependencies_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addSecurityClassificationDependencies failed: unknown result';
};
SecurityClassificationServiceClient.prototype.removeSecurityClassificationDependencies = function(token, securityClassificationId, securityClassificationsId, callback) {
  if (callback === undefined) {
    this.send_removeSecurityClassificationDependencies(token, securityClassificationId, securityClassificationsId);
    return this.recv_removeSecurityClassificationDependencies();
  } else {
    var postData = this.send_removeSecurityClassificationDependencies(token, securityClassificationId, securityClassificationsId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeSecurityClassificationDependencies);
  }
};

SecurityClassificationServiceClient.prototype.send_removeSecurityClassificationDependencies = function(token, securityClassificationId, securityClassificationsId, callback) {
  this.output.writeMessageBegin('removeSecurityClassificationDependencies', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    securityClassificationId: securityClassificationId,
    securityClassificationsId: securityClassificationsId
  };
  var args = new SecurityClassificationService_removeSecurityClassificationDependencies_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SecurityClassificationServiceClient.prototype.recv_removeSecurityClassificationDependencies = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SecurityClassificationService_removeSecurityClassificationDependencies_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeSecurityClassificationDependencies failed: unknown result';
};
