//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


UserOrGroupType = {
  'USER' : 0,
  'GROUP' : 1
};
GroupSelector = {
  'ALL' : 0,
  'MAX_FREE' : 1,
  'LAST_EXEC' : 2
};
UserType = {
  'CHIEF' : 0,
  'DEPUTY' : 1,
  'EMPLOYEE' : 2,
  'TECHNICAL' : 3
};
PatternRoles = {
  'VIEW' : 0,
  'CREATE' : 1,
  'INBOX' : 2,
  'OUTBOX' : 3,
  'ADMIN' : 4
};
DocumentIconType = {
  'ICON_DRAFT' : 0,
  'ICON_COMPLETE_CANCEL' : 1,
  'ICON_COMPLETE_EDITED' : 2,
  'ICON_COMPLETE' : 3,
  'ICON_IN_WORK_NO_MY_CANCEL' : 4,
  'ICON_IN_WORK_NO_MY_EDITED' : 5,
  'ICON_IN_WORK_NO_MY' : 6,
  'ICON_IN_WORK_EDITED' : 7,
  'ICON_IN_WORK_CANCELED' : 8,
  'ICON_IN_WORK' : 9,
  'ICON_IN_WORK_WARNING_EDITED' : 10,
  'ICON_IN_WORK_WARNING_CANCELED' : 11,
  'ICON_IN_WORK_WARNING' : 12,
  'ICON_IN_WORK_ERROR_EDITED' : 13,
  'ICON_IN_WORK_ERROR_CANCELED' : 14,
  'ICON_IN_WORK_ERROR' : 15,
  'ICON_ARCHIVE' : 16
};
AggregationRequiredType = {
  'DOCUMENT' : 0,
  'DOC_COMMENT' : 1,
  'DOC_RELATION' : 2,
  'CONTENT_TAB' : 3,
  'SC' : 4,
  'DEADLINE_HISTORY' : 5,
  'ATTACHMENT' : 6,
  'REPORT_TEMPLATE' : 7,
  'DOC_PERMISSION' : 8,
  'REGISTRY_RULE' : 9,
  'REGISTRY_USERS' : 10,
  'REGISTRY_ACCOUNTS' : 11,
  'MATCHING_USER_GROUP' : 12
};
DocRelationType = {
  'PARENT' : 0,
  'CHILD' : 1,
  'OTHER' : 2
};
AttachmentType = {
  'ORIGINAL' : 0,
  'PDF' : 1,
  'PNG' : 2
};
AttachmentStatus = {
  'CREATED' : 0,
  'LOADED' : 1,
  'PUBLISHED' : 2,
  'REBUILD' : 3,
  'PROCESSED' : 4,
  'FAIL' : 5,
  'PROCESSING' : 6
};
FileType = {
  'PICTURE' : 0,
  'PDF' : 1,
  'OFFICE' : 2,
  'OTHER' : 3
};
AttachmentAccessMode = {
  'NOPREVIEW' : 0,
  'READONLY' : 1,
  'REVIEW' : 2,
  'EDIT' : 3
};
AttachmentEditMode = {
  'SINGLE' : 0,
  'MULTIPLE' : 1,
  'PUBLISHED' : 2
};
ChangeType = {
  'ADD' : 0,
  'REPLACE' : 1
};
DocPatternStageStatus = {
  'CREATED' : 0,
  'IN_PROGRESS' : 1,
  'CLOSED' : 2,
  'ARCHIVE' : 3
};
DocPatternStageSubStatus = {
  'DRAFT' : 0,
  'PROJECT' : 1,
  'CONFIRM' : 2,
  'SIGN' : 3,
  'IN_WORK' : 4,
  'IN_EXECUTION' : 5,
  'CLOSED' : 6,
  'ACTING' : 7,
  'CANCELED' : 8,
  'ARCHIVE' : 9,
  'REGISTRATION' : 10,
  'ON_REVISION' : 11,
  'EDITED' : 12
};
DocPatternStageExecPriority = {
  'PARALLEL' : 0,
  'SERIES' : 1
};
DocPatternStageActionType = {
  'VIEW' : 0,
  'CONFIRM' : 1,
  'SIGN' : 2,
  'PERFORM' : 3
};
DecisionType = {
  'NULL' : 0,
  'YES' : 1,
  'NO' : 2,
  'OTHER_TIME' : 3
};
ContentItemShowType = {
  'SHORT' : 0,
  'FULL' : 1,
  'ALL' : 2
};
ContentItemShowPlace = {
  'INFO' : 0,
  'TAB' : 1,
  'CONTENT' : 2
};
ExecutionReassignType = {
  'ANY' : 0,
  'CONTROL' : 1,
  'ALL' : 2,
  'ALL_EQUAL' : 3,
  'TRANSFER' : 4,
  'GROUP' : 5
};
DocumentExecutionStatus = {
  'OPEN' : 0,
  'CLOSED' : 1,
  'CLOSED_ADDITIONAL' : 2,
  'FORCED_CLOSURE' : 3,
  'AUTO_CLOSED' : 4,
  'REVOKED' : 5,
  'REMOVED' : 6,
  'NONE' : 7,
  'DISABLED' : 8
};
DocumentExecutionTypeLink = {
  'ALL' : 0,
  'PARENT' : 1,
  'CHILD' : 2
};
DocumentExecutionOwnerType = {
  'AUTHOR' : 0,
  'RESPONSIBLE' : 1,
  'EXECUTOR' : 2,
  'VIEWER' : 3,
  'SPECTATOR' : 4,
  'SYSTEM' : 5,
  'ADDITIONAL_CONFIRMER' : 6,
  'PERIODICAL_DISABLE' : 7
};
ModifyEnable = {
  'ENABLED' : 0,
  'PARTIAL' : 1,
  'DISABLED' : 2
};
DispatchState = {
  'INBOX' : 0,
  'OUTBOX' : 1
};
AvailablePatternStageType = {
  'INTERNAL' : 0,
  'AUTO' : 1,
  'EXTERNAL' : 2,
  'SUB_PATTERN' : 3,
  'REPORT' : 4
};
StageParamType = {
  'STRING' : 0,
  'PATTERN' : 1,
  'REPORT' : 2,
  'COMBOBOX' : 3,
  'CHECKBOX' : 4,
  'CODE' : 5
};
RuleSelector = {
  'EDIT' : 0,
  'DECISION' : 1,
  'DOC_RULE' : 2
};
DocPatternStageRequirement = {
  'OPTIONAL' : 0,
  'REQUIRED' : 1,
  'PROHIBITED' : 2
};
ExecutionType = {
  'ANY_IMMEDIATELY' : 0,
  'ANY_WAIT_FOR_EXECUTORS' : 1,
  'ALL_EXECUTORS' : 2
};
AttachmentAction = {
  'PUBLISH_DRAFT' : 0,
  'IGNORE_DRAFT' : 1,
  'DELETE_DRAFT' : 2
};
CalendarSharingMode = {
  'READ_ONLY' : 0,
  'READ_WRITE' : 1
};
MaterialResourceType = {
  'PREMISES' : 0,
  'EQUIPMENT' : 1
};
SearchType = {
  'S_LIKE' : 0,
  'S_LIKE_SEMANTIC' : 1,
  'S_ALL' : 2,
  'S_ALL_SEMANTIC' : 3,
  'S_ANY' : 4,
  'S_ANY_SEMANTIC' : 5
};
DeviceType = {
  'ANDROID' : 0,
  'IOS' : 1,
  'WEB' : 2
};
FileStorageType = {
  'PRIMARY' : 0,
  'ARCHIVE' : 1
};
FilterReassign = {
  'REASSIGN_TO_ME' : 0,
  'MY_REASSIGN' : 1,
  'CONTROL' : 2,
  'ALL_MY_DOCUMENTS' : 3,
  'MY_DOCUMENTS_IN_WORK' : 4,
  'DRAFTS' : 5,
  'MY_COMPLETED_DOCUMENTS' : 6,
  'MY_RESPONSIBLE' : 7,
  'COMPLETED_DOCUMENTS' : 8,
  'UNCOMPLETED_DOCUMENTS' : 9
};
NotificationType = {
  'MEETING_CREATE' : 0,
  'MEETING_UPDATE' : 1,
  'MEETING_CANCEL' : 2,
  'MEETING_SUGGESTION_OTHER_TIME' : 3,
  'DOCUMENT_MOVE_TO_NEXT_STAGE' : 4,
  'DOCUMENT_REASSIGN' : 5,
  'DOCUMENT_REASSIGN_WITH_CONTROL' : 6,
  'REASSIGN_DOCUMENT_EXECUTION_CARD_CLOSED' : 7,
  'REASSIGN_DOCUMENT_EXECUTION_CARD_REVOKED' : 8,
  'DOCUMENT_EXECUTION_CARD_CLOSED' : 9,
  'DOCUMENT_ON_CONTROL_RETURNED' : 10,
  'DOCUMENT_EXPIRED' : 11,
  'COMING_DOCUMENT_EXECUTION_DEADLINE' : 12,
  'DOCUMENT_EXECUTION_EXPIRED' : 13,
  'DOCUMENT_EXECUTION_DELETED' : 14,
  'RESET_PASSWORD' : 15,
  'SET_PASSWORD_FOR_NEW_USER' : 16,
  'DOCUMENT_REGISTERED' : 17,
  'DOCUMENT_EXECUTION_CARD_AUTO_CLOSED' : 18,
  'DOCUMENT_DECISION' : 19,
  'DOCUMENT_FAMILIARIZATION' : 20,
  'DOCUMENT_ADDITIONAL_DECISION' : 21,
  'DOCUMENT_ADD_ADDITIONAL_CONFIRMER' : 22,
  'DOCUMENT_ATTACHMENT_LOADED' : 23
};
NotificationStatus = {
  'CREATED' : 0,
  'IN_WORK' : 1,
  'SUCCESS' : 2,
  'FAIL' : 3,
  'IN_BLACKLIST' : 4
};
AttributeParamType = {
  'DOCUMENT' : 0,
  'DOC_PAT_STAGE' : 1,
  'DOCUMENT_EXECUTION' : 2,
  'MEETING' : 3,
  'MEETING_PARTICIPANT' : 4,
  'ATTACHMENT' : 5,
  'CLIENT' : 6,
  'STRING' : 7,
  'LONG' : 8
};
RecipientTypeEnum = {
  'MEETING_AUTHOR' : 0,
  'MEETING_PARTICIPANT' : 1,
  'DOCUMENT_AUTHOR' : 2,
  'DOCUMENT_PARTICIPANT' : 3,
  'DOCUMENT_RESPONSIBLE' : 4,
  'DOCUMENT_ASSIGNMENT' : 5,
  'PASSWORD_RECIPIENT' : 6,
  'USER_DELEGATE' : 7,
  'USER_IN_WHITE_LIST' : 8,
  'UNSOLVED' : 9
};
HistoryLevel = {
  'INFO' : 0,
  'WARNING' : 1,
  'ERROR' : 2
};
AvailablePattarnStageForm = {
  'CIRCLE' : 0,
  'RECTANGLE' : 1,
  'DIAMOND' : 2,
  'TRIANGLERIGHT' : 3,
  'TRIANGLEDOWN' : 4,
  'TRIANGLELEFT' : 5,
  'TRIANGLEUP' : 6,
  'PENTAGON' : 7,
  'HEXAGON' : 8,
  'RING' : 9,
  'NOTALLOWED' : 10,
  'ACTOR' : 11,
  'BPMMTASKMESSAGE' : 12,
  'BPMMEVENTTIMER' : 13,
  'BPMMEVENTCONDITIONAL' : 14,
  'BPMMTASKSCRIPT' : 15
};
ReportTemplateType = {
  'COMMON' : 0,
  'PATTERN' : 1
};
ReportType = {
  'XML' : 0,
  'PDF' : 1,
  'XLS' : 2,
  'DOC' : 3
};
TodayTaskType = {
  'OPEN' : 0,
  'CLOSED' : 1,
  'EVENT' : 2,
  'MEETING' : 3
};
AccountDefineConf = {
  'GROUP_ALL' : 0,
  'DECISION_DICT' : 1,
  'A4_TEMPLATE_DICT' : 2
};
ExecutorActionType = {
  'ADD' : 0,
  'DELETE' : 1
};
NotificationTransportDestinationType = {
  'NONE' : 0,
  'MOBILE' : 1,
  'WEB' : 2
};
KeyState = {
  'LOADED' : 0,
  'CONFIRM' : 1,
  'PROHIBITED' : 2
};
DocumentExecutionStatisticType = {
  'EXPIRED' : 0,
  'DEADLINE_AFTER_DAY' : 1,
  'NOT_SOON_DEADLINE' : 2
};
CommentType = {
  'DECISION' : 0,
  'COMMENT' : 1,
  'LINK' : 2,
  'CHANGE_SUB_STATUS' : 3
};
ScriptDictionaryType = {
  'DRL' : 0
};
UserOrGroup = function(args) {
  this.type = null;
  this.userOrGroupId = null;
  this.nameGroup = null;
  this.descriptionGroup = null;
  this.userFirstName = null;
  this.userLastName = null;
  this.userMiddleName = null;
  this.attrs = null;
  this.deleteDate = null;
  this.avatarUrl = null;
  this.groupSelector = null;
  this.position = null;
  this.userCount = null;
  this.email = null;
  this.workPhone = null;
  this.haveAccess = null;
  this.scMask = null;
  this.employeeNumber = null;
  this.department = null;
  this.fixed = null;
  this.endlessPassword = null;
  this.needChangePassword = null;
  this.accountIdGroup = null;
  this.userType = null;
  this.id = null;
  this.ldapId = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.userOrGroupId !== undefined && args.userOrGroupId !== null) {
      this.userOrGroupId = args.userOrGroupId;
    }
    if (args.nameGroup !== undefined && args.nameGroup !== null) {
      this.nameGroup = args.nameGroup;
    }
    if (args.descriptionGroup !== undefined && args.descriptionGroup !== null) {
      this.descriptionGroup = args.descriptionGroup;
    }
    if (args.userFirstName !== undefined && args.userFirstName !== null) {
      this.userFirstName = args.userFirstName;
    }
    if (args.userLastName !== undefined && args.userLastName !== null) {
      this.userLastName = args.userLastName;
    }
    if (args.userMiddleName !== undefined && args.userMiddleName !== null) {
      this.userMiddleName = args.userMiddleName;
    }
    if (args.attrs !== undefined && args.attrs !== null) {
      this.attrs = Thrift.copyMap(args.attrs, [null]);
    }
    if (args.deleteDate !== undefined && args.deleteDate !== null) {
      this.deleteDate = args.deleteDate;
    }
    if (args.avatarUrl !== undefined && args.avatarUrl !== null) {
      this.avatarUrl = args.avatarUrl;
    }
    if (args.groupSelector !== undefined && args.groupSelector !== null) {
      this.groupSelector = args.groupSelector;
    }
    if (args.position !== undefined && args.position !== null) {
      this.position = args.position;
    }
    if (args.userCount !== undefined && args.userCount !== null) {
      this.userCount = args.userCount;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.workPhone !== undefined && args.workPhone !== null) {
      this.workPhone = args.workPhone;
    }
    if (args.haveAccess !== undefined && args.haveAccess !== null) {
      this.haveAccess = args.haveAccess;
    }
    if (args.scMask !== undefined && args.scMask !== null) {
      this.scMask = args.scMask;
    }
    if (args.employeeNumber !== undefined && args.employeeNumber !== null) {
      this.employeeNumber = args.employeeNumber;
    }
    if (args.department !== undefined && args.department !== null) {
      this.department = new Department(args.department);
    }
    if (args.fixed !== undefined && args.fixed !== null) {
      this.fixed = args.fixed;
    }
    if (args.endlessPassword !== undefined && args.endlessPassword !== null) {
      this.endlessPassword = args.endlessPassword;
    }
    if (args.needChangePassword !== undefined && args.needChangePassword !== null) {
      this.needChangePassword = args.needChangePassword;
    }
    if (args.accountIdGroup !== undefined && args.accountIdGroup !== null) {
      this.accountIdGroup = args.accountIdGroup;
    }
    if (args.userType !== undefined && args.userType !== null) {
      this.userType = args.userType;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.ldapId !== undefined && args.ldapId !== null) {
      this.ldapId = args.ldapId;
    }
  }
};
UserOrGroup.prototype = {};
UserOrGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userOrGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.nameGroup = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionGroup = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.userFirstName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.userLastName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.userMiddleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.attrs = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.attrs[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.deleteDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.avatarUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.groupSelector = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.position = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.userCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.workPhone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.haveAccess = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.scMask = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.employeeNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.department = new Department();
        this.department.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.fixed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.endlessPassword = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.needChangePassword = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.accountIdGroup = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.userType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.ldapId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserOrGroup.prototype.write = function(output) {
  output.writeStructBegin('UserOrGroup');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.userOrGroupId !== null && this.userOrGroupId !== undefined) {
    output.writeFieldBegin('userOrGroupId', Thrift.Type.STRING, 2);
    output.writeString(this.userOrGroupId);
    output.writeFieldEnd();
  }
  if (this.nameGroup !== null && this.nameGroup !== undefined) {
    output.writeFieldBegin('nameGroup', Thrift.Type.STRING, 3);
    output.writeString(this.nameGroup);
    output.writeFieldEnd();
  }
  if (this.descriptionGroup !== null && this.descriptionGroup !== undefined) {
    output.writeFieldBegin('descriptionGroup', Thrift.Type.STRING, 4);
    output.writeString(this.descriptionGroup);
    output.writeFieldEnd();
  }
  if (this.userFirstName !== null && this.userFirstName !== undefined) {
    output.writeFieldBegin('userFirstName', Thrift.Type.STRING, 5);
    output.writeString(this.userFirstName);
    output.writeFieldEnd();
  }
  if (this.userLastName !== null && this.userLastName !== undefined) {
    output.writeFieldBegin('userLastName', Thrift.Type.STRING, 6);
    output.writeString(this.userLastName);
    output.writeFieldEnd();
  }
  if (this.userMiddleName !== null && this.userMiddleName !== undefined) {
    output.writeFieldBegin('userMiddleName', Thrift.Type.STRING, 7);
    output.writeString(this.userMiddleName);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attrs));
    for (var kiter8 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(kiter8))
      {
        var viter9 = this.attrs[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.deleteDate !== null && this.deleteDate !== undefined) {
    output.writeFieldBegin('deleteDate', Thrift.Type.I64, 9);
    output.writeI64(this.deleteDate);
    output.writeFieldEnd();
  }
  if (this.avatarUrl !== null && this.avatarUrl !== undefined) {
    output.writeFieldBegin('avatarUrl', Thrift.Type.STRING, 10);
    output.writeString(this.avatarUrl);
    output.writeFieldEnd();
  }
  if (this.groupSelector !== null && this.groupSelector !== undefined) {
    output.writeFieldBegin('groupSelector', Thrift.Type.I32, 11);
    output.writeI32(this.groupSelector);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.STRING, 12);
    output.writeString(this.position);
    output.writeFieldEnd();
  }
  if (this.userCount !== null && this.userCount !== undefined) {
    output.writeFieldBegin('userCount', Thrift.Type.I32, 13);
    output.writeI32(this.userCount);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 14);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.workPhone !== null && this.workPhone !== undefined) {
    output.writeFieldBegin('workPhone', Thrift.Type.STRING, 15);
    output.writeString(this.workPhone);
    output.writeFieldEnd();
  }
  if (this.haveAccess !== null && this.haveAccess !== undefined) {
    output.writeFieldBegin('haveAccess', Thrift.Type.BOOL, 16);
    output.writeBool(this.haveAccess);
    output.writeFieldEnd();
  }
  if (this.scMask !== null && this.scMask !== undefined) {
    output.writeFieldBegin('scMask', Thrift.Type.STRING, 17);
    output.writeString(this.scMask);
    output.writeFieldEnd();
  }
  if (this.employeeNumber !== null && this.employeeNumber !== undefined) {
    output.writeFieldBegin('employeeNumber', Thrift.Type.STRING, 18);
    output.writeString(this.employeeNumber);
    output.writeFieldEnd();
  }
  if (this.department !== null && this.department !== undefined) {
    output.writeFieldBegin('department', Thrift.Type.STRUCT, 19);
    this.department.write(output);
    output.writeFieldEnd();
  }
  if (this.fixed !== null && this.fixed !== undefined) {
    output.writeFieldBegin('fixed', Thrift.Type.BOOL, 20);
    output.writeBool(this.fixed);
    output.writeFieldEnd();
  }
  if (this.endlessPassword !== null && this.endlessPassword !== undefined) {
    output.writeFieldBegin('endlessPassword', Thrift.Type.BOOL, 21);
    output.writeBool(this.endlessPassword);
    output.writeFieldEnd();
  }
  if (this.needChangePassword !== null && this.needChangePassword !== undefined) {
    output.writeFieldBegin('needChangePassword', Thrift.Type.BOOL, 22);
    output.writeBool(this.needChangePassword);
    output.writeFieldEnd();
  }
  if (this.accountIdGroup !== null && this.accountIdGroup !== undefined) {
    output.writeFieldBegin('accountIdGroup', Thrift.Type.STRING, 23);
    output.writeString(this.accountIdGroup);
    output.writeFieldEnd();
  }
  if (this.userType !== null && this.userType !== undefined) {
    output.writeFieldBegin('userType', Thrift.Type.I32, 24);
    output.writeI32(this.userType);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 25);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.ldapId !== null && this.ldapId !== undefined) {
    output.writeFieldBegin('ldapId', Thrift.Type.STRING, 26);
    output.writeString(this.ldapId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PatternUserGroup = function(args) {
  this.id = null;
  this.userOrGroup = null;
  this.roles = null;
  this.key = null;
  this.fixed = null;
  this.name = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.userOrGroup !== undefined && args.userOrGroup !== null) {
      this.userOrGroup = new UserOrGroup(args.userOrGroup);
    }
    if (args.roles !== undefined && args.roles !== null) {
      this.roles = Thrift.copyList(args.roles, [null]);
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.fixed !== undefined && args.fixed !== null) {
      this.fixed = args.fixed;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
PatternUserGroup.prototype = {};
PatternUserGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userOrGroup = new UserOrGroup();
        this.userOrGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size10 = 0;
        var _rtmp314;
        this.roles = [];
        var _etype13 = 0;
        _rtmp314 = input.readSetBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readString().value;
          this.roles.push(elem16);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.fixed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PatternUserGroup.prototype.write = function(output) {
  output.writeStructBegin('PatternUserGroup');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.userOrGroup !== null && this.userOrGroup !== undefined) {
    output.writeFieldBegin('userOrGroup', Thrift.Type.STRUCT, 2);
    this.userOrGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.roles !== null && this.roles !== undefined) {
    output.writeFieldBegin('roles', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.roles.length);
    for (var iter17 in this.roles)
    {
      if (this.roles.hasOwnProperty(iter17))
      {
        iter17 = this.roles[iter17];
        output.writeString(iter17);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 4);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.fixed !== null && this.fixed !== undefined) {
    output.writeFieldBegin('fixed', Thrift.Type.BOOL, 5);
    output.writeBool(this.fixed);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 6);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PatternVariable = function(args) {
  this.id = null;
  this.key = null;
  this.defValue = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.defValue !== undefined && args.defValue !== null) {
      this.defValue = args.defValue;
    }
  }
};
PatternVariable.prototype = {};
PatternVariable.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.defValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PatternVariable.prototype.write = function(output) {
  output.writeStructBegin('PatternVariable');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.defValue !== null && this.defValue !== undefined) {
    output.writeFieldBegin('defValue', Thrift.Type.STRING, 3);
    output.writeString(this.defValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserExt = function(args) {
  this.userOrGroup = null;
  this.login = null;
  this.hasPublicKey = null;
  if (args) {
    if (args.userOrGroup !== undefined && args.userOrGroup !== null) {
      this.userOrGroup = new UserOrGroup(args.userOrGroup);
    }
    if (args.login !== undefined && args.login !== null) {
      this.login = args.login;
    }
    if (args.hasPublicKey !== undefined && args.hasPublicKey !== null) {
      this.hasPublicKey = args.hasPublicKey;
    }
  }
};
UserExt.prototype = {};
UserExt.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userOrGroup = new UserOrGroup();
        this.userOrGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.hasPublicKey = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserExt.prototype.write = function(output) {
  output.writeStructBegin('UserExt');
  if (this.userOrGroup !== null && this.userOrGroup !== undefined) {
    output.writeFieldBegin('userOrGroup', Thrift.Type.STRUCT, 1);
    this.userOrGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 2);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.hasPublicKey !== null && this.hasPublicKey !== undefined) {
    output.writeFieldBegin('hasPublicKey', Thrift.Type.BOOL, 3);
    output.writeBool(this.hasPublicKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserAcc = function(args) {
  this.userOrGroup = null;
  this.acounts = null;
  if (args) {
    if (args.userOrGroup !== undefined && args.userOrGroup !== null) {
      this.userOrGroup = new UserOrGroup(args.userOrGroup);
    }
    if (args.acounts !== undefined && args.acounts !== null) {
      this.acounts = Thrift.copyList(args.acounts, [null]);
    }
  }
};
UserAcc.prototype = {};
UserAcc.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userOrGroup = new UserOrGroup();
        this.userOrGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.acounts = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new Account();
          elem24.read(input);
          this.acounts.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAcc.prototype.write = function(output) {
  output.writeStructBegin('UserAcc');
  if (this.userOrGroup !== null && this.userOrGroup !== undefined) {
    output.writeFieldBegin('userOrGroup', Thrift.Type.STRUCT, 1);
    this.userOrGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.acounts !== null && this.acounts !== undefined) {
    output.writeFieldBegin('acounts', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.acounts.length);
    for (var iter25 in this.acounts)
    {
      if (this.acounts.hasOwnProperty(iter25))
      {
        iter25 = this.acounts[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthSession = function(args) {
  this.id = null;
  this.expireDate = null;
  this.createDate = null;
  this.updateDate = null;
  this.ip1 = null;
  this.ip2 = null;
  this.clientInfo = null;
  this.roles = null;
  this.delegateClientInfo = null;
  this.needChangePassword = null;
  this.token = null;
  this.langCode = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.expireDate !== undefined && args.expireDate !== null) {
      this.expireDate = args.expireDate;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.updateDate !== undefined && args.updateDate !== null) {
      this.updateDate = args.updateDate;
    }
    if (args.ip1 !== undefined && args.ip1 !== null) {
      this.ip1 = args.ip1;
    }
    if (args.ip2 !== undefined && args.ip2 !== null) {
      this.ip2 = args.ip2;
    }
    if (args.clientInfo !== undefined && args.clientInfo !== null) {
      this.clientInfo = new UserOrGroup(args.clientInfo);
    }
    if (args.roles !== undefined && args.roles !== null) {
      this.roles = Thrift.copyList(args.roles, [null]);
    }
    if (args.delegateClientInfo !== undefined && args.delegateClientInfo !== null) {
      this.delegateClientInfo = new UserOrGroup(args.delegateClientInfo);
    }
    if (args.needChangePassword !== undefined && args.needChangePassword !== null) {
      this.needChangePassword = args.needChangePassword;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.langCode !== undefined && args.langCode !== null) {
      this.langCode = args.langCode;
    }
  }
};
AuthSession.prototype = {};
AuthSession.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expireDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.updateDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ip1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.ip2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientInfo = new UserOrGroup();
        this.clientInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        var _size26 = 0;
        var _rtmp330;
        this.roles = [];
        var _etype29 = 0;
        _rtmp330 = input.readSetBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString().value;
          this.roles.push(elem32);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.delegateClientInfo = new UserOrGroup();
        this.delegateClientInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.needChangePassword = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.langCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthSession.prototype.write = function(output) {
  output.writeStructBegin('AuthSession');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.expireDate !== null && this.expireDate !== undefined) {
    output.writeFieldBegin('expireDate', Thrift.Type.I64, 2);
    output.writeI64(this.expireDate);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 3);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.updateDate !== null && this.updateDate !== undefined) {
    output.writeFieldBegin('updateDate', Thrift.Type.I64, 4);
    output.writeI64(this.updateDate);
    output.writeFieldEnd();
  }
  if (this.ip1 !== null && this.ip1 !== undefined) {
    output.writeFieldBegin('ip1', Thrift.Type.STRING, 5);
    output.writeString(this.ip1);
    output.writeFieldEnd();
  }
  if (this.ip2 !== null && this.ip2 !== undefined) {
    output.writeFieldBegin('ip2', Thrift.Type.STRING, 6);
    output.writeString(this.ip2);
    output.writeFieldEnd();
  }
  if (this.clientInfo !== null && this.clientInfo !== undefined) {
    output.writeFieldBegin('clientInfo', Thrift.Type.STRUCT, 7);
    this.clientInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.roles !== null && this.roles !== undefined) {
    output.writeFieldBegin('roles', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.STRING, this.roles.length);
    for (var iter33 in this.roles)
    {
      if (this.roles.hasOwnProperty(iter33))
      {
        iter33 = this.roles[iter33];
        output.writeString(iter33);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.delegateClientInfo !== null && this.delegateClientInfo !== undefined) {
    output.writeFieldBegin('delegateClientInfo', Thrift.Type.STRUCT, 9);
    this.delegateClientInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.needChangePassword !== null && this.needChangePassword !== undefined) {
    output.writeFieldBegin('needChangePassword', Thrift.Type.BOOL, 10);
    output.writeBool(this.needChangePassword);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 11);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.langCode !== null && this.langCode !== undefined) {
    output.writeFieldBegin('langCode', Thrift.Type.STRING, 12);
    output.writeString(this.langCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Document = function(args) {
  this.id = null;
  this.createDate = null;
  this.creator = null;
  this.originalPatternId = null;
  this.filledDocumentPattern = null;
  this.stage = null;
  this.content = null;
  this.documentDeadlineDate = null;
  this.deleteDate = null;
  this.numberDocument = null;
  this.nameDocument = null;
  this.chatId = null;
  this.status = null;
  this.subStatus = null;
  this.hasExternalLink = null;
  this.reassignedDateTime = null;
  this.cardDeadlineDate = null;
  this.actionMap = null;
  this.ownerType = null;
  this.iteration = null;
  this.systemNumber = null;
  this.additionConfirmer = null;
  this.viewed = null;
  this.hasDigitalSign = null;
  this.currentExecutors = null;
  this.otherUsers = null;
  this.scChangeDate = null;
  this.registrationDate = null;
  this.sender = null;
  this.recipient = null;
  this.originalUserId = null;
  this.documentParticipantGroup = null;
  this.controlForDocument = null;
  this.controlForExecutor = null;
  this.tags = null;
  this.account = null;
  this.moveError = null;
  this.encripted = null;
  this.icon = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = new UserOrGroup(args.creator);
    }
    if (args.originalPatternId !== undefined && args.originalPatternId !== null) {
      this.originalPatternId = args.originalPatternId;
    }
    if (args.filledDocumentPattern !== undefined && args.filledDocumentPattern !== null) {
      this.filledDocumentPattern = new FreezeDocumentPattern(args.filledDocumentPattern);
    }
    if (args.stage !== undefined && args.stage !== null) {
      this.stage = new DocumentPatternStage(args.stage);
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = Thrift.copyList(args.content, [null]);
    }
    if (args.documentDeadlineDate !== undefined && args.documentDeadlineDate !== null) {
      this.documentDeadlineDate = args.documentDeadlineDate;
    }
    if (args.deleteDate !== undefined && args.deleteDate !== null) {
      this.deleteDate = args.deleteDate;
    }
    if (args.numberDocument !== undefined && args.numberDocument !== null) {
      this.numberDocument = args.numberDocument;
    }
    if (args.nameDocument !== undefined && args.nameDocument !== null) {
      this.nameDocument = args.nameDocument;
    }
    if (args.chatId !== undefined && args.chatId !== null) {
      this.chatId = args.chatId;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.subStatus !== undefined && args.subStatus !== null) {
      this.subStatus = args.subStatus;
    }
    if (args.hasExternalLink !== undefined && args.hasExternalLink !== null) {
      this.hasExternalLink = args.hasExternalLink;
    }
    if (args.reassignedDateTime !== undefined && args.reassignedDateTime !== null) {
      this.reassignedDateTime = args.reassignedDateTime;
    }
    if (args.cardDeadlineDate !== undefined && args.cardDeadlineDate !== null) {
      this.cardDeadlineDate = args.cardDeadlineDate;
    }
    if (args.actionMap !== undefined && args.actionMap !== null) {
      this.actionMap = Thrift.copyMap(args.actionMap, [null]);
    }
    if (args.ownerType !== undefined && args.ownerType !== null) {
      this.ownerType = args.ownerType;
    }
    if (args.iteration !== undefined && args.iteration !== null) {
      this.iteration = args.iteration;
    }
    if (args.systemNumber !== undefined && args.systemNumber !== null) {
      this.systemNumber = args.systemNumber;
    }
    if (args.additionConfirmer !== undefined && args.additionConfirmer !== null) {
      this.additionConfirmer = args.additionConfirmer;
    }
    if (args.viewed !== undefined && args.viewed !== null) {
      this.viewed = args.viewed;
    }
    if (args.hasDigitalSign !== undefined && args.hasDigitalSign !== null) {
      this.hasDigitalSign = args.hasDigitalSign;
    }
    if (args.currentExecutors !== undefined && args.currentExecutors !== null) {
      this.currentExecutors = Thrift.copyList(args.currentExecutors, [null]);
    }
    if (args.otherUsers !== undefined && args.otherUsers !== null) {
      this.otherUsers = Thrift.copyList(args.otherUsers, [null]);
    }
    if (args.scChangeDate !== undefined && args.scChangeDate !== null) {
      this.scChangeDate = args.scChangeDate;
    }
    if (args.registrationDate !== undefined && args.registrationDate !== null) {
      this.registrationDate = args.registrationDate;
    }
    if (args.sender !== undefined && args.sender !== null) {
      this.sender = args.sender;
    }
    if (args.recipient !== undefined && args.recipient !== null) {
      this.recipient = args.recipient;
    }
    if (args.originalUserId !== undefined && args.originalUserId !== null) {
      this.originalUserId = args.originalUserId;
    }
    if (args.documentParticipantGroup !== undefined && args.documentParticipantGroup !== null) {
      this.documentParticipantGroup = Thrift.copyList(args.documentParticipantGroup, [null]);
    }
    if (args.controlForDocument !== undefined && args.controlForDocument !== null) {
      this.controlForDocument = args.controlForDocument;
    }
    if (args.controlForExecutor !== undefined && args.controlForExecutor !== null) {
      this.controlForExecutor = args.controlForExecutor;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [null]);
    }
    if (args.account !== undefined && args.account !== null) {
      this.account = new Account(args.account);
    }
    if (args.moveError !== undefined && args.moveError !== null) {
      this.moveError = args.moveError;
    }
    if (args.encripted !== undefined && args.encripted !== null) {
      this.encripted = args.encripted;
    }
    if (args.icon !== undefined && args.icon !== null) {
      this.icon = args.icon;
    }
  }
};
Document.prototype = {};
Document.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.creator = new UserOrGroup();
        this.creator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.originalPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filledDocumentPattern = new FreezeDocumentPattern();
        this.filledDocumentPattern.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.stage = new DocumentPatternStage();
        this.stage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.content = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = new ContentItem();
          elem40.read(input);
          this.content.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.documentDeadlineDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.deleteDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.numberDocument = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.nameDocument = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.chatId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.subStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.hasExternalLink = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.reassignedDateTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.cardDeadlineDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.MAP) {
        var _size41 = 0;
        var _rtmp345;
        this.actionMap = {};
        var _ktype42 = 0;
        var _vtype43 = 0;
        _rtmp345 = input.readMapBegin();
        _ktype42 = _rtmp345.ktype;
        _vtype43 = _rtmp345.vtype;
        _size41 = _rtmp345.size;
        for (var _i46 = 0; _i46 < _size41; ++_i46)
        {
          if (_i46 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key47 = null;
          var val48 = null;
          key47 = input.readString().value;
          val48 = input.readI32().value;
          this.actionMap[key47] = val48;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.ownerType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.iteration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.systemNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.additionConfirmer = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.BOOL) {
        this.viewed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.BOOL) {
        this.hasDigitalSign = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.LIST) {
        var _size49 = 0;
        var _rtmp353;
        this.currentExecutors = [];
        var _etype52 = 0;
        _rtmp353 = input.readListBegin();
        _etype52 = _rtmp353.etype;
        _size49 = _rtmp353.size;
        for (var _i54 = 0; _i54 < _size49; ++_i54)
        {
          var elem55 = null;
          elem55 = new DocumentExecution();
          elem55.read(input);
          this.currentExecutors.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.otherUsers = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new DocumentExecution();
          elem62.read(input);
          this.otherUsers.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.I64) {
        this.scChangeDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.I64) {
        this.registrationDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.BOOL) {
        this.sender = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.BOOL) {
        this.recipient = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRING) {
        this.originalUserId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.documentParticipantGroup = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new DocumentParticipantGroup();
          elem69.read(input);
          this.documentParticipantGroup.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.BOOL) {
        this.controlForDocument = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.BOOL) {
        this.controlForExecutor = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.tags = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = input.readString().value;
          this.tags.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.BOOL) {
        this.moveError = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.BOOL) {
        this.encripted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.I32) {
        this.icon = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Document.prototype.write = function(output) {
  output.writeStructBegin('Document');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRUCT, 3);
    this.creator.write(output);
    output.writeFieldEnd();
  }
  if (this.originalPatternId !== null && this.originalPatternId !== undefined) {
    output.writeFieldBegin('originalPatternId', Thrift.Type.STRING, 4);
    output.writeString(this.originalPatternId);
    output.writeFieldEnd();
  }
  if (this.filledDocumentPattern !== null && this.filledDocumentPattern !== undefined) {
    output.writeFieldBegin('filledDocumentPattern', Thrift.Type.STRUCT, 5);
    this.filledDocumentPattern.write(output);
    output.writeFieldEnd();
  }
  if (this.stage !== null && this.stage !== undefined) {
    output.writeFieldBegin('stage', Thrift.Type.STRUCT, 6);
    this.stage.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.content.length);
    for (var iter77 in this.content)
    {
      if (this.content.hasOwnProperty(iter77))
      {
        iter77 = this.content[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.documentDeadlineDate !== null && this.documentDeadlineDate !== undefined) {
    output.writeFieldBegin('documentDeadlineDate', Thrift.Type.I64, 8);
    output.writeI64(this.documentDeadlineDate);
    output.writeFieldEnd();
  }
  if (this.deleteDate !== null && this.deleteDate !== undefined) {
    output.writeFieldBegin('deleteDate', Thrift.Type.I64, 9);
    output.writeI64(this.deleteDate);
    output.writeFieldEnd();
  }
  if (this.numberDocument !== null && this.numberDocument !== undefined) {
    output.writeFieldBegin('numberDocument', Thrift.Type.STRING, 10);
    output.writeString(this.numberDocument);
    output.writeFieldEnd();
  }
  if (this.nameDocument !== null && this.nameDocument !== undefined) {
    output.writeFieldBegin('nameDocument', Thrift.Type.STRING, 11);
    output.writeString(this.nameDocument);
    output.writeFieldEnd();
  }
  if (this.chatId !== null && this.chatId !== undefined) {
    output.writeFieldBegin('chatId', Thrift.Type.STRING, 12);
    output.writeString(this.chatId);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 13);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.subStatus !== null && this.subStatus !== undefined) {
    output.writeFieldBegin('subStatus', Thrift.Type.I32, 14);
    output.writeI32(this.subStatus);
    output.writeFieldEnd();
  }
  if (this.hasExternalLink !== null && this.hasExternalLink !== undefined) {
    output.writeFieldBegin('hasExternalLink', Thrift.Type.BOOL, 15);
    output.writeBool(this.hasExternalLink);
    output.writeFieldEnd();
  }
  if (this.reassignedDateTime !== null && this.reassignedDateTime !== undefined) {
    output.writeFieldBegin('reassignedDateTime', Thrift.Type.I64, 16);
    output.writeI64(this.reassignedDateTime);
    output.writeFieldEnd();
  }
  if (this.cardDeadlineDate !== null && this.cardDeadlineDate !== undefined) {
    output.writeFieldBegin('cardDeadlineDate', Thrift.Type.I64, 17);
    output.writeI64(this.cardDeadlineDate);
    output.writeFieldEnd();
  }
  if (this.actionMap !== null && this.actionMap !== undefined) {
    output.writeFieldBegin('actionMap', Thrift.Type.MAP, 18);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.actionMap));
    for (var kiter78 in this.actionMap)
    {
      if (this.actionMap.hasOwnProperty(kiter78))
      {
        var viter79 = this.actionMap[kiter78];
        output.writeString(kiter78);
        output.writeI32(viter79);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ownerType !== null && this.ownerType !== undefined) {
    output.writeFieldBegin('ownerType', Thrift.Type.I32, 19);
    output.writeI32(this.ownerType);
    output.writeFieldEnd();
  }
  if (this.iteration !== null && this.iteration !== undefined) {
    output.writeFieldBegin('iteration', Thrift.Type.I32, 20);
    output.writeI32(this.iteration);
    output.writeFieldEnd();
  }
  if (this.systemNumber !== null && this.systemNumber !== undefined) {
    output.writeFieldBegin('systemNumber', Thrift.Type.STRING, 21);
    output.writeString(this.systemNumber);
    output.writeFieldEnd();
  }
  if (this.additionConfirmer !== null && this.additionConfirmer !== undefined) {
    output.writeFieldBegin('additionConfirmer', Thrift.Type.BOOL, 22);
    output.writeBool(this.additionConfirmer);
    output.writeFieldEnd();
  }
  if (this.viewed !== null && this.viewed !== undefined) {
    output.writeFieldBegin('viewed', Thrift.Type.BOOL, 23);
    output.writeBool(this.viewed);
    output.writeFieldEnd();
  }
  if (this.hasDigitalSign !== null && this.hasDigitalSign !== undefined) {
    output.writeFieldBegin('hasDigitalSign', Thrift.Type.BOOL, 24);
    output.writeBool(this.hasDigitalSign);
    output.writeFieldEnd();
  }
  if (this.currentExecutors !== null && this.currentExecutors !== undefined) {
    output.writeFieldBegin('currentExecutors', Thrift.Type.LIST, 25);
    output.writeListBegin(Thrift.Type.STRUCT, this.currentExecutors.length);
    for (var iter80 in this.currentExecutors)
    {
      if (this.currentExecutors.hasOwnProperty(iter80))
      {
        iter80 = this.currentExecutors[iter80];
        iter80.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.otherUsers !== null && this.otherUsers !== undefined) {
    output.writeFieldBegin('otherUsers', Thrift.Type.LIST, 26);
    output.writeListBegin(Thrift.Type.STRUCT, this.otherUsers.length);
    for (var iter81 in this.otherUsers)
    {
      if (this.otherUsers.hasOwnProperty(iter81))
      {
        iter81 = this.otherUsers[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.scChangeDate !== null && this.scChangeDate !== undefined) {
    output.writeFieldBegin('scChangeDate', Thrift.Type.I64, 27);
    output.writeI64(this.scChangeDate);
    output.writeFieldEnd();
  }
  if (this.registrationDate !== null && this.registrationDate !== undefined) {
    output.writeFieldBegin('registrationDate', Thrift.Type.I64, 28);
    output.writeI64(this.registrationDate);
    output.writeFieldEnd();
  }
  if (this.sender !== null && this.sender !== undefined) {
    output.writeFieldBegin('sender', Thrift.Type.BOOL, 29);
    output.writeBool(this.sender);
    output.writeFieldEnd();
  }
  if (this.recipient !== null && this.recipient !== undefined) {
    output.writeFieldBegin('recipient', Thrift.Type.BOOL, 30);
    output.writeBool(this.recipient);
    output.writeFieldEnd();
  }
  if (this.originalUserId !== null && this.originalUserId !== undefined) {
    output.writeFieldBegin('originalUserId', Thrift.Type.STRING, 31);
    output.writeString(this.originalUserId);
    output.writeFieldEnd();
  }
  if (this.documentParticipantGroup !== null && this.documentParticipantGroup !== undefined) {
    output.writeFieldBegin('documentParticipantGroup', Thrift.Type.LIST, 32);
    output.writeListBegin(Thrift.Type.STRUCT, this.documentParticipantGroup.length);
    for (var iter82 in this.documentParticipantGroup)
    {
      if (this.documentParticipantGroup.hasOwnProperty(iter82))
      {
        iter82 = this.documentParticipantGroup[iter82];
        iter82.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.controlForDocument !== null && this.controlForDocument !== undefined) {
    output.writeFieldBegin('controlForDocument', Thrift.Type.BOOL, 33);
    output.writeBool(this.controlForDocument);
    output.writeFieldEnd();
  }
  if (this.controlForExecutor !== null && this.controlForExecutor !== undefined) {
    output.writeFieldBegin('controlForExecutor', Thrift.Type.BOOL, 34);
    output.writeBool(this.controlForExecutor);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 35);
    output.writeListBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter83 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter83))
      {
        iter83 = this.tags[iter83];
        output.writeString(iter83);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 36);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.moveError !== null && this.moveError !== undefined) {
    output.writeFieldBegin('moveError', Thrift.Type.BOOL, 37);
    output.writeBool(this.moveError);
    output.writeFieldEnd();
  }
  if (this.encripted !== null && this.encripted !== undefined) {
    output.writeFieldBegin('encripted', Thrift.Type.BOOL, 38);
    output.writeBool(this.encripted);
    output.writeFieldEnd();
  }
  if (this.icon !== null && this.icon !== undefined) {
    output.writeFieldBegin('icon', Thrift.Type.I32, 39);
    output.writeI32(this.icon);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentParticipantGroup = function(args) {
  this.userOrGroup = null;
  this.dispatchState = null;
  if (args) {
    if (args.userOrGroup !== undefined && args.userOrGroup !== null) {
      this.userOrGroup = Thrift.copyList(args.userOrGroup, [UserOrGroup]);
    }
    if (args.dispatchState !== undefined && args.dispatchState !== null) {
      this.dispatchState = args.dispatchState;
    }
  }
};
DocumentParticipantGroup.prototype = {};
DocumentParticipantGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.userOrGroup = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = new UserOrGroup();
          elem90.read(input);
          this.userOrGroup.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dispatchState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentParticipantGroup.prototype.write = function(output) {
  output.writeStructBegin('DocumentParticipantGroup');
  if (this.userOrGroup !== null && this.userOrGroup !== undefined) {
    output.writeFieldBegin('userOrGroup', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroup.length);
    for (var iter91 in this.userOrGroup)
    {
      if (this.userOrGroup.hasOwnProperty(iter91))
      {
        iter91 = this.userOrGroup[iter91];
        iter91.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dispatchState !== null && this.dispatchState !== undefined) {
    output.writeFieldBegin('dispatchState', Thrift.Type.I32, 2);
    output.writeI32(this.dispatchState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MatchingUserGroup = function(args) {
  this.stageName = null;
  this.users = null;
  this.iteration = null;
  if (args) {
    if (args.stageName !== undefined && args.stageName !== null) {
      this.stageName = args.stageName;
    }
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [UserOrGroup]);
    }
    if (args.iteration !== undefined && args.iteration !== null) {
      this.iteration = args.iteration;
    }
  }
};
MatchingUserGroup.prototype = {};
MatchingUserGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stageName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.users = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = new UserOrGroup();
          elem98.read(input);
          this.users.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.iteration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MatchingUserGroup.prototype.write = function(output) {
  output.writeStructBegin('MatchingUserGroup');
  if (this.stageName !== null && this.stageName !== undefined) {
    output.writeFieldBegin('stageName', Thrift.Type.STRING, 1);
    output.writeString(this.stageName);
    output.writeFieldEnd();
  }
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
    for (var iter99 in this.users)
    {
      if (this.users.hasOwnProperty(iter99))
      {
        iter99 = this.users[iter99];
        iter99.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.iteration !== null && this.iteration !== undefined) {
    output.writeFieldBegin('iteration', Thrift.Type.I32, 3);
    output.writeI32(this.iteration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationDocumentData = function(args) {
  this.document = null;
  this.comments = null;
  this.relations = null;
  this.contentTabs = null;
  this.securityClassifications = null;
  this.deadlineHistories = null;
  this.attachments = null;
  this.reportTemplates = null;
  this.permissions = null;
  this.errors = null;
  this.matchingUserGroup = null;
  if (args) {
    if (args.document !== undefined && args.document !== null) {
      this.document = new Document(args.document);
    }
    if (args.comments !== undefined && args.comments !== null) {
      this.comments = Thrift.copyList(args.comments, [null]);
    }
    if (args.relations !== undefined && args.relations !== null) {
      this.relations = Thrift.copyList(args.relations, [null]);
    }
    if (args.contentTabs !== undefined && args.contentTabs !== null) {
      this.contentTabs = Thrift.copyList(args.contentTabs, [null]);
    }
    if (args.securityClassifications !== undefined && args.securityClassifications !== null) {
      this.securityClassifications = Thrift.copyList(args.securityClassifications, [null]);
    }
    if (args.deadlineHistories !== undefined && args.deadlineHistories !== null) {
      this.deadlineHistories = Thrift.copyList(args.deadlineHistories, [null]);
    }
    if (args.attachments !== undefined && args.attachments !== null) {
      this.attachments = Thrift.copyList(args.attachments, [null]);
    }
    if (args.reportTemplates !== undefined && args.reportTemplates !== null) {
      this.reportTemplates = Thrift.copyList(args.reportTemplates, [null]);
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = new DocPermissions(args.permissions);
    }
    if (args.errors !== undefined && args.errors !== null) {
      this.errors = Thrift.copyMap(args.errors, [null]);
    }
    if (args.matchingUserGroup !== undefined && args.matchingUserGroup !== null) {
      this.matchingUserGroup = Thrift.copyList(args.matchingUserGroup, [MatchingUserGroup]);
    }
  }
};
AggregationDocumentData.prototype = {};
AggregationDocumentData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.document = new Document();
        this.document.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size100 = 0;
        var _rtmp3104;
        this.comments = [];
        var _etype103 = 0;
        _rtmp3104 = input.readListBegin();
        _etype103 = _rtmp3104.etype;
        _size100 = _rtmp3104.size;
        for (var _i105 = 0; _i105 < _size100; ++_i105)
        {
          var elem106 = null;
          elem106 = new DocumentComment();
          elem106.read(input);
          this.comments.push(elem106);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size107 = 0;
        var _rtmp3111;
        this.relations = [];
        var _etype110 = 0;
        _rtmp3111 = input.readListBegin();
        _etype110 = _rtmp3111.etype;
        _size107 = _rtmp3111.size;
        for (var _i112 = 0; _i112 < _size107; ++_i112)
        {
          var elem113 = null;
          elem113 = new DocumentRelation();
          elem113.read(input);
          this.relations.push(elem113);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.contentTabs = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = new ContentTab();
          elem120.read(input);
          this.contentTabs.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size121 = 0;
        var _rtmp3125;
        this.securityClassifications = [];
        var _etype124 = 0;
        _rtmp3125 = input.readListBegin();
        _etype124 = _rtmp3125.etype;
        _size121 = _rtmp3125.size;
        for (var _i126 = 0; _i126 < _size121; ++_i126)
        {
          var elem127 = null;
          elem127 = new SecurityClassification();
          elem127.read(input);
          this.securityClassifications.push(elem127);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.deadlineHistories = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new DeadlineHistory();
          elem134.read(input);
          this.deadlineHistories.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size135 = 0;
        var _rtmp3139;
        this.attachments = [];
        var _etype138 = 0;
        _rtmp3139 = input.readListBegin();
        _etype138 = _rtmp3139.etype;
        _size135 = _rtmp3139.size;
        for (var _i140 = 0; _i140 < _size135; ++_i140)
        {
          var elem141 = null;
          elem141 = new Attachment();
          elem141.read(input);
          this.attachments.push(elem141);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size142 = 0;
        var _rtmp3146;
        this.reportTemplates = [];
        var _etype145 = 0;
        _rtmp3146 = input.readListBegin();
        _etype145 = _rtmp3146.etype;
        _size142 = _rtmp3146.size;
        for (var _i147 = 0; _i147 < _size142; ++_i147)
        {
          var elem148 = null;
          elem148 = new ReportTemplate();
          elem148.read(input);
          this.reportTemplates.push(elem148);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.permissions = new DocPermissions();
        this.permissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.MAP) {
        var _size149 = 0;
        var _rtmp3153;
        this.errors = {};
        var _ktype150 = 0;
        var _vtype151 = 0;
        _rtmp3153 = input.readMapBegin();
        _ktype150 = _rtmp3153.ktype;
        _vtype151 = _rtmp3153.vtype;
        _size149 = _rtmp3153.size;
        for (var _i154 = 0; _i154 < _size149; ++_i154)
        {
          if (_i154 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key155 = null;
          var val156 = null;
          key155 = input.readString().value;
          val156 = input.readString().value;
          this.errors[key155] = val156;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size157 = 0;
        var _rtmp3161;
        this.matchingUserGroup = [];
        var _etype160 = 0;
        _rtmp3161 = input.readListBegin();
        _etype160 = _rtmp3161.etype;
        _size157 = _rtmp3161.size;
        for (var _i162 = 0; _i162 < _size157; ++_i162)
        {
          var elem163 = null;
          elem163 = new MatchingUserGroup();
          elem163.read(input);
          this.matchingUserGroup.push(elem163);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationDocumentData.prototype.write = function(output) {
  output.writeStructBegin('AggregationDocumentData');
  if (this.document !== null && this.document !== undefined) {
    output.writeFieldBegin('document', Thrift.Type.STRUCT, 1);
    this.document.write(output);
    output.writeFieldEnd();
  }
  if (this.comments !== null && this.comments !== undefined) {
    output.writeFieldBegin('comments', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.comments.length);
    for (var iter164 in this.comments)
    {
      if (this.comments.hasOwnProperty(iter164))
      {
        iter164 = this.comments[iter164];
        iter164.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.relations !== null && this.relations !== undefined) {
    output.writeFieldBegin('relations', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.relations.length);
    for (var iter165 in this.relations)
    {
      if (this.relations.hasOwnProperty(iter165))
      {
        iter165 = this.relations[iter165];
        iter165.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.contentTabs !== null && this.contentTabs !== undefined) {
    output.writeFieldBegin('contentTabs', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.contentTabs.length);
    for (var iter166 in this.contentTabs)
    {
      if (this.contentTabs.hasOwnProperty(iter166))
      {
        iter166 = this.contentTabs[iter166];
        iter166.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.securityClassifications !== null && this.securityClassifications !== undefined) {
    output.writeFieldBegin('securityClassifications', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.securityClassifications.length);
    for (var iter167 in this.securityClassifications)
    {
      if (this.securityClassifications.hasOwnProperty(iter167))
      {
        iter167 = this.securityClassifications[iter167];
        iter167.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deadlineHistories !== null && this.deadlineHistories !== undefined) {
    output.writeFieldBegin('deadlineHistories', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.deadlineHistories.length);
    for (var iter168 in this.deadlineHistories)
    {
      if (this.deadlineHistories.hasOwnProperty(iter168))
      {
        iter168 = this.deadlineHistories[iter168];
        iter168.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attachments !== null && this.attachments !== undefined) {
    output.writeFieldBegin('attachments', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.attachments.length);
    for (var iter169 in this.attachments)
    {
      if (this.attachments.hasOwnProperty(iter169))
      {
        iter169 = this.attachments[iter169];
        iter169.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reportTemplates !== null && this.reportTemplates !== undefined) {
    output.writeFieldBegin('reportTemplates', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.reportTemplates.length);
    for (var iter170 in this.reportTemplates)
    {
      if (this.reportTemplates.hasOwnProperty(iter170))
      {
        iter170 = this.reportTemplates[iter170];
        iter170.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.STRUCT, 11);
    this.permissions.write(output);
    output.writeFieldEnd();
  }
  if (this.errors !== null && this.errors !== undefined) {
    output.writeFieldBegin('errors', Thrift.Type.MAP, 12);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.errors));
    for (var kiter171 in this.errors)
    {
      if (this.errors.hasOwnProperty(kiter171))
      {
        var viter172 = this.errors[kiter171];
        output.writeString(kiter171);
        output.writeString(viter172);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.matchingUserGroup !== null && this.matchingUserGroup !== undefined) {
    output.writeFieldBegin('matchingUserGroup', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.matchingUserGroup.length);
    for (var iter173 in this.matchingUserGroup)
    {
      if (this.matchingUserGroup.hasOwnProperty(iter173))
      {
        iter173 = this.matchingUserGroup[iter173];
        iter173.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentRelation = function(args) {
  this.id = null;
  this.createDate = null;
  this.docId1 = null;
  this.docId2 = null;
  this.createDoc2Date = null;
  this.doc2Name = null;
  this.doc2Number = null;
  this.doc2SystemNumber = null;
  this.doc2Access = null;
  this.relationType = null;
  this.doc2Status = null;
  this.doc2SubStatus = null;
  this.doc2DeadlineDate = null;
  this.doc2CardDeadlineDate = null;
  this.resolution = null;
  this.doc2ActionType = null;
  this.doc2HasConfirmationCard = null;
  this.doc2Icon = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.docId1 !== undefined && args.docId1 !== null) {
      this.docId1 = args.docId1;
    }
    if (args.docId2 !== undefined && args.docId2 !== null) {
      this.docId2 = args.docId2;
    }
    if (args.createDoc2Date !== undefined && args.createDoc2Date !== null) {
      this.createDoc2Date = args.createDoc2Date;
    }
    if (args.doc2Name !== undefined && args.doc2Name !== null) {
      this.doc2Name = args.doc2Name;
    }
    if (args.doc2Number !== undefined && args.doc2Number !== null) {
      this.doc2Number = args.doc2Number;
    }
    if (args.doc2SystemNumber !== undefined && args.doc2SystemNumber !== null) {
      this.doc2SystemNumber = args.doc2SystemNumber;
    }
    if (args.doc2Access !== undefined && args.doc2Access !== null) {
      this.doc2Access = args.doc2Access;
    }
    if (args.relationType !== undefined && args.relationType !== null) {
      this.relationType = args.relationType;
    }
    if (args.doc2Status !== undefined && args.doc2Status !== null) {
      this.doc2Status = args.doc2Status;
    }
    if (args.doc2SubStatus !== undefined && args.doc2SubStatus !== null) {
      this.doc2SubStatus = args.doc2SubStatus;
    }
    if (args.doc2DeadlineDate !== undefined && args.doc2DeadlineDate !== null) {
      this.doc2DeadlineDate = args.doc2DeadlineDate;
    }
    if (args.doc2CardDeadlineDate !== undefined && args.doc2CardDeadlineDate !== null) {
      this.doc2CardDeadlineDate = args.doc2CardDeadlineDate;
    }
    if (args.resolution !== undefined && args.resolution !== null) {
      this.resolution = args.resolution;
    }
    if (args.doc2ActionType !== undefined && args.doc2ActionType !== null) {
      this.doc2ActionType = Thrift.copyMap(args.doc2ActionType, [null]);
    }
    if (args.doc2HasConfirmationCard !== undefined && args.doc2HasConfirmationCard !== null) {
      this.doc2HasConfirmationCard = args.doc2HasConfirmationCard;
    }
    if (args.doc2Icon !== undefined && args.doc2Icon !== null) {
      this.doc2Icon = args.doc2Icon;
    }
  }
};
DocumentRelation.prototype = {};
DocumentRelation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.docId1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.docId2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createDoc2Date = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.doc2Name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.doc2Number = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.doc2SystemNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.doc2Access = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.relationType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.doc2Status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.doc2SubStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.doc2DeadlineDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.doc2CardDeadlineDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.resolution = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.MAP) {
        var _size174 = 0;
        var _rtmp3178;
        this.doc2ActionType = {};
        var _ktype175 = 0;
        var _vtype176 = 0;
        _rtmp3178 = input.readMapBegin();
        _ktype175 = _rtmp3178.ktype;
        _vtype176 = _rtmp3178.vtype;
        _size174 = _rtmp3178.size;
        for (var _i179 = 0; _i179 < _size174; ++_i179)
        {
          if (_i179 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key180 = null;
          var val181 = null;
          key180 = input.readString().value;
          val181 = input.readI32().value;
          this.doc2ActionType[key180] = val181;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.doc2HasConfirmationCard = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.doc2Icon = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentRelation.prototype.write = function(output) {
  output.writeStructBegin('DocumentRelation');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.docId1 !== null && this.docId1 !== undefined) {
    output.writeFieldBegin('docId1', Thrift.Type.STRING, 3);
    output.writeString(this.docId1);
    output.writeFieldEnd();
  }
  if (this.docId2 !== null && this.docId2 !== undefined) {
    output.writeFieldBegin('docId2', Thrift.Type.STRING, 4);
    output.writeString(this.docId2);
    output.writeFieldEnd();
  }
  if (this.createDoc2Date !== null && this.createDoc2Date !== undefined) {
    output.writeFieldBegin('createDoc2Date', Thrift.Type.I64, 5);
    output.writeI64(this.createDoc2Date);
    output.writeFieldEnd();
  }
  if (this.doc2Name !== null && this.doc2Name !== undefined) {
    output.writeFieldBegin('doc2Name', Thrift.Type.STRING, 6);
    output.writeString(this.doc2Name);
    output.writeFieldEnd();
  }
  if (this.doc2Number !== null && this.doc2Number !== undefined) {
    output.writeFieldBegin('doc2Number', Thrift.Type.STRING, 7);
    output.writeString(this.doc2Number);
    output.writeFieldEnd();
  }
  if (this.doc2SystemNumber !== null && this.doc2SystemNumber !== undefined) {
    output.writeFieldBegin('doc2SystemNumber', Thrift.Type.STRING, 8);
    output.writeString(this.doc2SystemNumber);
    output.writeFieldEnd();
  }
  if (this.doc2Access !== null && this.doc2Access !== undefined) {
    output.writeFieldBegin('doc2Access', Thrift.Type.BOOL, 9);
    output.writeBool(this.doc2Access);
    output.writeFieldEnd();
  }
  if (this.relationType !== null && this.relationType !== undefined) {
    output.writeFieldBegin('relationType', Thrift.Type.I32, 10);
    output.writeI32(this.relationType);
    output.writeFieldEnd();
  }
  if (this.doc2Status !== null && this.doc2Status !== undefined) {
    output.writeFieldBegin('doc2Status', Thrift.Type.I32, 11);
    output.writeI32(this.doc2Status);
    output.writeFieldEnd();
  }
  if (this.doc2SubStatus !== null && this.doc2SubStatus !== undefined) {
    output.writeFieldBegin('doc2SubStatus', Thrift.Type.I32, 12);
    output.writeI32(this.doc2SubStatus);
    output.writeFieldEnd();
  }
  if (this.doc2DeadlineDate !== null && this.doc2DeadlineDate !== undefined) {
    output.writeFieldBegin('doc2DeadlineDate', Thrift.Type.I64, 13);
    output.writeI64(this.doc2DeadlineDate);
    output.writeFieldEnd();
  }
  if (this.doc2CardDeadlineDate !== null && this.doc2CardDeadlineDate !== undefined) {
    output.writeFieldBegin('doc2CardDeadlineDate', Thrift.Type.I64, 14);
    output.writeI64(this.doc2CardDeadlineDate);
    output.writeFieldEnd();
  }
  if (this.resolution !== null && this.resolution !== undefined) {
    output.writeFieldBegin('resolution', Thrift.Type.STRING, 15);
    output.writeString(this.resolution);
    output.writeFieldEnd();
  }
  if (this.doc2ActionType !== null && this.doc2ActionType !== undefined) {
    output.writeFieldBegin('doc2ActionType', Thrift.Type.MAP, 16);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.doc2ActionType));
    for (var kiter182 in this.doc2ActionType)
    {
      if (this.doc2ActionType.hasOwnProperty(kiter182))
      {
        var viter183 = this.doc2ActionType[kiter182];
        output.writeString(kiter182);
        output.writeI32(viter183);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.doc2HasConfirmationCard !== null && this.doc2HasConfirmationCard !== undefined) {
    output.writeFieldBegin('doc2HasConfirmationCard', Thrift.Type.BOOL, 17);
    output.writeBool(this.doc2HasConfirmationCard);
    output.writeFieldEnd();
  }
  if (this.doc2Icon !== null && this.doc2Icon !== undefined) {
    output.writeFieldBegin('doc2Icon', Thrift.Type.I32, 18);
    output.writeI32(this.doc2Icon);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DigitalView = function(args) {
  this.id = null;
  this.createDate = null;
  this.creatorId = null;
  this.documentPattern = null;
  this.name = null;
  this.context = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.creatorId !== undefined && args.creatorId !== null) {
      this.creatorId = args.creatorId;
    }
    if (args.documentPattern !== undefined && args.documentPattern !== null) {
      this.documentPattern = args.documentPattern;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.context !== undefined && args.context !== null) {
      this.context = args.context;
    }
  }
};
DigitalView.prototype = {};
DigitalView.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.creatorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.documentPattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.context = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DigitalView.prototype.write = function(output) {
  output.writeStructBegin('DigitalView');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.creatorId !== null && this.creatorId !== undefined) {
    output.writeFieldBegin('creatorId', Thrift.Type.STRING, 3);
    output.writeString(this.creatorId);
    output.writeFieldEnd();
  }
  if (this.documentPattern !== null && this.documentPattern !== undefined) {
    output.writeFieldBegin('documentPattern', Thrift.Type.STRING, 4);
    output.writeString(this.documentPattern);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRING, 6);
    output.writeString(this.context);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AttCreateInfo = function(args) {
  this.attachmentId = null;
  this.attachmentTemplateId = null;
  this.fileName = null;
  this.forDraft = null;
  this.editMode = null;
  if (args) {
    if (args.attachmentId !== undefined && args.attachmentId !== null) {
      this.attachmentId = args.attachmentId;
    }
    if (args.attachmentTemplateId !== undefined && args.attachmentTemplateId !== null) {
      this.attachmentTemplateId = args.attachmentTemplateId;
    }
    if (args.fileName !== undefined && args.fileName !== null) {
      this.fileName = args.fileName;
    }
    if (args.forDraft !== undefined && args.forDraft !== null) {
      this.forDraft = args.forDraft;
    }
    if (args.editMode !== undefined && args.editMode !== null) {
      this.editMode = args.editMode;
    }
  }
};
AttCreateInfo.prototype = {};
AttCreateInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.attachmentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.attachmentTemplateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.forDraft = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.editMode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AttCreateInfo.prototype.write = function(output) {
  output.writeStructBegin('AttCreateInfo');
  if (this.attachmentId !== null && this.attachmentId !== undefined) {
    output.writeFieldBegin('attachmentId', Thrift.Type.STRING, 1);
    output.writeString(this.attachmentId);
    output.writeFieldEnd();
  }
  if (this.attachmentTemplateId !== null && this.attachmentTemplateId !== undefined) {
    output.writeFieldBegin('attachmentTemplateId', Thrift.Type.STRING, 2);
    output.writeString(this.attachmentTemplateId);
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 3);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.forDraft !== null && this.forDraft !== undefined) {
    output.writeFieldBegin('forDraft', Thrift.Type.BOOL, 4);
    output.writeBool(this.forDraft);
    output.writeFieldEnd();
  }
  if (this.editMode !== null && this.editMode !== undefined) {
    output.writeFieldBegin('editMode', Thrift.Type.I32, 5);
    output.writeI32(this.editMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Attachment = function(args) {
  this.id = null;
  this.documentId = null;
  this.fileName = null;
  this.createDate = null;
  this.attHash = null;
  this.preview = null;
  this.creatorId = null;
  this.creator = null;
  this.size = null;
  this.status = null;
  this.stageId = null;
  this.hasDigitalSign = null;
  this.docExecId = null;
  this.autoReplacement = null;
  this.originalUserId = null;
  this.forDraft = null;
  this.waitForPublish = null;
  this.fVersion = null;
  this.iteration = null;
  this.attachmentPermissions = null;
  this.versionCount = null;
  this.fType = null;
  this.accessMode = null;
  this.editMode = null;
  this.needUniqueId = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.fileName !== undefined && args.fileName !== null) {
      this.fileName = args.fileName;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.attHash !== undefined && args.attHash !== null) {
      this.attHash = args.attHash;
    }
    if (args.preview !== undefined && args.preview !== null) {
      this.preview = Thrift.copyList(args.preview, [null]);
    }
    if (args.creatorId !== undefined && args.creatorId !== null) {
      this.creatorId = args.creatorId;
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = new UserOrGroup(args.creator);
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.stageId !== undefined && args.stageId !== null) {
      this.stageId = args.stageId;
    }
    if (args.hasDigitalSign !== undefined && args.hasDigitalSign !== null) {
      this.hasDigitalSign = args.hasDigitalSign;
    }
    if (args.docExecId !== undefined && args.docExecId !== null) {
      this.docExecId = args.docExecId;
    }
    if (args.autoReplacement !== undefined && args.autoReplacement !== null) {
      this.autoReplacement = args.autoReplacement;
    }
    if (args.originalUserId !== undefined && args.originalUserId !== null) {
      this.originalUserId = args.originalUserId;
    }
    if (args.forDraft !== undefined && args.forDraft !== null) {
      this.forDraft = args.forDraft;
    }
    if (args.waitForPublish !== undefined && args.waitForPublish !== null) {
      this.waitForPublish = args.waitForPublish;
    }
    if (args.fVersion !== undefined && args.fVersion !== null) {
      this.fVersion = args.fVersion;
    }
    if (args.iteration !== undefined && args.iteration !== null) {
      this.iteration = args.iteration;
    }
    if (args.attachmentPermissions !== undefined && args.attachmentPermissions !== null) {
      this.attachmentPermissions = new AttachmentPermissions(args.attachmentPermissions);
    }
    if (args.versionCount !== undefined && args.versionCount !== null) {
      this.versionCount = args.versionCount;
    }
    if (args.fType !== undefined && args.fType !== null) {
      this.fType = args.fType;
    }
    if (args.accessMode !== undefined && args.accessMode !== null) {
      this.accessMode = args.accessMode;
    }
    if (args.editMode !== undefined && args.editMode !== null) {
      this.editMode = args.editMode;
    }
    if (args.needUniqueId !== undefined && args.needUniqueId !== null) {
      this.needUniqueId = args.needUniqueId;
    }
  }
};
Attachment.prototype = {};
Attachment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.attHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size184 = 0;
        var _rtmp3188;
        this.preview = [];
        var _etype187 = 0;
        _rtmp3188 = input.readListBegin();
        _etype187 = _rtmp3188.etype;
        _size184 = _rtmp3188.size;
        for (var _i189 = 0; _i189 < _size184; ++_i189)
        {
          var elem190 = null;
          elem190 = input.readI32().value;
          this.preview.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.creatorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.creator = new UserOrGroup();
        this.creator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.stageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.hasDigitalSign = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.docExecId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.autoReplacement = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.originalUserId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.forDraft = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.waitForPublish = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.fVersion = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.iteration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.attachmentPermissions = new AttachmentPermissions();
        this.attachmentPermissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.versionCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.fType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I32) {
        this.accessMode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.editMode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.BOOL) {
        this.needUniqueId = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Attachment.prototype.write = function(output) {
  output.writeStructBegin('Attachment');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 3);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 4);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.attHash !== null && this.attHash !== undefined) {
    output.writeFieldBegin('attHash', Thrift.Type.STRING, 5);
    output.writeString(this.attHash);
    output.writeFieldEnd();
  }
  if (this.preview !== null && this.preview !== undefined) {
    output.writeFieldBegin('preview', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I32, this.preview.length);
    for (var iter191 in this.preview)
    {
      if (this.preview.hasOwnProperty(iter191))
      {
        iter191 = this.preview[iter191];
        output.writeI32(iter191);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.creatorId !== null && this.creatorId !== undefined) {
    output.writeFieldBegin('creatorId', Thrift.Type.STRING, 7);
    output.writeString(this.creatorId);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRUCT, 8);
    this.creator.write(output);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 9);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 10);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.stageId !== null && this.stageId !== undefined) {
    output.writeFieldBegin('stageId', Thrift.Type.STRING, 11);
    output.writeString(this.stageId);
    output.writeFieldEnd();
  }
  if (this.hasDigitalSign !== null && this.hasDigitalSign !== undefined) {
    output.writeFieldBegin('hasDigitalSign', Thrift.Type.BOOL, 12);
    output.writeBool(this.hasDigitalSign);
    output.writeFieldEnd();
  }
  if (this.docExecId !== null && this.docExecId !== undefined) {
    output.writeFieldBegin('docExecId', Thrift.Type.STRING, 13);
    output.writeString(this.docExecId);
    output.writeFieldEnd();
  }
  if (this.autoReplacement !== null && this.autoReplacement !== undefined) {
    output.writeFieldBegin('autoReplacement', Thrift.Type.BOOL, 14);
    output.writeBool(this.autoReplacement);
    output.writeFieldEnd();
  }
  if (this.originalUserId !== null && this.originalUserId !== undefined) {
    output.writeFieldBegin('originalUserId', Thrift.Type.STRING, 15);
    output.writeString(this.originalUserId);
    output.writeFieldEnd();
  }
  if (this.forDraft !== null && this.forDraft !== undefined) {
    output.writeFieldBegin('forDraft', Thrift.Type.BOOL, 16);
    output.writeBool(this.forDraft);
    output.writeFieldEnd();
  }
  if (this.waitForPublish !== null && this.waitForPublish !== undefined) {
    output.writeFieldBegin('waitForPublish', Thrift.Type.BOOL, 17);
    output.writeBool(this.waitForPublish);
    output.writeFieldEnd();
  }
  if (this.fVersion !== null && this.fVersion !== undefined) {
    output.writeFieldBegin('fVersion', Thrift.Type.I64, 18);
    output.writeI64(this.fVersion);
    output.writeFieldEnd();
  }
  if (this.iteration !== null && this.iteration !== undefined) {
    output.writeFieldBegin('iteration', Thrift.Type.I32, 19);
    output.writeI32(this.iteration);
    output.writeFieldEnd();
  }
  if (this.attachmentPermissions !== null && this.attachmentPermissions !== undefined) {
    output.writeFieldBegin('attachmentPermissions', Thrift.Type.STRUCT, 20);
    this.attachmentPermissions.write(output);
    output.writeFieldEnd();
  }
  if (this.versionCount !== null && this.versionCount !== undefined) {
    output.writeFieldBegin('versionCount', Thrift.Type.I32, 21);
    output.writeI32(this.versionCount);
    output.writeFieldEnd();
  }
  if (this.fType !== null && this.fType !== undefined) {
    output.writeFieldBegin('fType', Thrift.Type.I32, 22);
    output.writeI32(this.fType);
    output.writeFieldEnd();
  }
  if (this.accessMode !== null && this.accessMode !== undefined) {
    output.writeFieldBegin('accessMode', Thrift.Type.I32, 23);
    output.writeI32(this.accessMode);
    output.writeFieldEnd();
  }
  if (this.editMode !== null && this.editMode !== undefined) {
    output.writeFieldBegin('editMode', Thrift.Type.I32, 24);
    output.writeI32(this.editMode);
    output.writeFieldEnd();
  }
  if (this.needUniqueId !== null && this.needUniqueId !== undefined) {
    output.writeFieldBegin('needUniqueId', Thrift.Type.BOOL, 25);
    output.writeBool(this.needUniqueId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AttachmentPermissions = function(args) {
  this.onlineEdit = null;
  this.onlineComment = null;
  this.changeEditMode = null;
  if (args) {
    if (args.onlineEdit !== undefined && args.onlineEdit !== null) {
      this.onlineEdit = args.onlineEdit;
    }
    if (args.onlineComment !== undefined && args.onlineComment !== null) {
      this.onlineComment = args.onlineComment;
    }
    if (args.changeEditMode !== undefined && args.changeEditMode !== null) {
      this.changeEditMode = args.changeEditMode;
    }
  }
};
AttachmentPermissions.prototype = {};
AttachmentPermissions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.onlineEdit = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.onlineComment = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.changeEditMode = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AttachmentPermissions.prototype.write = function(output) {
  output.writeStructBegin('AttachmentPermissions');
  if (this.onlineEdit !== null && this.onlineEdit !== undefined) {
    output.writeFieldBegin('onlineEdit', Thrift.Type.BOOL, 1);
    output.writeBool(this.onlineEdit);
    output.writeFieldEnd();
  }
  if (this.onlineComment !== null && this.onlineComment !== undefined) {
    output.writeFieldBegin('onlineComment', Thrift.Type.BOOL, 2);
    output.writeBool(this.onlineComment);
    output.writeFieldEnd();
  }
  if (this.changeEditMode !== null && this.changeEditMode !== undefined) {
    output.writeFieldBegin('changeEditMode', Thrift.Type.BOOL, 3);
    output.writeBool(this.changeEditMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentComment = function(args) {
  this.id = null;
  this.creatorId = null;
  this.creator = null;
  this.createDate = null;
  this.comment = null;
  this.documentId = null;
  this.executionId = null;
  this.theNewCommentId = null;
  this.oldCommentId = null;
  this.parentId = null;
  this.docSubStatusHistId = null;
  this.commentType = null;
  this.rootCreateDate = null;
  this.rootCreatorId = null;
  this.rootCreator = null;
  this.originalUserId = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.creatorId !== undefined && args.creatorId !== null) {
      this.creatorId = args.creatorId;
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = new UserOrGroup(args.creator);
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.executionId !== undefined && args.executionId !== null) {
      this.executionId = args.executionId;
    }
    if (args.theNewCommentId !== undefined && args.theNewCommentId !== null) {
      this.theNewCommentId = args.theNewCommentId;
    }
    if (args.oldCommentId !== undefined && args.oldCommentId !== null) {
      this.oldCommentId = args.oldCommentId;
    }
    if (args.parentId !== undefined && args.parentId !== null) {
      this.parentId = args.parentId;
    }
    if (args.docSubStatusHistId !== undefined && args.docSubStatusHistId !== null) {
      this.docSubStatusHistId = args.docSubStatusHistId;
    }
    if (args.commentType !== undefined && args.commentType !== null) {
      this.commentType = args.commentType;
    }
    if (args.rootCreateDate !== undefined && args.rootCreateDate !== null) {
      this.rootCreateDate = args.rootCreateDate;
    }
    if (args.rootCreatorId !== undefined && args.rootCreatorId !== null) {
      this.rootCreatorId = args.rootCreatorId;
    }
    if (args.rootCreator !== undefined && args.rootCreator !== null) {
      this.rootCreator = new UserOrGroup(args.rootCreator);
    }
    if (args.originalUserId !== undefined && args.originalUserId !== null) {
      this.originalUserId = args.originalUserId;
    }
  }
};
DocumentComment.prototype = {};
DocumentComment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.creatorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.creator = new UserOrGroup();
        this.creator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.executionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.theNewCommentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.oldCommentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.parentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.docSubStatusHistId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.commentType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.rootCreateDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.rootCreatorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.rootCreator = new UserOrGroup();
        this.rootCreator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.originalUserId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentComment.prototype.write = function(output) {
  output.writeStructBegin('DocumentComment');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.creatorId !== null && this.creatorId !== undefined) {
    output.writeFieldBegin('creatorId', Thrift.Type.STRING, 2);
    output.writeString(this.creatorId);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRUCT, 3);
    this.creator.write(output);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 4);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 5);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 6);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.executionId !== null && this.executionId !== undefined) {
    output.writeFieldBegin('executionId', Thrift.Type.STRING, 7);
    output.writeString(this.executionId);
    output.writeFieldEnd();
  }
  if (this.theNewCommentId !== null && this.theNewCommentId !== undefined) {
    output.writeFieldBegin('theNewCommentId', Thrift.Type.STRING, 8);
    output.writeString(this.theNewCommentId);
    output.writeFieldEnd();
  }
  if (this.oldCommentId !== null && this.oldCommentId !== undefined) {
    output.writeFieldBegin('oldCommentId', Thrift.Type.STRING, 9);
    output.writeString(this.oldCommentId);
    output.writeFieldEnd();
  }
  if (this.parentId !== null && this.parentId !== undefined) {
    output.writeFieldBegin('parentId', Thrift.Type.STRING, 10);
    output.writeString(this.parentId);
    output.writeFieldEnd();
  }
  if (this.docSubStatusHistId !== null && this.docSubStatusHistId !== undefined) {
    output.writeFieldBegin('docSubStatusHistId', Thrift.Type.STRING, 11);
    output.writeString(this.docSubStatusHistId);
    output.writeFieldEnd();
  }
  if (this.commentType !== null && this.commentType !== undefined) {
    output.writeFieldBegin('commentType', Thrift.Type.I32, 12);
    output.writeI32(this.commentType);
    output.writeFieldEnd();
  }
  if (this.rootCreateDate !== null && this.rootCreateDate !== undefined) {
    output.writeFieldBegin('rootCreateDate', Thrift.Type.I64, 13);
    output.writeI64(this.rootCreateDate);
    output.writeFieldEnd();
  }
  if (this.rootCreatorId !== null && this.rootCreatorId !== undefined) {
    output.writeFieldBegin('rootCreatorId', Thrift.Type.STRING, 14);
    output.writeString(this.rootCreatorId);
    output.writeFieldEnd();
  }
  if (this.rootCreator !== null && this.rootCreator !== undefined) {
    output.writeFieldBegin('rootCreator', Thrift.Type.STRUCT, 15);
    this.rootCreator.write(output);
    output.writeFieldEnd();
  }
  if (this.originalUserId !== null && this.originalUserId !== undefined) {
    output.writeFieldBegin('originalUserId', Thrift.Type.STRING, 16);
    output.writeString(this.originalUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPattern = function(args) {
  this.id = null;
  this.nameDocPattern = null;
  this.descriptionDocPattern = null;
  this.creatorId = null;
  this.modifierId = null;
  this.createDate = null;
  this.modifiedDate = null;
  this.deleteDate = null;
  this.content = null;
  this.isValidState = null;
  this.docNumberPattern = null;
  this.documentPatternGroup = null;
  this.scMask = null;
  this.controlDate = null;
  this.useSC = null;
  this.useDocNumber = null;
  this.needGeneratePdf = null;
  this.order = null;
  this.startDocNumber = null;
  this.currentDocNumber = null;
  this.account = null;
  this.hideAuto = null;
  this.hideExt = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.nameDocPattern !== undefined && args.nameDocPattern !== null) {
      this.nameDocPattern = args.nameDocPattern;
    }
    if (args.descriptionDocPattern !== undefined && args.descriptionDocPattern !== null) {
      this.descriptionDocPattern = args.descriptionDocPattern;
    }
    if (args.creatorId !== undefined && args.creatorId !== null) {
      this.creatorId = args.creatorId;
    }
    if (args.modifierId !== undefined && args.modifierId !== null) {
      this.modifierId = args.modifierId;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.modifiedDate !== undefined && args.modifiedDate !== null) {
      this.modifiedDate = args.modifiedDate;
    }
    if (args.deleteDate !== undefined && args.deleteDate !== null) {
      this.deleteDate = args.deleteDate;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = Thrift.copyList(args.content, [null]);
    }
    if (args.isValidState !== undefined && args.isValidState !== null) {
      this.isValidState = args.isValidState;
    }
    if (args.docNumberPattern !== undefined && args.docNumberPattern !== null) {
      this.docNumberPattern = args.docNumberPattern;
    }
    if (args.documentPatternGroup !== undefined && args.documentPatternGroup !== null) {
      this.documentPatternGroup = new DocumentPatternGroup(args.documentPatternGroup);
    }
    if (args.scMask !== undefined && args.scMask !== null) {
      this.scMask = args.scMask;
    }
    if (args.controlDate !== undefined && args.controlDate !== null) {
      this.controlDate = args.controlDate;
    }
    if (args.useSC !== undefined && args.useSC !== null) {
      this.useSC = args.useSC;
    }
    if (args.useDocNumber !== undefined && args.useDocNumber !== null) {
      this.useDocNumber = args.useDocNumber;
    }
    if (args.needGeneratePdf !== undefined && args.needGeneratePdf !== null) {
      this.needGeneratePdf = args.needGeneratePdf;
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
    if (args.startDocNumber !== undefined && args.startDocNumber !== null) {
      this.startDocNumber = args.startDocNumber;
    }
    if (args.currentDocNumber !== undefined && args.currentDocNumber !== null) {
      this.currentDocNumber = args.currentDocNumber;
    }
    if (args.account !== undefined && args.account !== null) {
      this.account = new Account(args.account);
    }
    if (args.hideAuto !== undefined && args.hideAuto !== null) {
      this.hideAuto = args.hideAuto;
    }
    if (args.hideExt !== undefined && args.hideExt !== null) {
      this.hideExt = args.hideExt;
    }
  }
};
DocumentPattern.prototype = {};
DocumentPattern.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nameDocPattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionDocPattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.creatorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.modifierId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.modifiedDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.deleteDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size192 = 0;
        var _rtmp3196;
        this.content = [];
        var _etype195 = 0;
        _rtmp3196 = input.readListBegin();
        _etype195 = _rtmp3196.etype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var elem198 = null;
          elem198 = new ContentItem();
          elem198.read(input);
          this.content.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.isValidState = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.docNumberPattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.documentPatternGroup = new DocumentPatternGroup();
        this.documentPatternGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.scMask = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.controlDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.useSC = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.useDocNumber = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.needGeneratePdf = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.startDocNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.currentDocNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.hideAuto = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.BOOL) {
        this.hideExt = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPattern.prototype.write = function(output) {
  output.writeStructBegin('DocumentPattern');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.nameDocPattern !== null && this.nameDocPattern !== undefined) {
    output.writeFieldBegin('nameDocPattern', Thrift.Type.STRING, 2);
    output.writeString(this.nameDocPattern);
    output.writeFieldEnd();
  }
  if (this.descriptionDocPattern !== null && this.descriptionDocPattern !== undefined) {
    output.writeFieldBegin('descriptionDocPattern', Thrift.Type.STRING, 3);
    output.writeString(this.descriptionDocPattern);
    output.writeFieldEnd();
  }
  if (this.creatorId !== null && this.creatorId !== undefined) {
    output.writeFieldBegin('creatorId', Thrift.Type.STRING, 4);
    output.writeString(this.creatorId);
    output.writeFieldEnd();
  }
  if (this.modifierId !== null && this.modifierId !== undefined) {
    output.writeFieldBegin('modifierId', Thrift.Type.STRING, 5);
    output.writeString(this.modifierId);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 6);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.modifiedDate !== null && this.modifiedDate !== undefined) {
    output.writeFieldBegin('modifiedDate', Thrift.Type.I64, 7);
    output.writeI64(this.modifiedDate);
    output.writeFieldEnd();
  }
  if (this.deleteDate !== null && this.deleteDate !== undefined) {
    output.writeFieldBegin('deleteDate', Thrift.Type.I64, 8);
    output.writeI64(this.deleteDate);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.content.length);
    for (var iter199 in this.content)
    {
      if (this.content.hasOwnProperty(iter199))
      {
        iter199 = this.content[iter199];
        iter199.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isValidState !== null && this.isValidState !== undefined) {
    output.writeFieldBegin('isValidState', Thrift.Type.BOOL, 10);
    output.writeBool(this.isValidState);
    output.writeFieldEnd();
  }
  if (this.docNumberPattern !== null && this.docNumberPattern !== undefined) {
    output.writeFieldBegin('docNumberPattern', Thrift.Type.STRING, 11);
    output.writeString(this.docNumberPattern);
    output.writeFieldEnd();
  }
  if (this.documentPatternGroup !== null && this.documentPatternGroup !== undefined) {
    output.writeFieldBegin('documentPatternGroup', Thrift.Type.STRUCT, 12);
    this.documentPatternGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.scMask !== null && this.scMask !== undefined) {
    output.writeFieldBegin('scMask', Thrift.Type.STRING, 13);
    output.writeString(this.scMask);
    output.writeFieldEnd();
  }
  if (this.controlDate !== null && this.controlDate !== undefined) {
    output.writeFieldBegin('controlDate', Thrift.Type.STRING, 14);
    output.writeString(this.controlDate);
    output.writeFieldEnd();
  }
  if (this.useSC !== null && this.useSC !== undefined) {
    output.writeFieldBegin('useSC', Thrift.Type.BOOL, 15);
    output.writeBool(this.useSC);
    output.writeFieldEnd();
  }
  if (this.useDocNumber !== null && this.useDocNumber !== undefined) {
    output.writeFieldBegin('useDocNumber', Thrift.Type.BOOL, 16);
    output.writeBool(this.useDocNumber);
    output.writeFieldEnd();
  }
  if (this.needGeneratePdf !== null && this.needGeneratePdf !== undefined) {
    output.writeFieldBegin('needGeneratePdf', Thrift.Type.BOOL, 17);
    output.writeBool(this.needGeneratePdf);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 18);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.startDocNumber !== null && this.startDocNumber !== undefined) {
    output.writeFieldBegin('startDocNumber', Thrift.Type.I64, 19);
    output.writeI64(this.startDocNumber);
    output.writeFieldEnd();
  }
  if (this.currentDocNumber !== null && this.currentDocNumber !== undefined) {
    output.writeFieldBegin('currentDocNumber', Thrift.Type.I64, 20);
    output.writeI64(this.currentDocNumber);
    output.writeFieldEnd();
  }
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 21);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.hideAuto !== null && this.hideAuto !== undefined) {
    output.writeFieldBegin('hideAuto', Thrift.Type.BOOL, 22);
    output.writeBool(this.hideAuto);
    output.writeFieldEnd();
  }
  if (this.hideExt !== null && this.hideExt !== undefined) {
    output.writeFieldBegin('hideExt', Thrift.Type.BOOL, 23);
    output.writeBool(this.hideExt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FreezeDocumentPattern = function(args) {
  this.id = null;
  this.nameDocPattern = null;
  this.descriptionDocPattern = null;
  this.creatorId = null;
  this.modifierId = null;
  this.createDate = null;
  this.modifiedDate = null;
  this.deleteDate = null;
  this.isValidState = null;
  this.docNumberPattern = null;
  this.documentPatternGroup = null;
  this.scMask = null;
  this.controlDate = null;
  this.useSC = null;
  this.useDocNumber = null;
  this.needGeneratePdf = null;
  this.startDocNumber = null;
  this.currentDocNumber = null;
  this.account = null;
  this.originalPatternId = null;
  this.docId = null;
  this.hideAuto = null;
  this.hideExt = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.nameDocPattern !== undefined && args.nameDocPattern !== null) {
      this.nameDocPattern = args.nameDocPattern;
    }
    if (args.descriptionDocPattern !== undefined && args.descriptionDocPattern !== null) {
      this.descriptionDocPattern = args.descriptionDocPattern;
    }
    if (args.creatorId !== undefined && args.creatorId !== null) {
      this.creatorId = args.creatorId;
    }
    if (args.modifierId !== undefined && args.modifierId !== null) {
      this.modifierId = args.modifierId;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.modifiedDate !== undefined && args.modifiedDate !== null) {
      this.modifiedDate = args.modifiedDate;
    }
    if (args.deleteDate !== undefined && args.deleteDate !== null) {
      this.deleteDate = args.deleteDate;
    }
    if (args.isValidState !== undefined && args.isValidState !== null) {
      this.isValidState = args.isValidState;
    }
    if (args.docNumberPattern !== undefined && args.docNumberPattern !== null) {
      this.docNumberPattern = args.docNumberPattern;
    }
    if (args.documentPatternGroup !== undefined && args.documentPatternGroup !== null) {
      this.documentPatternGroup = new DocumentPatternGroup(args.documentPatternGroup);
    }
    if (args.scMask !== undefined && args.scMask !== null) {
      this.scMask = args.scMask;
    }
    if (args.controlDate !== undefined && args.controlDate !== null) {
      this.controlDate = args.controlDate;
    }
    if (args.useSC !== undefined && args.useSC !== null) {
      this.useSC = args.useSC;
    }
    if (args.useDocNumber !== undefined && args.useDocNumber !== null) {
      this.useDocNumber = args.useDocNumber;
    }
    if (args.needGeneratePdf !== undefined && args.needGeneratePdf !== null) {
      this.needGeneratePdf = args.needGeneratePdf;
    }
    if (args.startDocNumber !== undefined && args.startDocNumber !== null) {
      this.startDocNumber = args.startDocNumber;
    }
    if (args.currentDocNumber !== undefined && args.currentDocNumber !== null) {
      this.currentDocNumber = args.currentDocNumber;
    }
    if (args.account !== undefined && args.account !== null) {
      this.account = new Account(args.account);
    }
    if (args.originalPatternId !== undefined && args.originalPatternId !== null) {
      this.originalPatternId = args.originalPatternId;
    }
    if (args.docId !== undefined && args.docId !== null) {
      this.docId = args.docId;
    }
    if (args.hideAuto !== undefined && args.hideAuto !== null) {
      this.hideAuto = args.hideAuto;
    }
    if (args.hideExt !== undefined && args.hideExt !== null) {
      this.hideExt = args.hideExt;
    }
  }
};
FreezeDocumentPattern.prototype = {};
FreezeDocumentPattern.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nameDocPattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionDocPattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.creatorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.modifierId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.modifiedDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.deleteDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.isValidState = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.docNumberPattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.documentPatternGroup = new DocumentPatternGroup();
        this.documentPatternGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.scMask = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.controlDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.useSC = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.useDocNumber = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.needGeneratePdf = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.startDocNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.currentDocNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.originalPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.docId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.hideAuto = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.BOOL) {
        this.hideExt = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FreezeDocumentPattern.prototype.write = function(output) {
  output.writeStructBegin('FreezeDocumentPattern');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.nameDocPattern !== null && this.nameDocPattern !== undefined) {
    output.writeFieldBegin('nameDocPattern', Thrift.Type.STRING, 2);
    output.writeString(this.nameDocPattern);
    output.writeFieldEnd();
  }
  if (this.descriptionDocPattern !== null && this.descriptionDocPattern !== undefined) {
    output.writeFieldBegin('descriptionDocPattern', Thrift.Type.STRING, 3);
    output.writeString(this.descriptionDocPattern);
    output.writeFieldEnd();
  }
  if (this.creatorId !== null && this.creatorId !== undefined) {
    output.writeFieldBegin('creatorId', Thrift.Type.STRING, 4);
    output.writeString(this.creatorId);
    output.writeFieldEnd();
  }
  if (this.modifierId !== null && this.modifierId !== undefined) {
    output.writeFieldBegin('modifierId', Thrift.Type.STRING, 5);
    output.writeString(this.modifierId);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 6);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.modifiedDate !== null && this.modifiedDate !== undefined) {
    output.writeFieldBegin('modifiedDate', Thrift.Type.I64, 7);
    output.writeI64(this.modifiedDate);
    output.writeFieldEnd();
  }
  if (this.deleteDate !== null && this.deleteDate !== undefined) {
    output.writeFieldBegin('deleteDate', Thrift.Type.I64, 8);
    output.writeI64(this.deleteDate);
    output.writeFieldEnd();
  }
  if (this.isValidState !== null && this.isValidState !== undefined) {
    output.writeFieldBegin('isValidState', Thrift.Type.BOOL, 9);
    output.writeBool(this.isValidState);
    output.writeFieldEnd();
  }
  if (this.docNumberPattern !== null && this.docNumberPattern !== undefined) {
    output.writeFieldBegin('docNumberPattern', Thrift.Type.STRING, 10);
    output.writeString(this.docNumberPattern);
    output.writeFieldEnd();
  }
  if (this.documentPatternGroup !== null && this.documentPatternGroup !== undefined) {
    output.writeFieldBegin('documentPatternGroup', Thrift.Type.STRUCT, 11);
    this.documentPatternGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.scMask !== null && this.scMask !== undefined) {
    output.writeFieldBegin('scMask', Thrift.Type.STRING, 12);
    output.writeString(this.scMask);
    output.writeFieldEnd();
  }
  if (this.controlDate !== null && this.controlDate !== undefined) {
    output.writeFieldBegin('controlDate', Thrift.Type.STRING, 13);
    output.writeString(this.controlDate);
    output.writeFieldEnd();
  }
  if (this.useSC !== null && this.useSC !== undefined) {
    output.writeFieldBegin('useSC', Thrift.Type.BOOL, 14);
    output.writeBool(this.useSC);
    output.writeFieldEnd();
  }
  if (this.useDocNumber !== null && this.useDocNumber !== undefined) {
    output.writeFieldBegin('useDocNumber', Thrift.Type.BOOL, 15);
    output.writeBool(this.useDocNumber);
    output.writeFieldEnd();
  }
  if (this.needGeneratePdf !== null && this.needGeneratePdf !== undefined) {
    output.writeFieldBegin('needGeneratePdf', Thrift.Type.BOOL, 16);
    output.writeBool(this.needGeneratePdf);
    output.writeFieldEnd();
  }
  if (this.startDocNumber !== null && this.startDocNumber !== undefined) {
    output.writeFieldBegin('startDocNumber', Thrift.Type.I64, 17);
    output.writeI64(this.startDocNumber);
    output.writeFieldEnd();
  }
  if (this.currentDocNumber !== null && this.currentDocNumber !== undefined) {
    output.writeFieldBegin('currentDocNumber', Thrift.Type.I64, 18);
    output.writeI64(this.currentDocNumber);
    output.writeFieldEnd();
  }
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 19);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.originalPatternId !== null && this.originalPatternId !== undefined) {
    output.writeFieldBegin('originalPatternId', Thrift.Type.STRING, 20);
    output.writeString(this.originalPatternId);
    output.writeFieldEnd();
  }
  if (this.docId !== null && this.docId !== undefined) {
    output.writeFieldBegin('docId', Thrift.Type.STRING, 21);
    output.writeString(this.docId);
    output.writeFieldEnd();
  }
  if (this.hideAuto !== null && this.hideAuto !== undefined) {
    output.writeFieldBegin('hideAuto', Thrift.Type.BOOL, 22);
    output.writeBool(this.hideAuto);
    output.writeFieldEnd();
  }
  if (this.hideExt !== null && this.hideExt !== undefined) {
    output.writeFieldBegin('hideExt', Thrift.Type.BOOL, 23);
    output.writeBool(this.hideExt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContentItem = function(args) {
  this.id = null;
  this.name = null;
  this.value = null;
  this.type = null;
  this.search = null;
  this.isPrivate = null;
  this.requared = null;
  this.attributes = null;
  this.selections = null;
  this.parentKey = null;
  this.readOnly = null;
  this.group = null;
  this.order = null;
  this.descriptionContItem = null;
  this.showType = null;
  this.tabId = null;
  this.key = null;
  this.showPlace = null;
  this.copyValue = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new ContentItemValue(args.value);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.search !== undefined && args.search !== null) {
      this.search = args.search;
    }
    if (args.isPrivate !== undefined && args.isPrivate !== null) {
      this.isPrivate = args.isPrivate;
    }
    if (args.requared !== undefined && args.requared !== null) {
      this.requared = args.requared;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = args.attributes;
    }
    if (args.selections !== undefined && args.selections !== null) {
      this.selections = args.selections;
    }
    if (args.parentKey !== undefined && args.parentKey !== null) {
      this.parentKey = args.parentKey;
    }
    if (args.readOnly !== undefined && args.readOnly !== null) {
      this.readOnly = args.readOnly;
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = args.group;
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
    if (args.descriptionContItem !== undefined && args.descriptionContItem !== null) {
      this.descriptionContItem = args.descriptionContItem;
    }
    if (args.showType !== undefined && args.showType !== null) {
      this.showType = args.showType;
    }
    if (args.tabId !== undefined && args.tabId !== null) {
      this.tabId = args.tabId;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.showPlace !== undefined && args.showPlace !== null) {
      this.showPlace = args.showPlace;
    }
    if (args.copyValue !== undefined && args.copyValue !== null) {
      this.copyValue = args.copyValue;
    }
  }
};
ContentItem.prototype = {};
ContentItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ContentItemValue();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.search = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isPrivate = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.requared = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.attributes = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.selections = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.parentKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.readOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.group = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionContItem = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.showType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.tabId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.showPlace = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BOOL) {
        this.copyValue = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContentItem.prototype.write = function(output) {
  output.writeStructBegin('ContentItem');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 3);
    this.value.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.search !== null && this.search !== undefined) {
    output.writeFieldBegin('search', Thrift.Type.BOOL, 5);
    output.writeBool(this.search);
    output.writeFieldEnd();
  }
  if (this.isPrivate !== null && this.isPrivate !== undefined) {
    output.writeFieldBegin('isPrivate', Thrift.Type.BOOL, 6);
    output.writeBool(this.isPrivate);
    output.writeFieldEnd();
  }
  if (this.requared !== null && this.requared !== undefined) {
    output.writeFieldBegin('requared', Thrift.Type.BOOL, 7);
    output.writeBool(this.requared);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRING, 8);
    output.writeString(this.attributes);
    output.writeFieldEnd();
  }
  if (this.selections !== null && this.selections !== undefined) {
    output.writeFieldBegin('selections', Thrift.Type.STRING, 9);
    output.writeString(this.selections);
    output.writeFieldEnd();
  }
  if (this.parentKey !== null && this.parentKey !== undefined) {
    output.writeFieldBegin('parentKey', Thrift.Type.STRING, 10);
    output.writeString(this.parentKey);
    output.writeFieldEnd();
  }
  if (this.readOnly !== null && this.readOnly !== undefined) {
    output.writeFieldBegin('readOnly', Thrift.Type.BOOL, 11);
    output.writeBool(this.readOnly);
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRING, 12);
    output.writeString(this.group);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 13);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.descriptionContItem !== null && this.descriptionContItem !== undefined) {
    output.writeFieldBegin('descriptionContItem', Thrift.Type.STRING, 14);
    output.writeString(this.descriptionContItem);
    output.writeFieldEnd();
  }
  if (this.showType !== null && this.showType !== undefined) {
    output.writeFieldBegin('showType', Thrift.Type.I32, 15);
    output.writeI32(this.showType);
    output.writeFieldEnd();
  }
  if (this.tabId !== null && this.tabId !== undefined) {
    output.writeFieldBegin('tabId', Thrift.Type.STRING, 16);
    output.writeString(this.tabId);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 17);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.showPlace !== null && this.showPlace !== undefined) {
    output.writeFieldBegin('showPlace', Thrift.Type.I32, 18);
    output.writeI32(this.showPlace);
    output.writeFieldEnd();
  }
  if (this.copyValue !== null && this.copyValue !== undefined) {
    output.writeFieldBegin('copyValue', Thrift.Type.BOOL, 19);
    output.writeBool(this.copyValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContentItemValue = function(args) {
  this.strValue = null;
  this.hbValue = null;
  if (args) {
    if (args.strValue !== undefined && args.strValue !== null) {
      this.strValue = args.strValue;
    }
    if (args.hbValue !== undefined && args.hbValue !== null) {
      this.hbValue = new ContentItemHBValue(args.hbValue);
    }
  }
};
ContentItemValue.prototype = {};
ContentItemValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.strValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.hbValue = new ContentItemHBValue();
        this.hbValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContentItemValue.prototype.write = function(output) {
  output.writeStructBegin('ContentItemValue');
  if (this.strValue !== null && this.strValue !== undefined) {
    output.writeFieldBegin('strValue', Thrift.Type.STRING, 1);
    output.writeString(this.strValue);
    output.writeFieldEnd();
  }
  if (this.hbValue !== null && this.hbValue !== undefined) {
    output.writeFieldBegin('hbValue', Thrift.Type.STRUCT, 2);
    this.hbValue.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContentItemHBValue = function(args) {
  this.row = null;
  this.column = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = new HBRow(args.row);
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = new HBColumn(args.column);
    }
  }
};
ContentItemHBValue.prototype = {};
ContentItemHBValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.row = new HBRow();
        this.row.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.column = new HBColumn();
        this.column.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContentItemHBValue.prototype.write = function(output) {
  output.writeStructBegin('ContentItemHBValue');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRUCT, 1);
    this.row.write(output);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRUCT, 2);
    this.column.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccessRule = function(args) {
  this.forAuthor = null;
  this.forResponsible = null;
  this.forExecutors = null;
  this.forUserOrGroup = null;
  this.forRole = null;
  this.allowList = null;
  this.allowRole = null;
  if (args) {
    if (args.forAuthor !== undefined && args.forAuthor !== null) {
      this.forAuthor = args.forAuthor;
    }
    if (args.forResponsible !== undefined && args.forResponsible !== null) {
      this.forResponsible = args.forResponsible;
    }
    if (args.forExecutors !== undefined && args.forExecutors !== null) {
      this.forExecutors = args.forExecutors;
    }
    if (args.forUserOrGroup !== undefined && args.forUserOrGroup !== null) {
      this.forUserOrGroup = args.forUserOrGroup;
    }
    if (args.forRole !== undefined && args.forRole !== null) {
      this.forRole = args.forRole;
    }
    if (args.allowList !== undefined && args.allowList !== null) {
      this.allowList = Thrift.copyList(args.allowList, [UserOrGroup]);
    }
    if (args.allowRole !== undefined && args.allowRole !== null) {
      this.allowRole = Thrift.copyList(args.allowRole, [null]);
    }
  }
};
AccessRule.prototype = {};
AccessRule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.forAuthor = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.forResponsible = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.forExecutors = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.forUserOrGroup = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.forRole = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size200 = 0;
        var _rtmp3204;
        this.allowList = [];
        var _etype203 = 0;
        _rtmp3204 = input.readListBegin();
        _etype203 = _rtmp3204.etype;
        _size200 = _rtmp3204.size;
        for (var _i205 = 0; _i205 < _size200; ++_i205)
        {
          var elem206 = null;
          elem206 = new UserOrGroup();
          elem206.read(input);
          this.allowList.push(elem206);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.SET) {
        var _size207 = 0;
        var _rtmp3211;
        this.allowRole = [];
        var _etype210 = 0;
        _rtmp3211 = input.readSetBegin();
        _etype210 = _rtmp3211.etype;
        _size207 = _rtmp3211.size;
        for (var _i212 = 0; _i212 < _size207; ++_i212)
        {
          var elem213 = null;
          elem213 = input.readString().value;
          this.allowRole.push(elem213);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessRule.prototype.write = function(output) {
  output.writeStructBegin('AccessRule');
  if (this.forAuthor !== null && this.forAuthor !== undefined) {
    output.writeFieldBegin('forAuthor', Thrift.Type.BOOL, 1);
    output.writeBool(this.forAuthor);
    output.writeFieldEnd();
  }
  if (this.forResponsible !== null && this.forResponsible !== undefined) {
    output.writeFieldBegin('forResponsible', Thrift.Type.BOOL, 2);
    output.writeBool(this.forResponsible);
    output.writeFieldEnd();
  }
  if (this.forExecutors !== null && this.forExecutors !== undefined) {
    output.writeFieldBegin('forExecutors', Thrift.Type.BOOL, 3);
    output.writeBool(this.forExecutors);
    output.writeFieldEnd();
  }
  if (this.forUserOrGroup !== null && this.forUserOrGroup !== undefined) {
    output.writeFieldBegin('forUserOrGroup', Thrift.Type.BOOL, 4);
    output.writeBool(this.forUserOrGroup);
    output.writeFieldEnd();
  }
  if (this.forRole !== null && this.forRole !== undefined) {
    output.writeFieldBegin('forRole', Thrift.Type.BOOL, 5);
    output.writeBool(this.forRole);
    output.writeFieldEnd();
  }
  if (this.allowList !== null && this.allowList !== undefined) {
    output.writeFieldBegin('allowList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.allowList.length);
    for (var iter214 in this.allowList)
    {
      if (this.allowList.hasOwnProperty(iter214))
      {
        iter214 = this.allowList[iter214];
        iter214.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.allowRole !== null && this.allowRole !== undefined) {
    output.writeFieldBegin('allowRole', Thrift.Type.SET, 7);
    output.writeSetBegin(Thrift.Type.STRING, this.allowRole.length);
    for (var iter215 in this.allowRole)
    {
      if (this.allowRole.hasOwnProperty(iter215))
      {
        iter215 = this.allowRole[iter215];
        output.writeString(iter215);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContentTab = function(args) {
  this.id = null;
  this.name = null;
  this.seqNum = null;
  this.contentItems = null;
  this.enableEdit = null;
  this.visibleOnShort = null;
  this.visibleOnFull = null;
  this.allowForCurUser = null;
  this.visible = null;
  this.editOnCreate = null;
  this.visibleOnCreate = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.seqNum !== undefined && args.seqNum !== null) {
      this.seqNum = args.seqNum;
    }
    if (args.contentItems !== undefined && args.contentItems !== null) {
      this.contentItems = Thrift.copyList(args.contentItems, [ContentItem]);
    }
    if (args.enableEdit !== undefined && args.enableEdit !== null) {
      this.enableEdit = Thrift.copyMap(args.enableEdit, [AccessRule]);
    }
    if (args.visibleOnShort !== undefined && args.visibleOnShort !== null) {
      this.visibleOnShort = args.visibleOnShort;
    }
    if (args.visibleOnFull !== undefined && args.visibleOnFull !== null) {
      this.visibleOnFull = args.visibleOnFull;
    }
    if (args.allowForCurUser !== undefined && args.allowForCurUser !== null) {
      this.allowForCurUser = args.allowForCurUser;
    }
    if (args.visible !== undefined && args.visible !== null) {
      this.visible = Thrift.copyMap(args.visible, [null]);
    }
    if (args.editOnCreate !== undefined && args.editOnCreate !== null) {
      this.editOnCreate = args.editOnCreate;
    }
    if (args.visibleOnCreate !== undefined && args.visibleOnCreate !== null) {
      this.visibleOnCreate = args.visibleOnCreate;
    }
  }
};
ContentTab.prototype = {};
ContentTab.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.seqNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size216 = 0;
        var _rtmp3220;
        this.contentItems = [];
        var _etype219 = 0;
        _rtmp3220 = input.readListBegin();
        _etype219 = _rtmp3220.etype;
        _size216 = _rtmp3220.size;
        for (var _i221 = 0; _i221 < _size216; ++_i221)
        {
          var elem222 = null;
          elem222 = new ContentItem();
          elem222.read(input);
          this.contentItems.push(elem222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size223 = 0;
        var _rtmp3227;
        this.enableEdit = {};
        var _ktype224 = 0;
        var _vtype225 = 0;
        _rtmp3227 = input.readMapBegin();
        _ktype224 = _rtmp3227.ktype;
        _vtype225 = _rtmp3227.vtype;
        _size223 = _rtmp3227.size;
        for (var _i228 = 0; _i228 < _size223; ++_i228)
        {
          if (_i228 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key229 = null;
          var val230 = null;
          key229 = input.readString().value;
          val230 = new AccessRule();
          val230.read(input);
          this.enableEdit[key229] = val230;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.visibleOnShort = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.visibleOnFull = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.allowForCurUser = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size231 = 0;
        var _rtmp3235;
        this.visible = {};
        var _ktype232 = 0;
        var _vtype233 = 0;
        _rtmp3235 = input.readMapBegin();
        _ktype232 = _rtmp3235.ktype;
        _vtype233 = _rtmp3235.vtype;
        _size231 = _rtmp3235.size;
        for (var _i236 = 0; _i236 < _size231; ++_i236)
        {
          if (_i236 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key237 = null;
          var val238 = null;
          key237 = input.readString().value;
          val238 = input.readBool().value;
          this.visible[key237] = val238;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.editOnCreate = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.visibleOnCreate = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContentTab.prototype.write = function(output) {
  output.writeStructBegin('ContentTab');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.seqNum !== null && this.seqNum !== undefined) {
    output.writeFieldBegin('seqNum', Thrift.Type.I32, 3);
    output.writeI32(this.seqNum);
    output.writeFieldEnd();
  }
  if (this.contentItems !== null && this.contentItems !== undefined) {
    output.writeFieldBegin('contentItems', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.contentItems.length);
    for (var iter239 in this.contentItems)
    {
      if (this.contentItems.hasOwnProperty(iter239))
      {
        iter239 = this.contentItems[iter239];
        iter239.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.enableEdit !== null && this.enableEdit !== undefined) {
    output.writeFieldBegin('enableEdit', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.enableEdit));
    for (var kiter240 in this.enableEdit)
    {
      if (this.enableEdit.hasOwnProperty(kiter240))
      {
        var viter241 = this.enableEdit[kiter240];
        output.writeString(kiter240);
        viter241.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.visibleOnShort !== null && this.visibleOnShort !== undefined) {
    output.writeFieldBegin('visibleOnShort', Thrift.Type.BOOL, 6);
    output.writeBool(this.visibleOnShort);
    output.writeFieldEnd();
  }
  if (this.visibleOnFull !== null && this.visibleOnFull !== undefined) {
    output.writeFieldBegin('visibleOnFull', Thrift.Type.BOOL, 7);
    output.writeBool(this.visibleOnFull);
    output.writeFieldEnd();
  }
  if (this.allowForCurUser !== null && this.allowForCurUser !== undefined) {
    output.writeFieldBegin('allowForCurUser', Thrift.Type.BOOL, 8);
    output.writeBool(this.allowForCurUser);
    output.writeFieldEnd();
  }
  if (this.visible !== null && this.visible !== undefined) {
    output.writeFieldBegin('visible', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.BOOL, Thrift.objectLength(this.visible));
    for (var kiter242 in this.visible)
    {
      if (this.visible.hasOwnProperty(kiter242))
      {
        var viter243 = this.visible[kiter242];
        output.writeString(kiter242);
        output.writeBool(viter243);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.editOnCreate !== null && this.editOnCreate !== undefined) {
    output.writeFieldBegin('editOnCreate', Thrift.Type.BOOL, 10);
    output.writeBool(this.editOnCreate);
    output.writeFieldEnd();
  }
  if (this.visibleOnCreate !== null && this.visibleOnCreate !== undefined) {
    output.writeFieldBegin('visibleOnCreate', Thrift.Type.BOOL, 11);
    output.writeBool(this.visibleOnCreate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentExecution = function(args) {
  this.id = null;
  this.createDate = null;
  this.deleteDate = null;
  this.parentId = null;
  this.path = null;
  this.documentId = null;
  this.stageId = null;
  this.iteration = null;
  this.userOGroup = null;
  this.reassignType = null;
  this.deadlineDateTime = null;
  this.executionDateTime = null;
  this.reassignedDateTime = null;
  this.actionType = null;
  this.informedAboutDeadline = null;
  this.ownerType = null;
  this.decision = null;
  this.countAttachment = null;
  this.digitalSignId = null;
  this.closedBy = null;
  this.taskComment = null;
  this.originalUserId = null;
  this.comments = null;
  this.internalCreateIteration = null;
  this.internalActionIteration = null;
  this.periodical = null;
  this.startPeriod = null;
  this.nextStartPeriod = null;
  this.periodicJiraEndDate = null;
  this.periodicEndDate = null;
  this.delegateInfo = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.deleteDate !== undefined && args.deleteDate !== null) {
      this.deleteDate = args.deleteDate;
    }
    if (args.parentId !== undefined && args.parentId !== null) {
      this.parentId = args.parentId;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.stageId !== undefined && args.stageId !== null) {
      this.stageId = args.stageId;
    }
    if (args.iteration !== undefined && args.iteration !== null) {
      this.iteration = args.iteration;
    }
    if (args.userOGroup !== undefined && args.userOGroup !== null) {
      this.userOGroup = new UserOrGroup(args.userOGroup);
    }
    if (args.reassignType !== undefined && args.reassignType !== null) {
      this.reassignType = args.reassignType;
    }
    if (args.deadlineDateTime !== undefined && args.deadlineDateTime !== null) {
      this.deadlineDateTime = args.deadlineDateTime;
    }
    if (args.executionDateTime !== undefined && args.executionDateTime !== null) {
      this.executionDateTime = args.executionDateTime;
    }
    if (args.reassignedDateTime !== undefined && args.reassignedDateTime !== null) {
      this.reassignedDateTime = args.reassignedDateTime;
    }
    if (args.actionType !== undefined && args.actionType !== null) {
      this.actionType = args.actionType;
    }
    if (args.informedAboutDeadline !== undefined && args.informedAboutDeadline !== null) {
      this.informedAboutDeadline = args.informedAboutDeadline;
    }
    if (args.ownerType !== undefined && args.ownerType !== null) {
      this.ownerType = args.ownerType;
    }
    if (args.decision !== undefined && args.decision !== null) {
      this.decision = args.decision;
    }
    if (args.countAttachment !== undefined && args.countAttachment !== null) {
      this.countAttachment = args.countAttachment;
    }
    if (args.digitalSignId !== undefined && args.digitalSignId !== null) {
      this.digitalSignId = args.digitalSignId;
    }
    if (args.closedBy !== undefined && args.closedBy !== null) {
      this.closedBy = args.closedBy;
    }
    if (args.taskComment !== undefined && args.taskComment !== null) {
      this.taskComment = args.taskComment;
    }
    if (args.originalUserId !== undefined && args.originalUserId !== null) {
      this.originalUserId = args.originalUserId;
    }
    if (args.comments !== undefined && args.comments !== null) {
      this.comments = Thrift.copyList(args.comments, [DocumentComment]);
    }
    if (args.internalCreateIteration !== undefined && args.internalCreateIteration !== null) {
      this.internalCreateIteration = args.internalCreateIteration;
    }
    if (args.internalActionIteration !== undefined && args.internalActionIteration !== null) {
      this.internalActionIteration = args.internalActionIteration;
    }
    if (args.periodical !== undefined && args.periodical !== null) {
      this.periodical = args.periodical;
    }
    if (args.startPeriod !== undefined && args.startPeriod !== null) {
      this.startPeriod = args.startPeriod;
    }
    if (args.nextStartPeriod !== undefined && args.nextStartPeriod !== null) {
      this.nextStartPeriod = args.nextStartPeriod;
    }
    if (args.periodicJiraEndDate !== undefined && args.periodicJiraEndDate !== null) {
      this.periodicJiraEndDate = args.periodicJiraEndDate;
    }
    if (args.periodicEndDate !== undefined && args.periodicEndDate !== null) {
      this.periodicEndDate = args.periodicEndDate;
    }
    if (args.delegateInfo !== undefined && args.delegateInfo !== null) {
      this.delegateInfo = Thrift.copyList(args.delegateInfo, [null]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
DocumentExecution.prototype = {};
DocumentExecution.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.deleteDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.parentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.stageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.iteration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.userOGroup = new UserOrGroup();
        this.userOGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.reassignType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.deadlineDateTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.executionDateTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.reassignedDateTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.actionType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.informedAboutDeadline = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.ownerType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.decision = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.countAttachment = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.digitalSignId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.closedBy = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.taskComment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.originalUserId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.LIST) {
        var _size244 = 0;
        var _rtmp3248;
        this.comments = [];
        var _etype247 = 0;
        _rtmp3248 = input.readListBegin();
        _etype247 = _rtmp3248.etype;
        _size244 = _rtmp3248.size;
        for (var _i249 = 0; _i249 < _size244; ++_i249)
        {
          var elem250 = null;
          elem250 = new DocumentComment();
          elem250.read(input);
          this.comments.push(elem250);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.internalCreateIteration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I32) {
        this.internalActionIteration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.BOOL) {
        this.periodical = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.I64) {
        this.startPeriod = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.nextStartPeriod = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRING) {
        this.periodicJiraEndDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.periodicEndDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.LIST) {
        var _size251 = 0;
        var _rtmp3255;
        this.delegateInfo = [];
        var _etype254 = 0;
        _rtmp3255 = input.readListBegin();
        _etype254 = _rtmp3255.etype;
        _size251 = _rtmp3255.size;
        for (var _i256 = 0; _i256 < _size251; ++_i256)
        {
          var elem257 = null;
          elem257 = new DocumentExecutionDelegateInfo();
          elem257.read(input);
          this.delegateInfo.push(elem257);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentExecution.prototype.write = function(output) {
  output.writeStructBegin('DocumentExecution');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.deleteDate !== null && this.deleteDate !== undefined) {
    output.writeFieldBegin('deleteDate', Thrift.Type.I64, 3);
    output.writeI64(this.deleteDate);
    output.writeFieldEnd();
  }
  if (this.parentId !== null && this.parentId !== undefined) {
    output.writeFieldBegin('parentId', Thrift.Type.STRING, 4);
    output.writeString(this.parentId);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 5);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 6);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.stageId !== null && this.stageId !== undefined) {
    output.writeFieldBegin('stageId', Thrift.Type.STRING, 7);
    output.writeString(this.stageId);
    output.writeFieldEnd();
  }
  if (this.iteration !== null && this.iteration !== undefined) {
    output.writeFieldBegin('iteration', Thrift.Type.I32, 8);
    output.writeI32(this.iteration);
    output.writeFieldEnd();
  }
  if (this.userOGroup !== null && this.userOGroup !== undefined) {
    output.writeFieldBegin('userOGroup', Thrift.Type.STRUCT, 9);
    this.userOGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.reassignType !== null && this.reassignType !== undefined) {
    output.writeFieldBegin('reassignType', Thrift.Type.I32, 10);
    output.writeI32(this.reassignType);
    output.writeFieldEnd();
  }
  if (this.deadlineDateTime !== null && this.deadlineDateTime !== undefined) {
    output.writeFieldBegin('deadlineDateTime', Thrift.Type.I64, 11);
    output.writeI64(this.deadlineDateTime);
    output.writeFieldEnd();
  }
  if (this.executionDateTime !== null && this.executionDateTime !== undefined) {
    output.writeFieldBegin('executionDateTime', Thrift.Type.I64, 12);
    output.writeI64(this.executionDateTime);
    output.writeFieldEnd();
  }
  if (this.reassignedDateTime !== null && this.reassignedDateTime !== undefined) {
    output.writeFieldBegin('reassignedDateTime', Thrift.Type.I64, 13);
    output.writeI64(this.reassignedDateTime);
    output.writeFieldEnd();
  }
  if (this.actionType !== null && this.actionType !== undefined) {
    output.writeFieldBegin('actionType', Thrift.Type.I32, 14);
    output.writeI32(this.actionType);
    output.writeFieldEnd();
  }
  if (this.informedAboutDeadline !== null && this.informedAboutDeadline !== undefined) {
    output.writeFieldBegin('informedAboutDeadline', Thrift.Type.BOOL, 15);
    output.writeBool(this.informedAboutDeadline);
    output.writeFieldEnd();
  }
  if (this.ownerType !== null && this.ownerType !== undefined) {
    output.writeFieldBegin('ownerType', Thrift.Type.I32, 16);
    output.writeI32(this.ownerType);
    output.writeFieldEnd();
  }
  if (this.decision !== null && this.decision !== undefined) {
    output.writeFieldBegin('decision', Thrift.Type.STRING, 17);
    output.writeString(this.decision);
    output.writeFieldEnd();
  }
  if (this.countAttachment !== null && this.countAttachment !== undefined) {
    output.writeFieldBegin('countAttachment', Thrift.Type.I32, 18);
    output.writeI32(this.countAttachment);
    output.writeFieldEnd();
  }
  if (this.digitalSignId !== null && this.digitalSignId !== undefined) {
    output.writeFieldBegin('digitalSignId', Thrift.Type.STRING, 19);
    output.writeString(this.digitalSignId);
    output.writeFieldEnd();
  }
  if (this.closedBy !== null && this.closedBy !== undefined) {
    output.writeFieldBegin('closedBy', Thrift.Type.STRING, 20);
    output.writeString(this.closedBy);
    output.writeFieldEnd();
  }
  if (this.taskComment !== null && this.taskComment !== undefined) {
    output.writeFieldBegin('taskComment', Thrift.Type.STRING, 21);
    output.writeString(this.taskComment);
    output.writeFieldEnd();
  }
  if (this.originalUserId !== null && this.originalUserId !== undefined) {
    output.writeFieldBegin('originalUserId', Thrift.Type.STRING, 22);
    output.writeString(this.originalUserId);
    output.writeFieldEnd();
  }
  if (this.comments !== null && this.comments !== undefined) {
    output.writeFieldBegin('comments', Thrift.Type.LIST, 23);
    output.writeListBegin(Thrift.Type.STRUCT, this.comments.length);
    for (var iter258 in this.comments)
    {
      if (this.comments.hasOwnProperty(iter258))
      {
        iter258 = this.comments[iter258];
        iter258.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.internalCreateIteration !== null && this.internalCreateIteration !== undefined) {
    output.writeFieldBegin('internalCreateIteration', Thrift.Type.I32, 24);
    output.writeI32(this.internalCreateIteration);
    output.writeFieldEnd();
  }
  if (this.internalActionIteration !== null && this.internalActionIteration !== undefined) {
    output.writeFieldBegin('internalActionIteration', Thrift.Type.I32, 25);
    output.writeI32(this.internalActionIteration);
    output.writeFieldEnd();
  }
  if (this.periodical !== null && this.periodical !== undefined) {
    output.writeFieldBegin('periodical', Thrift.Type.BOOL, 26);
    output.writeBool(this.periodical);
    output.writeFieldEnd();
  }
  if (this.startPeriod !== null && this.startPeriod !== undefined) {
    output.writeFieldBegin('startPeriod', Thrift.Type.I64, 27);
    output.writeI64(this.startPeriod);
    output.writeFieldEnd();
  }
  if (this.nextStartPeriod !== null && this.nextStartPeriod !== undefined) {
    output.writeFieldBegin('nextStartPeriod', Thrift.Type.STRING, 28);
    output.writeString(this.nextStartPeriod);
    output.writeFieldEnd();
  }
  if (this.periodicJiraEndDate !== null && this.periodicJiraEndDate !== undefined) {
    output.writeFieldBegin('periodicJiraEndDate', Thrift.Type.STRING, 29);
    output.writeString(this.periodicJiraEndDate);
    output.writeFieldEnd();
  }
  if (this.periodicEndDate !== null && this.periodicEndDate !== undefined) {
    output.writeFieldBegin('periodicEndDate', Thrift.Type.I64, 30);
    output.writeI64(this.periodicEndDate);
    output.writeFieldEnd();
  }
  if (this.delegateInfo !== null && this.delegateInfo !== undefined) {
    output.writeFieldBegin('delegateInfo', Thrift.Type.LIST, 31);
    output.writeListBegin(Thrift.Type.STRUCT, this.delegateInfo.length);
    for (var iter259 in this.delegateInfo)
    {
      if (this.delegateInfo.hasOwnProperty(iter259))
      {
        iter259 = this.delegateInfo[iter259];
        iter259.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 32);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentExecutionDelegateInfo = function(args) {
  this.id = null;
  this.createDate = null;
  this.documentExecutionId = null;
  this.internalActionIteration = null;
  this.originalUserId = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.documentExecutionId !== undefined && args.documentExecutionId !== null) {
      this.documentExecutionId = args.documentExecutionId;
    }
    if (args.internalActionIteration !== undefined && args.internalActionIteration !== null) {
      this.internalActionIteration = args.internalActionIteration;
    }
    if (args.originalUserId !== undefined && args.originalUserId !== null) {
      this.originalUserId = args.originalUserId;
    }
  }
};
DocumentExecutionDelegateInfo.prototype = {};
DocumentExecutionDelegateInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.documentExecutionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.internalActionIteration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.originalUserId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentExecutionDelegateInfo.prototype.write = function(output) {
  output.writeStructBegin('DocumentExecutionDelegateInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.documentExecutionId !== null && this.documentExecutionId !== undefined) {
    output.writeFieldBegin('documentExecutionId', Thrift.Type.STRING, 3);
    output.writeString(this.documentExecutionId);
    output.writeFieldEnd();
  }
  if (this.internalActionIteration !== null && this.internalActionIteration !== undefined) {
    output.writeFieldBegin('internalActionIteration', Thrift.Type.I32, 4);
    output.writeI32(this.internalActionIteration);
    output.writeFieldEnd();
  }
  if (this.originalUserId !== null && this.originalUserId !== undefined) {
    output.writeFieldBegin('originalUserId', Thrift.Type.STRING, 5);
    output.writeString(this.originalUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentReassign = function(args) {
  this.id = null;
  this.dateStart = null;
  this.dateEnd = null;
  this.userOrGroup = null;
  this.deadLineTime = null;
  this.reassignType = null;
  this.comment = null;
  this.periodical = null;
  this.startPeriod = null;
  this.nextStartPeriod = null;
  this.periodicEndDate = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.dateStart !== undefined && args.dateStart !== null) {
      this.dateStart = args.dateStart;
    }
    if (args.dateEnd !== undefined && args.dateEnd !== null) {
      this.dateEnd = args.dateEnd;
    }
    if (args.userOrGroup !== undefined && args.userOrGroup !== null) {
      this.userOrGroup = new UserOrGroup(args.userOrGroup);
    }
    if (args.deadLineTime !== undefined && args.deadLineTime !== null) {
      this.deadLineTime = args.deadLineTime;
    }
    if (args.reassignType !== undefined && args.reassignType !== null) {
      this.reassignType = args.reassignType;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.periodical !== undefined && args.periodical !== null) {
      this.periodical = args.periodical;
    }
    if (args.startPeriod !== undefined && args.startPeriod !== null) {
      this.startPeriod = args.startPeriod;
    }
    if (args.nextStartPeriod !== undefined && args.nextStartPeriod !== null) {
      this.nextStartPeriod = args.nextStartPeriod;
    }
    if (args.periodicEndDate !== undefined && args.periodicEndDate !== null) {
      this.periodicEndDate = args.periodicEndDate;
    }
  }
};
DocumentReassign.prototype = {};
DocumentReassign.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.dateStart = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.dateEnd = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.userOrGroup = new UserOrGroup();
        this.userOrGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.deadLineTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.reassignType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.periodical = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.startPeriod = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.nextStartPeriod = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.periodicEndDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentReassign.prototype.write = function(output) {
  output.writeStructBegin('DocumentReassign');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.dateStart !== null && this.dateStart !== undefined) {
    output.writeFieldBegin('dateStart', Thrift.Type.I64, 2);
    output.writeI64(this.dateStart);
    output.writeFieldEnd();
  }
  if (this.dateEnd !== null && this.dateEnd !== undefined) {
    output.writeFieldBegin('dateEnd', Thrift.Type.I64, 3);
    output.writeI64(this.dateEnd);
    output.writeFieldEnd();
  }
  if (this.userOrGroup !== null && this.userOrGroup !== undefined) {
    output.writeFieldBegin('userOrGroup', Thrift.Type.STRUCT, 4);
    this.userOrGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.deadLineTime !== null && this.deadLineTime !== undefined) {
    output.writeFieldBegin('deadLineTime', Thrift.Type.I64, 5);
    output.writeI64(this.deadLineTime);
    output.writeFieldEnd();
  }
  if (this.reassignType !== null && this.reassignType !== undefined) {
    output.writeFieldBegin('reassignType', Thrift.Type.I32, 6);
    output.writeI32(this.reassignType);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 7);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.periodical !== null && this.periodical !== undefined) {
    output.writeFieldBegin('periodical', Thrift.Type.BOOL, 8);
    output.writeBool(this.periodical);
    output.writeFieldEnd();
  }
  if (this.startPeriod !== null && this.startPeriod !== undefined) {
    output.writeFieldBegin('startPeriod', Thrift.Type.I64, 9);
    output.writeI64(this.startPeriod);
    output.writeFieldEnd();
  }
  if (this.nextStartPeriod !== null && this.nextStartPeriod !== undefined) {
    output.writeFieldBegin('nextStartPeriod', Thrift.Type.STRING, 10);
    output.writeString(this.nextStartPeriod);
    output.writeFieldEnd();
  }
  if (this.periodicEndDate !== null && this.periodicEndDate !== undefined) {
    output.writeFieldBegin('periodicEndDate', Thrift.Type.I64, 11);
    output.writeI64(this.periodicEndDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PassedStage = function(args) {
  this.passedStage = null;
  this.iteration = null;
  this.startDate = null;
  this.factDate = null;
  this.deadLineDate = null;
  if (args) {
    if (args.passedStage !== undefined && args.passedStage !== null) {
      this.passedStage = new DocumentPatternStage(args.passedStage);
    }
    if (args.iteration !== undefined && args.iteration !== null) {
      this.iteration = args.iteration;
    }
    if (args.startDate !== undefined && args.startDate !== null) {
      this.startDate = args.startDate;
    }
    if (args.factDate !== undefined && args.factDate !== null) {
      this.factDate = args.factDate;
    }
    if (args.deadLineDate !== undefined && args.deadLineDate !== null) {
      this.deadLineDate = args.deadLineDate;
    }
  }
};
PassedStage.prototype = {};
PassedStage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.passedStage = new DocumentPatternStage();
        this.passedStage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.iteration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.factDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.deadLineDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PassedStage.prototype.write = function(output) {
  output.writeStructBegin('PassedStage');
  if (this.passedStage !== null && this.passedStage !== undefined) {
    output.writeFieldBegin('passedStage', Thrift.Type.STRUCT, 1);
    this.passedStage.write(output);
    output.writeFieldEnd();
  }
  if (this.iteration !== null && this.iteration !== undefined) {
    output.writeFieldBegin('iteration', Thrift.Type.I32, 2);
    output.writeI32(this.iteration);
    output.writeFieldEnd();
  }
  if (this.startDate !== null && this.startDate !== undefined) {
    output.writeFieldBegin('startDate', Thrift.Type.I64, 3);
    output.writeI64(this.startDate);
    output.writeFieldEnd();
  }
  if (this.factDate !== null && this.factDate !== undefined) {
    output.writeFieldBegin('factDate', Thrift.Type.I64, 4);
    output.writeI64(this.factDate);
    output.writeFieldEnd();
  }
  if (this.deadLineDate !== null && this.deadLineDate !== undefined) {
    output.writeFieldBegin('deadLineDate', Thrift.Type.I64, 5);
    output.writeI64(this.deadLineDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StageParam = function(args) {
  this.key = null;
  this.value = null;
  this.type = null;
  this.name = null;
  this.multi = null;
  this.inValues = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = Thrift.copyList(args.value, [null]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = Thrift.copyList(args.name, [null]);
    }
    if (args.multi !== undefined && args.multi !== null) {
      this.multi = args.multi;
    }
    if (args.inValues !== undefined && args.inValues !== null) {
      this.inValues = Thrift.copyList(args.inValues, [null]);
    }
  }
};
StageParam.prototype = {};
StageParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size260 = 0;
        var _rtmp3264;
        this.value = [];
        var _etype263 = 0;
        _rtmp3264 = input.readListBegin();
        _etype263 = _rtmp3264.etype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          var elem266 = null;
          elem266 = input.readString().value;
          this.value.push(elem266);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size267 = 0;
        var _rtmp3271;
        this.name = [];
        var _etype270 = 0;
        _rtmp3271 = input.readListBegin();
        _etype270 = _rtmp3271.etype;
        _size267 = _rtmp3271.size;
        for (var _i272 = 0; _i272 < _size267; ++_i272)
        {
          var elem273 = null;
          elem273 = input.readString().value;
          this.name.push(elem273);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.multi = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size274 = 0;
        var _rtmp3278;
        this.inValues = [];
        var _etype277 = 0;
        _rtmp3278 = input.readListBegin();
        _etype277 = _rtmp3278.etype;
        _size274 = _rtmp3278.size;
        for (var _i279 = 0; _i279 < _size274; ++_i279)
        {
          var elem280 = null;
          elem280 = input.readString().value;
          this.inValues.push(elem280);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StageParam.prototype.write = function(output) {
  output.writeStructBegin('StageParam');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.value.length);
    for (var iter281 in this.value)
    {
      if (this.value.hasOwnProperty(iter281))
      {
        iter281 = this.value[iter281];
        output.writeString(iter281);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.name.length);
    for (var iter282 in this.name)
    {
      if (this.name.hasOwnProperty(iter282))
      {
        iter282 = this.name[iter282];
        output.writeString(iter282);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.multi !== null && this.multi !== undefined) {
    output.writeFieldBegin('multi', Thrift.Type.BOOL, 5);
    output.writeBool(this.multi);
    output.writeFieldEnd();
  }
  if (this.inValues !== null && this.inValues !== undefined) {
    output.writeFieldBegin('inValues', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.inValues.length);
    for (var iter283 in this.inValues)
    {
      if (this.inValues.hasOwnProperty(iter283))
      {
        iter283 = this.inValues[iter283];
        output.writeString(iter283);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternStage = function(args) {
  this.id = null;
  this.documentPatternId = null;
  this.nameDocPatStage = null;
  this.descriptionDocPatStage = null;
  this.status = null;
  this.subStatus = null;
  this.actionType = null;
  this.stageReq = null;
  this.deadLine = null;
  this.graphicalParams = null;
  this.availablePatternStageId = null;
  this.movedByDecision = null;
  this.registerDocument = null;
  this.execPriority = null;
  this.dispatchState = null;
  this.hide = null;
  this.userOrGroups = null;
  this.allowAdditionalConf = null;
  this.runPerriodicall = null;
  this.startPeriod = null;
  this.nextStartPeriod = null;
  this.periodicJiraEndDate = null;
  this.periodicEndDate = null;
  this.onlineEditRule = null;
  this.onlineCommentRule = null;
  this.changeOnDraft = null;
  this.changeOnEdit = null;
  this.changeOnSetDecision = null;
  this.editDocRule = null;
  this.attachmentAddRule = null;
  this.attachmentDeleteRule = null;
  this.changeContentRule = null;
  this.canEdit = null;
  this.maxSigner = null;
  this.stageParams = null;
  this.availableDecisions = null;
  this.fmEditKey = null;
  this.fmEditPersonal = null;
  this.fmEditClose = null;
  this.fmViewKey = null;
  this.fmViewPersonal = null;
  this.fmViewClose = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.documentPatternId !== undefined && args.documentPatternId !== null) {
      this.documentPatternId = args.documentPatternId;
    }
    if (args.nameDocPatStage !== undefined && args.nameDocPatStage !== null) {
      this.nameDocPatStage = args.nameDocPatStage;
    }
    if (args.descriptionDocPatStage !== undefined && args.descriptionDocPatStage !== null) {
      this.descriptionDocPatStage = args.descriptionDocPatStage;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.subStatus !== undefined && args.subStatus !== null) {
      this.subStatus = args.subStatus;
    }
    if (args.actionType !== undefined && args.actionType !== null) {
      this.actionType = args.actionType;
    }
    if (args.stageReq !== undefined && args.stageReq !== null) {
      this.stageReq = args.stageReq;
    }
    if (args.deadLine !== undefined && args.deadLine !== null) {
      this.deadLine = args.deadLine;
    }
    if (args.graphicalParams !== undefined && args.graphicalParams !== null) {
      this.graphicalParams = args.graphicalParams;
    }
    if (args.availablePatternStageId !== undefined && args.availablePatternStageId !== null) {
      this.availablePatternStageId = args.availablePatternStageId;
    }
    if (args.movedByDecision !== undefined && args.movedByDecision !== null) {
      this.movedByDecision = args.movedByDecision;
    }
    if (args.registerDocument !== undefined && args.registerDocument !== null) {
      this.registerDocument = args.registerDocument;
    }
    if (args.execPriority !== undefined && args.execPriority !== null) {
      this.execPriority = args.execPriority;
    }
    if (args.dispatchState !== undefined && args.dispatchState !== null) {
      this.dispatchState = args.dispatchState;
    }
    if (args.hide !== undefined && args.hide !== null) {
      this.hide = args.hide;
    }
    if (args.userOrGroups !== undefined && args.userOrGroups !== null) {
      this.userOrGroups = Thrift.copyList(args.userOrGroups, [UserOrGroup]);
    }
    if (args.allowAdditionalConf !== undefined && args.allowAdditionalConf !== null) {
      this.allowAdditionalConf = args.allowAdditionalConf;
    }
    if (args.runPerriodicall !== undefined && args.runPerriodicall !== null) {
      this.runPerriodicall = args.runPerriodicall;
    }
    if (args.startPeriod !== undefined && args.startPeriod !== null) {
      this.startPeriod = args.startPeriod;
    }
    if (args.nextStartPeriod !== undefined && args.nextStartPeriod !== null) {
      this.nextStartPeriod = args.nextStartPeriod;
    }
    if (args.periodicJiraEndDate !== undefined && args.periodicJiraEndDate !== null) {
      this.periodicJiraEndDate = args.periodicJiraEndDate;
    }
    if (args.periodicEndDate !== undefined && args.periodicEndDate !== null) {
      this.periodicEndDate = args.periodicEndDate;
    }
    if (args.onlineEditRule !== undefined && args.onlineEditRule !== null) {
      this.onlineEditRule = new AccessRule(args.onlineEditRule);
    }
    if (args.onlineCommentRule !== undefined && args.onlineCommentRule !== null) {
      this.onlineCommentRule = new AccessRule(args.onlineCommentRule);
    }
    if (args.changeOnDraft !== undefined && args.changeOnDraft !== null) {
      this.changeOnDraft = args.changeOnDraft;
    }
    if (args.changeOnEdit !== undefined && args.changeOnEdit !== null) {
      this.changeOnEdit = new AccessRule(args.changeOnEdit);
    }
    if (args.changeOnSetDecision !== undefined && args.changeOnSetDecision !== null) {
      this.changeOnSetDecision = new AccessRule(args.changeOnSetDecision);
    }
    if (args.editDocRule !== undefined && args.editDocRule !== null) {
      this.editDocRule = new AccessRule(args.editDocRule);
    }
    if (args.attachmentAddRule !== undefined && args.attachmentAddRule !== null) {
      this.attachmentAddRule = new AccessRule(args.attachmentAddRule);
    }
    if (args.attachmentDeleteRule !== undefined && args.attachmentDeleteRule !== null) {
      this.attachmentDeleteRule = new AccessRule(args.attachmentDeleteRule);
    }
    if (args.changeContentRule !== undefined && args.changeContentRule !== null) {
      this.changeContentRule = new AccessRule(args.changeContentRule);
    }
    if (args.canEdit !== undefined && args.canEdit !== null) {
      this.canEdit = args.canEdit;
    }
    if (args.maxSigner !== undefined && args.maxSigner !== null) {
      this.maxSigner = args.maxSigner;
    }
    if (args.stageParams !== undefined && args.stageParams !== null) {
      this.stageParams = Thrift.copyList(args.stageParams, [StageParam]);
    }
    if (args.availableDecisions !== undefined && args.availableDecisions !== null) {
      this.availableDecisions = Thrift.copyList(args.availableDecisions, [null]);
    }
    if (args.fmEditKey !== undefined && args.fmEditKey !== null) {
      this.fmEditKey = args.fmEditKey;
    }
    if (args.fmEditPersonal !== undefined && args.fmEditPersonal !== null) {
      this.fmEditPersonal = args.fmEditPersonal;
    }
    if (args.fmEditClose !== undefined && args.fmEditClose !== null) {
      this.fmEditClose = args.fmEditClose;
    }
    if (args.fmViewKey !== undefined && args.fmViewKey !== null) {
      this.fmViewKey = args.fmViewKey;
    }
    if (args.fmViewPersonal !== undefined && args.fmViewPersonal !== null) {
      this.fmViewPersonal = args.fmViewPersonal;
    }
    if (args.fmViewClose !== undefined && args.fmViewClose !== null) {
      this.fmViewClose = args.fmViewClose;
    }
  }
};
DocumentPatternStage.prototype = {};
DocumentPatternStage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.nameDocPatStage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionDocPatStage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.subStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.actionType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.stageReq = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.deadLine = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.graphicalParams = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.availablePatternStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.movedByDecision = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.registerDocument = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.execPriority = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.dispatchState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.hide = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.LIST) {
        var _size284 = 0;
        var _rtmp3288;
        this.userOrGroups = [];
        var _etype287 = 0;
        _rtmp3288 = input.readListBegin();
        _etype287 = _rtmp3288.etype;
        _size284 = _rtmp3288.size;
        for (var _i289 = 0; _i289 < _size284; ++_i289)
        {
          var elem290 = null;
          elem290 = new UserOrGroup();
          elem290.read(input);
          this.userOrGroups.push(elem290);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.allowAdditionalConf = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BOOL) {
        this.runPerriodicall = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.startPeriod = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.nextStartPeriod = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.periodicJiraEndDate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I64) {
        this.periodicEndDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRUCT) {
        this.onlineEditRule = new AccessRule();
        this.onlineEditRule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRUCT) {
        this.onlineCommentRule = new AccessRule();
        this.onlineCommentRule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.BOOL) {
        this.changeOnDraft = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRUCT) {
        this.changeOnEdit = new AccessRule();
        this.changeOnEdit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRUCT) {
        this.changeOnSetDecision = new AccessRule();
        this.changeOnSetDecision.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRUCT) {
        this.editDocRule = new AccessRule();
        this.editDocRule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.attachmentAddRule = new AccessRule();
        this.attachmentAddRule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRUCT) {
        this.attachmentDeleteRule = new AccessRule();
        this.attachmentDeleteRule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRUCT) {
        this.changeContentRule = new AccessRule();
        this.changeContentRule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.BOOL) {
        this.canEdit = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.I32) {
        this.maxSigner = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.LIST) {
        var _size291 = 0;
        var _rtmp3295;
        this.stageParams = [];
        var _etype294 = 0;
        _rtmp3295 = input.readListBegin();
        _etype294 = _rtmp3295.etype;
        _size291 = _rtmp3295.size;
        for (var _i296 = 0; _i296 < _size291; ++_i296)
        {
          var elem297 = null;
          elem297 = new StageParam();
          elem297.read(input);
          this.stageParams.push(elem297);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.SET) {
        var _size298 = 0;
        var _rtmp3302;
        this.availableDecisions = [];
        var _etype301 = 0;
        _rtmp3302 = input.readSetBegin();
        _etype301 = _rtmp3302.etype;
        _size298 = _rtmp3302.size;
        for (var _i303 = 0; _i303 < _size298; ++_i303)
        {
          var elem304 = null;
          elem304 = input.readString().value;
          this.availableDecisions.push(elem304);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRING) {
        this.fmEditKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.BOOL) {
        this.fmEditPersonal = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.BOOL) {
        this.fmEditClose = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.fmViewKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.BOOL) {
        this.fmViewPersonal = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.BOOL) {
        this.fmViewClose = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternStage.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternStage');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.documentPatternId !== null && this.documentPatternId !== undefined) {
    output.writeFieldBegin('documentPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.documentPatternId);
    output.writeFieldEnd();
  }
  if (this.nameDocPatStage !== null && this.nameDocPatStage !== undefined) {
    output.writeFieldBegin('nameDocPatStage', Thrift.Type.STRING, 3);
    output.writeString(this.nameDocPatStage);
    output.writeFieldEnd();
  }
  if (this.descriptionDocPatStage !== null && this.descriptionDocPatStage !== undefined) {
    output.writeFieldBegin('descriptionDocPatStage', Thrift.Type.STRING, 4);
    output.writeString(this.descriptionDocPatStage);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 5);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.subStatus !== null && this.subStatus !== undefined) {
    output.writeFieldBegin('subStatus', Thrift.Type.I32, 6);
    output.writeI32(this.subStatus);
    output.writeFieldEnd();
  }
  if (this.actionType !== null && this.actionType !== undefined) {
    output.writeFieldBegin('actionType', Thrift.Type.I32, 7);
    output.writeI32(this.actionType);
    output.writeFieldEnd();
  }
  if (this.stageReq !== null && this.stageReq !== undefined) {
    output.writeFieldBegin('stageReq', Thrift.Type.BOOL, 8);
    output.writeBool(this.stageReq);
    output.writeFieldEnd();
  }
  if (this.deadLine !== null && this.deadLine !== undefined) {
    output.writeFieldBegin('deadLine', Thrift.Type.STRING, 9);
    output.writeString(this.deadLine);
    output.writeFieldEnd();
  }
  if (this.graphicalParams !== null && this.graphicalParams !== undefined) {
    output.writeFieldBegin('graphicalParams', Thrift.Type.STRING, 10);
    output.writeString(this.graphicalParams);
    output.writeFieldEnd();
  }
  if (this.availablePatternStageId !== null && this.availablePatternStageId !== undefined) {
    output.writeFieldBegin('availablePatternStageId', Thrift.Type.STRING, 11);
    output.writeString(this.availablePatternStageId);
    output.writeFieldEnd();
  }
  if (this.movedByDecision !== null && this.movedByDecision !== undefined) {
    output.writeFieldBegin('movedByDecision', Thrift.Type.STRING, 12);
    output.writeString(this.movedByDecision);
    output.writeFieldEnd();
  }
  if (this.registerDocument !== null && this.registerDocument !== undefined) {
    output.writeFieldBegin('registerDocument', Thrift.Type.BOOL, 13);
    output.writeBool(this.registerDocument);
    output.writeFieldEnd();
  }
  if (this.execPriority !== null && this.execPriority !== undefined) {
    output.writeFieldBegin('execPriority', Thrift.Type.I32, 14);
    output.writeI32(this.execPriority);
    output.writeFieldEnd();
  }
  if (this.dispatchState !== null && this.dispatchState !== undefined) {
    output.writeFieldBegin('dispatchState', Thrift.Type.I32, 15);
    output.writeI32(this.dispatchState);
    output.writeFieldEnd();
  }
  if (this.hide !== null && this.hide !== undefined) {
    output.writeFieldBegin('hide', Thrift.Type.BOOL, 16);
    output.writeBool(this.hide);
    output.writeFieldEnd();
  }
  if (this.userOrGroups !== null && this.userOrGroups !== undefined) {
    output.writeFieldBegin('userOrGroups', Thrift.Type.LIST, 17);
    output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroups.length);
    for (var iter305 in this.userOrGroups)
    {
      if (this.userOrGroups.hasOwnProperty(iter305))
      {
        iter305 = this.userOrGroups[iter305];
        iter305.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.allowAdditionalConf !== null && this.allowAdditionalConf !== undefined) {
    output.writeFieldBegin('allowAdditionalConf', Thrift.Type.BOOL, 18);
    output.writeBool(this.allowAdditionalConf);
    output.writeFieldEnd();
  }
  if (this.runPerriodicall !== null && this.runPerriodicall !== undefined) {
    output.writeFieldBegin('runPerriodicall', Thrift.Type.BOOL, 19);
    output.writeBool(this.runPerriodicall);
    output.writeFieldEnd();
  }
  if (this.startPeriod !== null && this.startPeriod !== undefined) {
    output.writeFieldBegin('startPeriod', Thrift.Type.I64, 20);
    output.writeI64(this.startPeriod);
    output.writeFieldEnd();
  }
  if (this.nextStartPeriod !== null && this.nextStartPeriod !== undefined) {
    output.writeFieldBegin('nextStartPeriod', Thrift.Type.STRING, 21);
    output.writeString(this.nextStartPeriod);
    output.writeFieldEnd();
  }
  if (this.periodicJiraEndDate !== null && this.periodicJiraEndDate !== undefined) {
    output.writeFieldBegin('periodicJiraEndDate', Thrift.Type.STRING, 22);
    output.writeString(this.periodicJiraEndDate);
    output.writeFieldEnd();
  }
  if (this.periodicEndDate !== null && this.periodicEndDate !== undefined) {
    output.writeFieldBegin('periodicEndDate', Thrift.Type.I64, 23);
    output.writeI64(this.periodicEndDate);
    output.writeFieldEnd();
  }
  if (this.onlineEditRule !== null && this.onlineEditRule !== undefined) {
    output.writeFieldBegin('onlineEditRule', Thrift.Type.STRUCT, 24);
    this.onlineEditRule.write(output);
    output.writeFieldEnd();
  }
  if (this.onlineCommentRule !== null && this.onlineCommentRule !== undefined) {
    output.writeFieldBegin('onlineCommentRule', Thrift.Type.STRUCT, 25);
    this.onlineCommentRule.write(output);
    output.writeFieldEnd();
  }
  if (this.changeOnDraft !== null && this.changeOnDraft !== undefined) {
    output.writeFieldBegin('changeOnDraft', Thrift.Type.BOOL, 26);
    output.writeBool(this.changeOnDraft);
    output.writeFieldEnd();
  }
  if (this.changeOnEdit !== null && this.changeOnEdit !== undefined) {
    output.writeFieldBegin('changeOnEdit', Thrift.Type.STRUCT, 27);
    this.changeOnEdit.write(output);
    output.writeFieldEnd();
  }
  if (this.changeOnSetDecision !== null && this.changeOnSetDecision !== undefined) {
    output.writeFieldBegin('changeOnSetDecision', Thrift.Type.STRUCT, 28);
    this.changeOnSetDecision.write(output);
    output.writeFieldEnd();
  }
  if (this.editDocRule !== null && this.editDocRule !== undefined) {
    output.writeFieldBegin('editDocRule', Thrift.Type.STRUCT, 29);
    this.editDocRule.write(output);
    output.writeFieldEnd();
  }
  if (this.attachmentAddRule !== null && this.attachmentAddRule !== undefined) {
    output.writeFieldBegin('attachmentAddRule', Thrift.Type.STRUCT, 30);
    this.attachmentAddRule.write(output);
    output.writeFieldEnd();
  }
  if (this.attachmentDeleteRule !== null && this.attachmentDeleteRule !== undefined) {
    output.writeFieldBegin('attachmentDeleteRule', Thrift.Type.STRUCT, 31);
    this.attachmentDeleteRule.write(output);
    output.writeFieldEnd();
  }
  if (this.changeContentRule !== null && this.changeContentRule !== undefined) {
    output.writeFieldBegin('changeContentRule', Thrift.Type.STRUCT, 32);
    this.changeContentRule.write(output);
    output.writeFieldEnd();
  }
  if (this.canEdit !== null && this.canEdit !== undefined) {
    output.writeFieldBegin('canEdit', Thrift.Type.BOOL, 33);
    output.writeBool(this.canEdit);
    output.writeFieldEnd();
  }
  if (this.maxSigner !== null && this.maxSigner !== undefined) {
    output.writeFieldBegin('maxSigner', Thrift.Type.I32, 34);
    output.writeI32(this.maxSigner);
    output.writeFieldEnd();
  }
  if (this.stageParams !== null && this.stageParams !== undefined) {
    output.writeFieldBegin('stageParams', Thrift.Type.LIST, 35);
    output.writeListBegin(Thrift.Type.STRUCT, this.stageParams.length);
    for (var iter306 in this.stageParams)
    {
      if (this.stageParams.hasOwnProperty(iter306))
      {
        iter306 = this.stageParams[iter306];
        iter306.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.availableDecisions !== null && this.availableDecisions !== undefined) {
    output.writeFieldBegin('availableDecisions', Thrift.Type.SET, 36);
    output.writeSetBegin(Thrift.Type.STRING, this.availableDecisions.length);
    for (var iter307 in this.availableDecisions)
    {
      if (this.availableDecisions.hasOwnProperty(iter307))
      {
        iter307 = this.availableDecisions[iter307];
        output.writeString(iter307);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.fmEditKey !== null && this.fmEditKey !== undefined) {
    output.writeFieldBegin('fmEditKey', Thrift.Type.STRING, 37);
    output.writeString(this.fmEditKey);
    output.writeFieldEnd();
  }
  if (this.fmEditPersonal !== null && this.fmEditPersonal !== undefined) {
    output.writeFieldBegin('fmEditPersonal', Thrift.Type.BOOL, 38);
    output.writeBool(this.fmEditPersonal);
    output.writeFieldEnd();
  }
  if (this.fmEditClose !== null && this.fmEditClose !== undefined) {
    output.writeFieldBegin('fmEditClose', Thrift.Type.BOOL, 39);
    output.writeBool(this.fmEditClose);
    output.writeFieldEnd();
  }
  if (this.fmViewKey !== null && this.fmViewKey !== undefined) {
    output.writeFieldBegin('fmViewKey', Thrift.Type.STRING, 40);
    output.writeString(this.fmViewKey);
    output.writeFieldEnd();
  }
  if (this.fmViewPersonal !== null && this.fmViewPersonal !== undefined) {
    output.writeFieldBegin('fmViewPersonal', Thrift.Type.BOOL, 41);
    output.writeBool(this.fmViewPersonal);
    output.writeFieldEnd();
  }
  if (this.fmViewClose !== null && this.fmViewClose !== undefined) {
    output.writeFieldBegin('fmViewClose', Thrift.Type.BOOL, 42);
    output.writeBool(this.fmViewClose);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternStagesLink = function(args) {
  this.id = null;
  this.parentStageId = null;
  this.childStageId = null;
  this.nameDocPatStageLink = null;
  this.descriptionDocPatStageLink = null;
  this.decision = null;
  this.graphicalParams = null;
  this.execType = null;
  this.movePriority = null;
  this.informUsers = null;
  this.accessRule = null;
  this.allowForCurUser = null;
  this.useByDefault = null;
  this.resolution = null;
  this.signature = null;
  this.autoExecute = null;
  this.jiraPeriod = null;
  this.comment = null;
  this.allowRepeatDecision = null;
  this.attachmentAction = null;
  this.orderLink = null;
  this.preFunctionId = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.parentStageId !== undefined && args.parentStageId !== null) {
      this.parentStageId = args.parentStageId;
    }
    if (args.childStageId !== undefined && args.childStageId !== null) {
      this.childStageId = args.childStageId;
    }
    if (args.nameDocPatStageLink !== undefined && args.nameDocPatStageLink !== null) {
      this.nameDocPatStageLink = args.nameDocPatStageLink;
    }
    if (args.descriptionDocPatStageLink !== undefined && args.descriptionDocPatStageLink !== null) {
      this.descriptionDocPatStageLink = args.descriptionDocPatStageLink;
    }
    if (args.decision !== undefined && args.decision !== null) {
      this.decision = args.decision;
    }
    if (args.graphicalParams !== undefined && args.graphicalParams !== null) {
      this.graphicalParams = args.graphicalParams;
    }
    if (args.execType !== undefined && args.execType !== null) {
      this.execType = args.execType;
    }
    if (args.movePriority !== undefined && args.movePriority !== null) {
      this.movePriority = args.movePriority;
    }
    if (args.informUsers !== undefined && args.informUsers !== null) {
      this.informUsers = Thrift.copyList(args.informUsers, [UserOrGroup]);
    }
    if (args.accessRule !== undefined && args.accessRule !== null) {
      this.accessRule = new AccessRule(args.accessRule);
    }
    if (args.allowForCurUser !== undefined && args.allowForCurUser !== null) {
      this.allowForCurUser = args.allowForCurUser;
    }
    if (args.useByDefault !== undefined && args.useByDefault !== null) {
      this.useByDefault = args.useByDefault;
    }
    if (args.resolution !== undefined && args.resolution !== null) {
      this.resolution = args.resolution;
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
    if (args.autoExecute !== undefined && args.autoExecute !== null) {
      this.autoExecute = args.autoExecute;
    }
    if (args.jiraPeriod !== undefined && args.jiraPeriod !== null) {
      this.jiraPeriod = args.jiraPeriod;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.allowRepeatDecision !== undefined && args.allowRepeatDecision !== null) {
      this.allowRepeatDecision = args.allowRepeatDecision;
    }
    if (args.attachmentAction !== undefined && args.attachmentAction !== null) {
      this.attachmentAction = args.attachmentAction;
    }
    if (args.orderLink !== undefined && args.orderLink !== null) {
      this.orderLink = args.orderLink;
    }
    if (args.preFunctionId !== undefined && args.preFunctionId !== null) {
      this.preFunctionId = new CompositeId(args.preFunctionId);
    }
  }
};
DocumentPatternStagesLink.prototype = {};
DocumentPatternStagesLink.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parentStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.childStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nameDocPatStageLink = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionDocPatStageLink = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.decision = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.graphicalParams = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.execType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.movePriority = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size308 = 0;
        var _rtmp3312;
        this.informUsers = [];
        var _etype311 = 0;
        _rtmp3312 = input.readListBegin();
        _etype311 = _rtmp3312.etype;
        _size308 = _rtmp3312.size;
        for (var _i313 = 0; _i313 < _size308; ++_i313)
        {
          var elem314 = null;
          elem314 = new UserOrGroup();
          elem314.read(input);
          this.informUsers.push(elem314);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.accessRule = new AccessRule();
        this.accessRule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.allowForCurUser = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.useByDefault = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.resolution = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.signature = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.autoExecute = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.jiraPeriod = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BOOL) {
        this.allowRepeatDecision = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.attachmentAction = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.orderLink = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.preFunctionId = new CompositeId();
        this.preFunctionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternStagesLink.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternStagesLink');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.parentStageId !== null && this.parentStageId !== undefined) {
    output.writeFieldBegin('parentStageId', Thrift.Type.STRING, 2);
    output.writeString(this.parentStageId);
    output.writeFieldEnd();
  }
  if (this.childStageId !== null && this.childStageId !== undefined) {
    output.writeFieldBegin('childStageId', Thrift.Type.STRING, 3);
    output.writeString(this.childStageId);
    output.writeFieldEnd();
  }
  if (this.nameDocPatStageLink !== null && this.nameDocPatStageLink !== undefined) {
    output.writeFieldBegin('nameDocPatStageLink', Thrift.Type.STRING, 4);
    output.writeString(this.nameDocPatStageLink);
    output.writeFieldEnd();
  }
  if (this.descriptionDocPatStageLink !== null && this.descriptionDocPatStageLink !== undefined) {
    output.writeFieldBegin('descriptionDocPatStageLink', Thrift.Type.STRING, 5);
    output.writeString(this.descriptionDocPatStageLink);
    output.writeFieldEnd();
  }
  if (this.decision !== null && this.decision !== undefined) {
    output.writeFieldBegin('decision', Thrift.Type.STRING, 6);
    output.writeString(this.decision);
    output.writeFieldEnd();
  }
  if (this.graphicalParams !== null && this.graphicalParams !== undefined) {
    output.writeFieldBegin('graphicalParams', Thrift.Type.STRING, 7);
    output.writeString(this.graphicalParams);
    output.writeFieldEnd();
  }
  if (this.execType !== null && this.execType !== undefined) {
    output.writeFieldBegin('execType', Thrift.Type.I32, 8);
    output.writeI32(this.execType);
    output.writeFieldEnd();
  }
  if (this.movePriority !== null && this.movePriority !== undefined) {
    output.writeFieldBegin('movePriority', Thrift.Type.I32, 9);
    output.writeI32(this.movePriority);
    output.writeFieldEnd();
  }
  if (this.informUsers !== null && this.informUsers !== undefined) {
    output.writeFieldBegin('informUsers', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.informUsers.length);
    for (var iter315 in this.informUsers)
    {
      if (this.informUsers.hasOwnProperty(iter315))
      {
        iter315 = this.informUsers[iter315];
        iter315.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.accessRule !== null && this.accessRule !== undefined) {
    output.writeFieldBegin('accessRule', Thrift.Type.STRUCT, 11);
    this.accessRule.write(output);
    output.writeFieldEnd();
  }
  if (this.allowForCurUser !== null && this.allowForCurUser !== undefined) {
    output.writeFieldBegin('allowForCurUser', Thrift.Type.BOOL, 12);
    output.writeBool(this.allowForCurUser);
    output.writeFieldEnd();
  }
  if (this.useByDefault !== null && this.useByDefault !== undefined) {
    output.writeFieldBegin('useByDefault', Thrift.Type.BOOL, 13);
    output.writeBool(this.useByDefault);
    output.writeFieldEnd();
  }
  if (this.resolution !== null && this.resolution !== undefined) {
    output.writeFieldBegin('resolution', Thrift.Type.I32, 14);
    output.writeI32(this.resolution);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.I32, 15);
    output.writeI32(this.signature);
    output.writeFieldEnd();
  }
  if (this.autoExecute !== null && this.autoExecute !== undefined) {
    output.writeFieldBegin('autoExecute', Thrift.Type.BOOL, 16);
    output.writeBool(this.autoExecute);
    output.writeFieldEnd();
  }
  if (this.jiraPeriod !== null && this.jiraPeriod !== undefined) {
    output.writeFieldBegin('jiraPeriod', Thrift.Type.STRING, 17);
    output.writeString(this.jiraPeriod);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 18);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.allowRepeatDecision !== null && this.allowRepeatDecision !== undefined) {
    output.writeFieldBegin('allowRepeatDecision', Thrift.Type.BOOL, 19);
    output.writeBool(this.allowRepeatDecision);
    output.writeFieldEnd();
  }
  if (this.attachmentAction !== null && this.attachmentAction !== undefined) {
    output.writeFieldBegin('attachmentAction', Thrift.Type.I32, 20);
    output.writeI32(this.attachmentAction);
    output.writeFieldEnd();
  }
  if (this.orderLink !== null && this.orderLink !== undefined) {
    output.writeFieldBegin('orderLink', Thrift.Type.I32, 21);
    output.writeI32(this.orderLink);
    output.writeFieldEnd();
  }
  if (this.preFunctionId !== null && this.preFunctionId !== undefined) {
    output.writeFieldBegin('preFunctionId', Thrift.Type.STRUCT, 22);
    this.preFunctionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StageLinkAction = function(args) {
  this.type = null;
  this.userOrGroupId = null;
  this.execId = null;
  this.additionConfirmation = null;
  this.cancelDecision = null;
  this.link = null;
  this.transfer = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.userOrGroupId !== undefined && args.userOrGroupId !== null) {
      this.userOrGroupId = args.userOrGroupId;
    }
    if (args.execId !== undefined && args.execId !== null) {
      this.execId = args.execId;
    }
    if (args.additionConfirmation !== undefined && args.additionConfirmation !== null) {
      this.additionConfirmation = args.additionConfirmation;
    }
    if (args.cancelDecision !== undefined && args.cancelDecision !== null) {
      this.cancelDecision = args.cancelDecision;
    }
    if (args.link !== undefined && args.link !== null) {
      this.link = new DocumentPatternStagesLink(args.link);
    }
    if (args.transfer !== undefined && args.transfer !== null) {
      this.transfer = args.transfer;
    }
  }
};
StageLinkAction.prototype = {};
StageLinkAction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userOrGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.execId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.additionConfirmation = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.cancelDecision = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.link = new DocumentPatternStagesLink();
        this.link.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.transfer = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StageLinkAction.prototype.write = function(output) {
  output.writeStructBegin('StageLinkAction');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.userOrGroupId !== null && this.userOrGroupId !== undefined) {
    output.writeFieldBegin('userOrGroupId', Thrift.Type.STRING, 2);
    output.writeString(this.userOrGroupId);
    output.writeFieldEnd();
  }
  if (this.execId !== null && this.execId !== undefined) {
    output.writeFieldBegin('execId', Thrift.Type.STRING, 3);
    output.writeString(this.execId);
    output.writeFieldEnd();
  }
  if (this.additionConfirmation !== null && this.additionConfirmation !== undefined) {
    output.writeFieldBegin('additionConfirmation', Thrift.Type.BOOL, 4);
    output.writeBool(this.additionConfirmation);
    output.writeFieldEnd();
  }
  if (this.cancelDecision !== null && this.cancelDecision !== undefined) {
    output.writeFieldBegin('cancelDecision', Thrift.Type.BOOL, 5);
    output.writeBool(this.cancelDecision);
    output.writeFieldEnd();
  }
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRUCT, 6);
    this.link.write(output);
    output.writeFieldEnd();
  }
  if (this.transfer !== null && this.transfer !== undefined) {
    output.writeFieldBegin('transfer', Thrift.Type.BOOL, 7);
    output.writeBool(this.transfer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocPermissions = function(args) {
  this.actions = null;
  this.onlineEdit = null;
  this.onlineComment = null;
  this.editDoc = null;
  this.attachmentAdd = null;
  this.attachmentDelete = null;
  this.changeContent = null;
  this.addExecutors = null;
  this.allowAdditionalConf = null;
  this.allowReassign = null;
  this.generateNumber = null;
  this.shareDocument = null;
  this.shareDocumentRevoke = null;
  this.updateResponsible = null;
  this.updateSC = null;
  this.allowRepeatReassign = null;
  if (args) {
    if (args.actions !== undefined && args.actions !== null) {
      this.actions = Thrift.copyList(args.actions, [StageLinkAction]);
    }
    if (args.onlineEdit !== undefined && args.onlineEdit !== null) {
      this.onlineEdit = args.onlineEdit;
    }
    if (args.onlineComment !== undefined && args.onlineComment !== null) {
      this.onlineComment = args.onlineComment;
    }
    if (args.editDoc !== undefined && args.editDoc !== null) {
      this.editDoc = args.editDoc;
    }
    if (args.attachmentAdd !== undefined && args.attachmentAdd !== null) {
      this.attachmentAdd = args.attachmentAdd;
    }
    if (args.attachmentDelete !== undefined && args.attachmentDelete !== null) {
      this.attachmentDelete = args.attachmentDelete;
    }
    if (args.changeContent !== undefined && args.changeContent !== null) {
      this.changeContent = args.changeContent;
    }
    if (args.addExecutors !== undefined && args.addExecutors !== null) {
      this.addExecutors = args.addExecutors;
    }
    if (args.allowAdditionalConf !== undefined && args.allowAdditionalConf !== null) {
      this.allowAdditionalConf = args.allowAdditionalConf;
    }
    if (args.allowReassign !== undefined && args.allowReassign !== null) {
      this.allowReassign = args.allowReassign;
    }
    if (args.generateNumber !== undefined && args.generateNumber !== null) {
      this.generateNumber = args.generateNumber;
    }
    if (args.shareDocument !== undefined && args.shareDocument !== null) {
      this.shareDocument = args.shareDocument;
    }
    if (args.shareDocumentRevoke !== undefined && args.shareDocumentRevoke !== null) {
      this.shareDocumentRevoke = args.shareDocumentRevoke;
    }
    if (args.updateResponsible !== undefined && args.updateResponsible !== null) {
      this.updateResponsible = args.updateResponsible;
    }
    if (args.updateSC !== undefined && args.updateSC !== null) {
      this.updateSC = args.updateSC;
    }
    if (args.allowRepeatReassign !== undefined && args.allowRepeatReassign !== null) {
      this.allowRepeatReassign = args.allowRepeatReassign;
    }
  }
};
DocPermissions.prototype = {};
DocPermissions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size316 = 0;
        var _rtmp3320;
        this.actions = [];
        var _etype319 = 0;
        _rtmp3320 = input.readListBegin();
        _etype319 = _rtmp3320.etype;
        _size316 = _rtmp3320.size;
        for (var _i321 = 0; _i321 < _size316; ++_i321)
        {
          var elem322 = null;
          elem322 = new StageLinkAction();
          elem322.read(input);
          this.actions.push(elem322);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.onlineEdit = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.onlineComment = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.editDoc = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.attachmentAdd = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.attachmentDelete = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.changeContent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.addExecutors = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.allowAdditionalConf = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.allowReassign = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.generateNumber = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.shareDocument = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.shareDocumentRevoke = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.updateResponsible = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.updateSC = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.allowRepeatReassign = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocPermissions.prototype.write = function(output) {
  output.writeStructBegin('DocPermissions');
  if (this.actions !== null && this.actions !== undefined) {
    output.writeFieldBegin('actions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.actions.length);
    for (var iter323 in this.actions)
    {
      if (this.actions.hasOwnProperty(iter323))
      {
        iter323 = this.actions[iter323];
        iter323.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.onlineEdit !== null && this.onlineEdit !== undefined) {
    output.writeFieldBegin('onlineEdit', Thrift.Type.BOOL, 2);
    output.writeBool(this.onlineEdit);
    output.writeFieldEnd();
  }
  if (this.onlineComment !== null && this.onlineComment !== undefined) {
    output.writeFieldBegin('onlineComment', Thrift.Type.BOOL, 3);
    output.writeBool(this.onlineComment);
    output.writeFieldEnd();
  }
  if (this.editDoc !== null && this.editDoc !== undefined) {
    output.writeFieldBegin('editDoc', Thrift.Type.BOOL, 4);
    output.writeBool(this.editDoc);
    output.writeFieldEnd();
  }
  if (this.attachmentAdd !== null && this.attachmentAdd !== undefined) {
    output.writeFieldBegin('attachmentAdd', Thrift.Type.BOOL, 5);
    output.writeBool(this.attachmentAdd);
    output.writeFieldEnd();
  }
  if (this.attachmentDelete !== null && this.attachmentDelete !== undefined) {
    output.writeFieldBegin('attachmentDelete', Thrift.Type.BOOL, 6);
    output.writeBool(this.attachmentDelete);
    output.writeFieldEnd();
  }
  if (this.changeContent !== null && this.changeContent !== undefined) {
    output.writeFieldBegin('changeContent', Thrift.Type.BOOL, 7);
    output.writeBool(this.changeContent);
    output.writeFieldEnd();
  }
  if (this.addExecutors !== null && this.addExecutors !== undefined) {
    output.writeFieldBegin('addExecutors', Thrift.Type.BOOL, 8);
    output.writeBool(this.addExecutors);
    output.writeFieldEnd();
  }
  if (this.allowAdditionalConf !== null && this.allowAdditionalConf !== undefined) {
    output.writeFieldBegin('allowAdditionalConf', Thrift.Type.BOOL, 9);
    output.writeBool(this.allowAdditionalConf);
    output.writeFieldEnd();
  }
  if (this.allowReassign !== null && this.allowReassign !== undefined) {
    output.writeFieldBegin('allowReassign', Thrift.Type.BOOL, 10);
    output.writeBool(this.allowReassign);
    output.writeFieldEnd();
  }
  if (this.generateNumber !== null && this.generateNumber !== undefined) {
    output.writeFieldBegin('generateNumber', Thrift.Type.BOOL, 11);
    output.writeBool(this.generateNumber);
    output.writeFieldEnd();
  }
  if (this.shareDocument !== null && this.shareDocument !== undefined) {
    output.writeFieldBegin('shareDocument', Thrift.Type.BOOL, 12);
    output.writeBool(this.shareDocument);
    output.writeFieldEnd();
  }
  if (this.shareDocumentRevoke !== null && this.shareDocumentRevoke !== undefined) {
    output.writeFieldBegin('shareDocumentRevoke', Thrift.Type.BOOL, 13);
    output.writeBool(this.shareDocumentRevoke);
    output.writeFieldEnd();
  }
  if (this.updateResponsible !== null && this.updateResponsible !== undefined) {
    output.writeFieldBegin('updateResponsible', Thrift.Type.BOOL, 14);
    output.writeBool(this.updateResponsible);
    output.writeFieldEnd();
  }
  if (this.updateSC !== null && this.updateSC !== undefined) {
    output.writeFieldBegin('updateSC', Thrift.Type.BOOL, 15);
    output.writeBool(this.updateSC);
    output.writeFieldEnd();
  }
  if (this.allowRepeatReassign !== null && this.allowRepeatReassign !== undefined) {
    output.writeFieldBegin('allowRepeatReassign', Thrift.Type.BOOL, 16);
    output.writeBool(this.allowRepeatReassign);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternStagesExecutor = function(args) {
  this.id = null;
  this.docStageId = null;
  this.userOrGroup = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.docStageId !== undefined && args.docStageId !== null) {
      this.docStageId = args.docStageId;
    }
    if (args.userOrGroup !== undefined && args.userOrGroup !== null) {
      this.userOrGroup = new UserOrGroup(args.userOrGroup);
    }
  }
};
DocumentPatternStagesExecutor.prototype = {};
DocumentPatternStagesExecutor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.userOrGroup = new UserOrGroup();
        this.userOrGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternStagesExecutor.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternStagesExecutor');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.docStageId !== null && this.docStageId !== undefined) {
    output.writeFieldBegin('docStageId', Thrift.Type.STRING, 2);
    output.writeString(this.docStageId);
    output.writeFieldEnd();
  }
  if (this.userOrGroup !== null && this.userOrGroup !== undefined) {
    output.writeFieldBegin('userOrGroup', Thrift.Type.STRUCT, 3);
    this.userOrGroup.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternGroup = function(args) {
  this.id = null;
  this.nameDocPatGroup = null;
  this.descriptionDocPatGroup = null;
  this.category = null;
  this.enableWorkWithSC = null;
  this.order = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.nameDocPatGroup !== undefined && args.nameDocPatGroup !== null) {
      this.nameDocPatGroup = args.nameDocPatGroup;
    }
    if (args.descriptionDocPatGroup !== undefined && args.descriptionDocPatGroup !== null) {
      this.descriptionDocPatGroup = args.descriptionDocPatGroup;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.enableWorkWithSC !== undefined && args.enableWorkWithSC !== null) {
      this.enableWorkWithSC = args.enableWorkWithSC;
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
  }
};
DocumentPatternGroup.prototype = {};
DocumentPatternGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nameDocPatGroup = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionDocPatGroup = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.category = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.enableWorkWithSC = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternGroup.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternGroup');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.nameDocPatGroup !== null && this.nameDocPatGroup !== undefined) {
    output.writeFieldBegin('nameDocPatGroup', Thrift.Type.STRING, 2);
    output.writeString(this.nameDocPatGroup);
    output.writeFieldEnd();
  }
  if (this.descriptionDocPatGroup !== null && this.descriptionDocPatGroup !== undefined) {
    output.writeFieldBegin('descriptionDocPatGroup', Thrift.Type.STRING, 3);
    output.writeString(this.descriptionDocPatGroup);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRING, 4);
    output.writeString(this.category);
    output.writeFieldEnd();
  }
  if (this.enableWorkWithSC !== null && this.enableWorkWithSC !== undefined) {
    output.writeFieldBegin('enableWorkWithSC', Thrift.Type.BOOL, 5);
    output.writeBool(this.enableWorkWithSC);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 6);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarEvent = function(args) {
  this.id = null;
  this.startDate = null;
  this.endDate = null;
  this.nameCalendarEvent = null;
  this.descriptionCalendarEvent = null;
  this.remindDate = null;
  this.jiraPeriod = null;
  this.authorId = null;
  this.color = null;
  this.location = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.startDate !== undefined && args.startDate !== null) {
      this.startDate = args.startDate;
    }
    if (args.endDate !== undefined && args.endDate !== null) {
      this.endDate = args.endDate;
    }
    if (args.nameCalendarEvent !== undefined && args.nameCalendarEvent !== null) {
      this.nameCalendarEvent = args.nameCalendarEvent;
    }
    if (args.descriptionCalendarEvent !== undefined && args.descriptionCalendarEvent !== null) {
      this.descriptionCalendarEvent = args.descriptionCalendarEvent;
    }
    if (args.remindDate !== undefined && args.remindDate !== null) {
      this.remindDate = args.remindDate;
    }
    if (args.jiraPeriod !== undefined && args.jiraPeriod !== null) {
      this.jiraPeriod = args.jiraPeriod;
    }
    if (args.authorId !== undefined && args.authorId !== null) {
      this.authorId = args.authorId;
    }
    if (args.color !== undefined && args.color !== null) {
      this.color = args.color;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
  }
};
CalendarEvent.prototype = {};
CalendarEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.startDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.endDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nameCalendarEvent = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionCalendarEvent = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.remindDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.jiraPeriod = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.authorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.color = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarEvent.prototype.write = function(output) {
  output.writeStructBegin('CalendarEvent');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.startDate !== null && this.startDate !== undefined) {
    output.writeFieldBegin('startDate', Thrift.Type.I64, 2);
    output.writeI64(this.startDate);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.I64, 3);
    output.writeI64(this.endDate);
    output.writeFieldEnd();
  }
  if (this.nameCalendarEvent !== null && this.nameCalendarEvent !== undefined) {
    output.writeFieldBegin('nameCalendarEvent', Thrift.Type.STRING, 4);
    output.writeString(this.nameCalendarEvent);
    output.writeFieldEnd();
  }
  if (this.descriptionCalendarEvent !== null && this.descriptionCalendarEvent !== undefined) {
    output.writeFieldBegin('descriptionCalendarEvent', Thrift.Type.STRING, 5);
    output.writeString(this.descriptionCalendarEvent);
    output.writeFieldEnd();
  }
  if (this.remindDate !== null && this.remindDate !== undefined) {
    output.writeFieldBegin('remindDate', Thrift.Type.I64, 6);
    output.writeI64(this.remindDate);
    output.writeFieldEnd();
  }
  if (this.jiraPeriod !== null && this.jiraPeriod !== undefined) {
    output.writeFieldBegin('jiraPeriod', Thrift.Type.STRING, 7);
    output.writeString(this.jiraPeriod);
    output.writeFieldEnd();
  }
  if (this.authorId !== null && this.authorId !== undefined) {
    output.writeFieldBegin('authorId', Thrift.Type.STRING, 8);
    output.writeString(this.authorId);
    output.writeFieldEnd();
  }
  if (this.color !== null && this.color !== undefined) {
    output.writeFieldBegin('color', Thrift.Type.STRING, 9);
    output.writeString(this.color);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 10);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarSharing = function(args) {
  this.id = null;
  this.userOrGroup = null;
  this.mode = null;
  this.creator = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.userOrGroup !== undefined && args.userOrGroup !== null) {
      this.userOrGroup = new UserOrGroup(args.userOrGroup);
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = new UserOrGroup(args.creator);
    }
  }
};
CalendarSharing.prototype = {};
CalendarSharing.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userOrGroup = new UserOrGroup();
        this.userOrGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.creator = new UserOrGroup();
        this.creator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarSharing.prototype.write = function(output) {
  output.writeStructBegin('CalendarSharing');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.userOrGroup !== null && this.userOrGroup !== undefined) {
    output.writeFieldBegin('userOrGroup', Thrift.Type.STRUCT, 2);
    this.userOrGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.I32, 3);
    output.writeI32(this.mode);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRUCT, 4);
    this.creator.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Deadline = function(args) {
  this.id = null;
  this.documentId = null;
  this.numberDocument = null;
  this.documentName = null;
  this.documentPatternId = null;
  this.authorName = null;
  this.actionType = null;
  this.assignedDate = null;
  this.reassignedDate = null;
  this.deadlineDate = null;
  this.control = null;
  this.informedAboutDeadline = null;
  this.documentSystemNumber = null;
  this.documentStatus = null;
  this.icon = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.numberDocument !== undefined && args.numberDocument !== null) {
      this.numberDocument = args.numberDocument;
    }
    if (args.documentName !== undefined && args.documentName !== null) {
      this.documentName = args.documentName;
    }
    if (args.documentPatternId !== undefined && args.documentPatternId !== null) {
      this.documentPatternId = args.documentPatternId;
    }
    if (args.authorName !== undefined && args.authorName !== null) {
      this.authorName = args.authorName;
    }
    if (args.actionType !== undefined && args.actionType !== null) {
      this.actionType = args.actionType;
    }
    if (args.assignedDate !== undefined && args.assignedDate !== null) {
      this.assignedDate = args.assignedDate;
    }
    if (args.reassignedDate !== undefined && args.reassignedDate !== null) {
      this.reassignedDate = args.reassignedDate;
    }
    if (args.deadlineDate !== undefined && args.deadlineDate !== null) {
      this.deadlineDate = args.deadlineDate;
    }
    if (args.control !== undefined && args.control !== null) {
      this.control = args.control;
    }
    if (args.informedAboutDeadline !== undefined && args.informedAboutDeadline !== null) {
      this.informedAboutDeadline = args.informedAboutDeadline;
    }
    if (args.documentSystemNumber !== undefined && args.documentSystemNumber !== null) {
      this.documentSystemNumber = args.documentSystemNumber;
    }
    if (args.documentStatus !== undefined && args.documentStatus !== null) {
      this.documentStatus = args.documentStatus;
    }
    if (args.icon !== undefined && args.icon !== null) {
      this.icon = args.icon;
    }
  }
};
Deadline.prototype = {};
Deadline.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.numberDocument = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.documentName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.documentPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.authorName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.actionType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.assignedDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.reassignedDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.deadlineDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.control = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.informedAboutDeadline = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.documentSystemNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.documentStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.icon = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Deadline.prototype.write = function(output) {
  output.writeStructBegin('Deadline');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.numberDocument !== null && this.numberDocument !== undefined) {
    output.writeFieldBegin('numberDocument', Thrift.Type.STRING, 3);
    output.writeString(this.numberDocument);
    output.writeFieldEnd();
  }
  if (this.documentName !== null && this.documentName !== undefined) {
    output.writeFieldBegin('documentName', Thrift.Type.STRING, 4);
    output.writeString(this.documentName);
    output.writeFieldEnd();
  }
  if (this.documentPatternId !== null && this.documentPatternId !== undefined) {
    output.writeFieldBegin('documentPatternId', Thrift.Type.STRING, 5);
    output.writeString(this.documentPatternId);
    output.writeFieldEnd();
  }
  if (this.authorName !== null && this.authorName !== undefined) {
    output.writeFieldBegin('authorName', Thrift.Type.STRING, 6);
    output.writeString(this.authorName);
    output.writeFieldEnd();
  }
  if (this.actionType !== null && this.actionType !== undefined) {
    output.writeFieldBegin('actionType', Thrift.Type.I32, 7);
    output.writeI32(this.actionType);
    output.writeFieldEnd();
  }
  if (this.assignedDate !== null && this.assignedDate !== undefined) {
    output.writeFieldBegin('assignedDate', Thrift.Type.I64, 8);
    output.writeI64(this.assignedDate);
    output.writeFieldEnd();
  }
  if (this.reassignedDate !== null && this.reassignedDate !== undefined) {
    output.writeFieldBegin('reassignedDate', Thrift.Type.I64, 9);
    output.writeI64(this.reassignedDate);
    output.writeFieldEnd();
  }
  if (this.deadlineDate !== null && this.deadlineDate !== undefined) {
    output.writeFieldBegin('deadlineDate', Thrift.Type.I64, 10);
    output.writeI64(this.deadlineDate);
    output.writeFieldEnd();
  }
  if (this.control !== null && this.control !== undefined) {
    output.writeFieldBegin('control', Thrift.Type.BOOL, 11);
    output.writeBool(this.control);
    output.writeFieldEnd();
  }
  if (this.informedAboutDeadline !== null && this.informedAboutDeadline !== undefined) {
    output.writeFieldBegin('informedAboutDeadline', Thrift.Type.BOOL, 12);
    output.writeBool(this.informedAboutDeadline);
    output.writeFieldEnd();
  }
  if (this.documentSystemNumber !== null && this.documentSystemNumber !== undefined) {
    output.writeFieldBegin('documentSystemNumber', Thrift.Type.STRING, 13);
    output.writeString(this.documentSystemNumber);
    output.writeFieldEnd();
  }
  if (this.documentStatus !== null && this.documentStatus !== undefined) {
    output.writeFieldBegin('documentStatus', Thrift.Type.I32, 14);
    output.writeI32(this.documentStatus);
    output.writeFieldEnd();
  }
  if (this.icon !== null && this.icon !== undefined) {
    output.writeFieldBegin('icon', Thrift.Type.I32, 15);
    output.writeI32(this.icon);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Area = function(args) {
  this.id = null;
  this.nameArea = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.nameArea !== undefined && args.nameArea !== null) {
      this.nameArea = args.nameArea;
    }
  }
};
Area.prototype = {};
Area.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nameArea = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Area.prototype.write = function(output) {
  output.writeStructBegin('Area');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.nameArea !== null && this.nameArea !== undefined) {
    output.writeFieldBegin('nameArea', Thrift.Type.STRING, 2);
    output.writeString(this.nameArea);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MaterialResource = function(args) {
  this.id = null;
  this.nameMaterRes = null;
  this.type = null;
  this.areaId = null;
  this.countPersons = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.nameMaterRes !== undefined && args.nameMaterRes !== null) {
      this.nameMaterRes = args.nameMaterRes;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.areaId !== undefined && args.areaId !== null) {
      this.areaId = args.areaId;
    }
    if (args.countPersons !== undefined && args.countPersons !== null) {
      this.countPersons = args.countPersons;
    }
  }
};
MaterialResource.prototype = {};
MaterialResource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nameMaterRes = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.areaId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.countPersons = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MaterialResource.prototype.write = function(output) {
  output.writeStructBegin('MaterialResource');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.nameMaterRes !== null && this.nameMaterRes !== undefined) {
    output.writeFieldBegin('nameMaterRes', Thrift.Type.STRING, 2);
    output.writeString(this.nameMaterRes);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.areaId !== null && this.areaId !== undefined) {
    output.writeFieldBegin('areaId', Thrift.Type.STRING, 4);
    output.writeString(this.areaId);
    output.writeFieldEnd();
  }
  if (this.countPersons !== null && this.countPersons !== undefined) {
    output.writeFieldBegin('countPersons', Thrift.Type.I64, 5);
    output.writeI64(this.countPersons);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Meeting = function(args) {
  this.id = null;
  this.nameMeeting = null;
  this.agenda = null;
  this.address = null;
  this.dateStart = null;
  this.dateEnd = null;
  this.allowSuggestTime = null;
  this.protocolDocumentId = null;
  this.authorId = null;
  this.color = null;
  this.viewed = null;
  this.participants = null;
  this.resources = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.nameMeeting !== undefined && args.nameMeeting !== null) {
      this.nameMeeting = args.nameMeeting;
    }
    if (args.agenda !== undefined && args.agenda !== null) {
      this.agenda = args.agenda;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.dateStart !== undefined && args.dateStart !== null) {
      this.dateStart = args.dateStart;
    }
    if (args.dateEnd !== undefined && args.dateEnd !== null) {
      this.dateEnd = args.dateEnd;
    }
    if (args.allowSuggestTime !== undefined && args.allowSuggestTime !== null) {
      this.allowSuggestTime = args.allowSuggestTime;
    }
    if (args.protocolDocumentId !== undefined && args.protocolDocumentId !== null) {
      this.protocolDocumentId = args.protocolDocumentId;
    }
    if (args.authorId !== undefined && args.authorId !== null) {
      this.authorId = args.authorId;
    }
    if (args.color !== undefined && args.color !== null) {
      this.color = args.color;
    }
    if (args.viewed !== undefined && args.viewed !== null) {
      this.viewed = args.viewed;
    }
    if (args.participants !== undefined && args.participants !== null) {
      this.participants = Thrift.copyList(args.participants, [null]);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [MaterialResource]);
    }
  }
};
Meeting.prototype = {};
Meeting.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nameMeeting = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.agenda = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.dateStart = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.dateEnd = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.allowSuggestTime = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.protocolDocumentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.authorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.color = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.viewed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size324 = 0;
        var _rtmp3328;
        this.participants = [];
        var _etype327 = 0;
        _rtmp3328 = input.readListBegin();
        _etype327 = _rtmp3328.etype;
        _size324 = _rtmp3328.size;
        for (var _i329 = 0; _i329 < _size324; ++_i329)
        {
          var elem330 = null;
          elem330 = new MeetingParticipant();
          elem330.read(input);
          this.participants.push(elem330);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size331 = 0;
        var _rtmp3335;
        this.resources = [];
        var _etype334 = 0;
        _rtmp3335 = input.readListBegin();
        _etype334 = _rtmp3335.etype;
        _size331 = _rtmp3335.size;
        for (var _i336 = 0; _i336 < _size331; ++_i336)
        {
          var elem337 = null;
          elem337 = new MaterialResource();
          elem337.read(input);
          this.resources.push(elem337);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Meeting.prototype.write = function(output) {
  output.writeStructBegin('Meeting');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.nameMeeting !== null && this.nameMeeting !== undefined) {
    output.writeFieldBegin('nameMeeting', Thrift.Type.STRING, 2);
    output.writeString(this.nameMeeting);
    output.writeFieldEnd();
  }
  if (this.agenda !== null && this.agenda !== undefined) {
    output.writeFieldBegin('agenda', Thrift.Type.STRING, 3);
    output.writeString(this.agenda);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 4);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.dateStart !== null && this.dateStart !== undefined) {
    output.writeFieldBegin('dateStart', Thrift.Type.I64, 5);
    output.writeI64(this.dateStart);
    output.writeFieldEnd();
  }
  if (this.dateEnd !== null && this.dateEnd !== undefined) {
    output.writeFieldBegin('dateEnd', Thrift.Type.I64, 6);
    output.writeI64(this.dateEnd);
    output.writeFieldEnd();
  }
  if (this.allowSuggestTime !== null && this.allowSuggestTime !== undefined) {
    output.writeFieldBegin('allowSuggestTime', Thrift.Type.BOOL, 7);
    output.writeBool(this.allowSuggestTime);
    output.writeFieldEnd();
  }
  if (this.protocolDocumentId !== null && this.protocolDocumentId !== undefined) {
    output.writeFieldBegin('protocolDocumentId', Thrift.Type.STRING, 8);
    output.writeString(this.protocolDocumentId);
    output.writeFieldEnd();
  }
  if (this.authorId !== null && this.authorId !== undefined) {
    output.writeFieldBegin('authorId', Thrift.Type.STRING, 9);
    output.writeString(this.authorId);
    output.writeFieldEnd();
  }
  if (this.color !== null && this.color !== undefined) {
    output.writeFieldBegin('color', Thrift.Type.STRING, 10);
    output.writeString(this.color);
    output.writeFieldEnd();
  }
  if (this.viewed !== null && this.viewed !== undefined) {
    output.writeFieldBegin('viewed', Thrift.Type.BOOL, 11);
    output.writeBool(this.viewed);
    output.writeFieldEnd();
  }
  if (this.participants !== null && this.participants !== undefined) {
    output.writeFieldBegin('participants', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.participants.length);
    for (var iter338 in this.participants)
    {
      if (this.participants.hasOwnProperty(iter338))
      {
        iter338 = this.participants[iter338];
        iter338.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter339 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter339))
      {
        iter339 = this.resources[iter339];
        iter339.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MeetingParticipant = function(args) {
  this.id = null;
  this.userOrGroup = null;
  this.decision = null;
  this.proposedBeginDate = null;
  this.proposedEndDate = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.userOrGroup !== undefined && args.userOrGroup !== null) {
      this.userOrGroup = new UserOrGroup(args.userOrGroup);
    }
    if (args.decision !== undefined && args.decision !== null) {
      this.decision = args.decision;
    }
    if (args.proposedBeginDate !== undefined && args.proposedBeginDate !== null) {
      this.proposedBeginDate = args.proposedBeginDate;
    }
    if (args.proposedEndDate !== undefined && args.proposedEndDate !== null) {
      this.proposedEndDate = args.proposedEndDate;
    }
  }
};
MeetingParticipant.prototype = {};
MeetingParticipant.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.userOrGroup = new UserOrGroup();
        this.userOrGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.decision = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.proposedBeginDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.proposedEndDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MeetingParticipant.prototype.write = function(output) {
  output.writeStructBegin('MeetingParticipant');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.userOrGroup !== null && this.userOrGroup !== undefined) {
    output.writeFieldBegin('userOrGroup', Thrift.Type.STRUCT, 2);
    this.userOrGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.decision !== null && this.decision !== undefined) {
    output.writeFieldBegin('decision', Thrift.Type.I32, 3);
    output.writeI32(this.decision);
    output.writeFieldEnd();
  }
  if (this.proposedBeginDate !== null && this.proposedBeginDate !== undefined) {
    output.writeFieldBegin('proposedBeginDate', Thrift.Type.I64, 4);
    output.writeI64(this.proposedBeginDate);
    output.writeFieldEnd();
  }
  if (this.proposedEndDate !== null && this.proposedEndDate !== undefined) {
    output.writeFieldBegin('proposedEndDate', Thrift.Type.I64, 5);
    output.writeI64(this.proposedEndDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CustomFilterItem = function(args) {
  this.id = null;
  this.field = null;
  this.fType = null;
  this.condition = null;
  this.value = null;
  this.useObject = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.field !== undefined && args.field !== null) {
      this.field = args.field;
    }
    if (args.fType !== undefined && args.fType !== null) {
      this.fType = args.fType;
    }
    if (args.condition !== undefined && args.condition !== null) {
      this.condition = args.condition;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.useObject !== undefined && args.useObject !== null) {
      this.useObject = args.useObject;
    }
  }
};
CustomFilterItem.prototype = {};
CustomFilterItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.field = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.fType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.condition = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.useObject = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomFilterItem.prototype.write = function(output) {
  output.writeStructBegin('CustomFilterItem');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRING, 2);
    output.writeString(this.field);
    output.writeFieldEnd();
  }
  if (this.fType !== null && this.fType !== undefined) {
    output.writeFieldBegin('fType', Thrift.Type.I32, 3);
    output.writeI32(this.fType);
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.I32, 4);
    output.writeI32(this.condition);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 5);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.useObject !== null && this.useObject !== undefined) {
    output.writeFieldBegin('useObject', Thrift.Type.BOOL, 6);
    output.writeBool(this.useObject);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Device = function(args) {
  this.id = null;
  this.clientId = null;
  this.createDate = null;
  this.lastWorkDate = null;
  this.type = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.clientId !== undefined && args.clientId !== null) {
      this.clientId = args.clientId;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.lastWorkDate !== undefined && args.lastWorkDate !== null) {
      this.lastWorkDate = args.lastWorkDate;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
Device.prototype = {};
Device.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.clientId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.lastWorkDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Device.prototype.write = function(output) {
  output.writeStructBegin('Device');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 2);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 3);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.lastWorkDate !== null && this.lastWorkDate !== undefined) {
    output.writeFieldBegin('lastWorkDate', Thrift.Type.I64, 4);
    output.writeI64(this.lastWorkDate);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FileStorage = function(args) {
  this.id = null;
  this.uri = null;
  this.createDate = null;
  this.type = null;
  this.priority = null;
  this.readOnly = null;
  this.descriptionFileStorage = null;
  this.capacity = null;
  this.freeSpace = null;
  this.accountId = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.priority !== undefined && args.priority !== null) {
      this.priority = args.priority;
    }
    if (args.readOnly !== undefined && args.readOnly !== null) {
      this.readOnly = args.readOnly;
    }
    if (args.descriptionFileStorage !== undefined && args.descriptionFileStorage !== null) {
      this.descriptionFileStorage = args.descriptionFileStorage;
    }
    if (args.capacity !== undefined && args.capacity !== null) {
      this.capacity = args.capacity;
    }
    if (args.freeSpace !== undefined && args.freeSpace !== null) {
      this.freeSpace = args.freeSpace;
    }
    if (args.accountId !== undefined && args.accountId !== null) {
      this.accountId = args.accountId;
    }
  }
};
FileStorage.prototype = {};
FileStorage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.readOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionFileStorage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.capacity = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.freeSpace = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileStorage.prototype.write = function(output) {
  output.writeStructBegin('FileStorage');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 3);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 5);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.readOnly !== null && this.readOnly !== undefined) {
    output.writeFieldBegin('readOnly', Thrift.Type.BOOL, 6);
    output.writeBool(this.readOnly);
    output.writeFieldEnd();
  }
  if (this.descriptionFileStorage !== null && this.descriptionFileStorage !== undefined) {
    output.writeFieldBegin('descriptionFileStorage', Thrift.Type.STRING, 7);
    output.writeString(this.descriptionFileStorage);
    output.writeFieldEnd();
  }
  if (this.capacity !== null && this.capacity !== undefined) {
    output.writeFieldBegin('capacity', Thrift.Type.I64, 8);
    output.writeI64(this.capacity);
    output.writeFieldEnd();
  }
  if (this.freeSpace !== null && this.freeSpace !== undefined) {
    output.writeFieldBegin('freeSpace', Thrift.Type.I64, 9);
    output.writeI64(this.freeSpace);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 10);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationQueue = function(args) {
  this.id = null;
  this.createDate = null;
  this.type = null;
  this.attributes = null;
  this.recipients = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyList(args.attributes, [null]);
    }
    if (args.recipients !== undefined && args.recipients !== null) {
      this.recipients = Thrift.copyList(args.recipients, [null]);
    }
  }
};
NotificationQueue.prototype = {};
NotificationQueue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size340 = 0;
        var _rtmp3344;
        this.attributes = [];
        var _etype343 = 0;
        _rtmp3344 = input.readListBegin();
        _etype343 = _rtmp3344.etype;
        _size340 = _rtmp3344.size;
        for (var _i345 = 0; _i345 < _size340; ++_i345)
        {
          var elem346 = null;
          elem346 = new NotificationAttribute();
          elem346.read(input);
          this.attributes.push(elem346);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size347 = 0;
        var _rtmp3351;
        this.recipients = [];
        var _etype350 = 0;
        _rtmp3351 = input.readListBegin();
        _etype350 = _rtmp3351.etype;
        _size347 = _rtmp3351.size;
        for (var _i352 = 0; _i352 < _size347; ++_i352)
        {
          var elem353 = null;
          elem353 = new NotificationRecipient();
          elem353.read(input);
          this.recipients.push(elem353);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationQueue.prototype.write = function(output) {
  output.writeStructBegin('NotificationQueue');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.attributes.length);
    for (var iter354 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter354))
      {
        iter354 = this.attributes[iter354];
        iter354.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.recipients !== null && this.recipients !== undefined) {
    output.writeFieldBegin('recipients', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.recipients.length);
    for (var iter355 in this.recipients)
    {
      if (this.recipients.hasOwnProperty(iter355))
      {
        iter355 = this.recipients[iter355];
        iter355.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationAttribute = function(args) {
  this.id = null;
  this.notificationId = null;
  this.key = null;
  this.value = null;
  this.type = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.notificationId !== undefined && args.notificationId !== null) {
      this.notificationId = args.notificationId;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
NotificationAttribute.prototype = {};
NotificationAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notificationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationAttribute.prototype.write = function(output) {
  output.writeStructBegin('NotificationAttribute');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.notificationId !== null && this.notificationId !== undefined) {
    output.writeFieldBegin('notificationId', Thrift.Type.STRING, 2);
    output.writeString(this.notificationId);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationRecipient = function(args) {
  this.id = null;
  this.createDate = null;
  this.recipient = null;
  this.originalClient = null;
  this.processedDate = null;
  this.status = null;
  this.readed = null;
  this.type = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.recipient !== undefined && args.recipient !== null) {
      this.recipient = new UserOrGroup(args.recipient);
    }
    if (args.originalClient !== undefined && args.originalClient !== null) {
      this.originalClient = new UserOrGroup(args.originalClient);
    }
    if (args.processedDate !== undefined && args.processedDate !== null) {
      this.processedDate = args.processedDate;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.readed !== undefined && args.readed !== null) {
      this.readed = args.readed;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
NotificationRecipient.prototype = {};
NotificationRecipient.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.recipient = new UserOrGroup();
        this.recipient.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.originalClient = new UserOrGroup();
        this.originalClient.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.processedDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.readed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationRecipient.prototype.write = function(output) {
  output.writeStructBegin('NotificationRecipient');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.recipient !== null && this.recipient !== undefined) {
    output.writeFieldBegin('recipient', Thrift.Type.STRUCT, 3);
    this.recipient.write(output);
    output.writeFieldEnd();
  }
  if (this.originalClient !== null && this.originalClient !== undefined) {
    output.writeFieldBegin('originalClient', Thrift.Type.STRUCT, 5);
    this.originalClient.write(output);
    output.writeFieldEnd();
  }
  if (this.processedDate !== null && this.processedDate !== undefined) {
    output.writeFieldBegin('processedDate', Thrift.Type.I64, 6);
    output.writeI64(this.processedDate);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.readed !== null && this.readed !== undefined) {
    output.writeFieldBegin('readed', Thrift.Type.BOOL, 8);
    output.writeBool(this.readed);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 9);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

History = function(args) {
  this.id = null;
  this.createDate = null;
  this.documentId = null;
  this.level = null;
  this.key = null;
  this.parameters = null;
  this.clientId = null;
  this.originalUserId = null;
  this.docNumber = null;
  this.docSysNumber = null;
  this.attachmentId = null;
  this.attachmentFileName = null;
  this.ip1 = null;
  this.ip2 = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.level !== undefined && args.level !== null) {
      this.level = args.level;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyList(args.parameters, [null]);
    }
    if (args.clientId !== undefined && args.clientId !== null) {
      this.clientId = args.clientId;
    }
    if (args.originalUserId !== undefined && args.originalUserId !== null) {
      this.originalUserId = args.originalUserId;
    }
    if (args.docNumber !== undefined && args.docNumber !== null) {
      this.docNumber = args.docNumber;
    }
    if (args.docSysNumber !== undefined && args.docSysNumber !== null) {
      this.docSysNumber = args.docSysNumber;
    }
    if (args.attachmentId !== undefined && args.attachmentId !== null) {
      this.attachmentId = args.attachmentId;
    }
    if (args.attachmentFileName !== undefined && args.attachmentFileName !== null) {
      this.attachmentFileName = args.attachmentFileName;
    }
    if (args.ip1 !== undefined && args.ip1 !== null) {
      this.ip1 = args.ip1;
    }
    if (args.ip2 !== undefined && args.ip2 !== null) {
      this.ip2 = args.ip2;
    }
  }
};
History.prototype = {};
History.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size356 = 0;
        var _rtmp3360;
        this.parameters = [];
        var _etype359 = 0;
        _rtmp3360 = input.readListBegin();
        _etype359 = _rtmp3360.etype;
        _size356 = _rtmp3360.size;
        for (var _i361 = 0; _i361 < _size356; ++_i361)
        {
          var elem362 = null;
          elem362 = input.readString().value;
          this.parameters.push(elem362);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.clientId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.originalUserId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.docNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.docSysNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.attachmentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.attachmentFileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.ip1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.ip2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

History.prototype.write = function(output) {
  output.writeStructBegin('History');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 3);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 4);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 5);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.parameters.length);
    for (var iter363 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(iter363))
      {
        iter363 = this.parameters[iter363];
        output.writeString(iter363);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 7);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  if (this.originalUserId !== null && this.originalUserId !== undefined) {
    output.writeFieldBegin('originalUserId', Thrift.Type.STRING, 8);
    output.writeString(this.originalUserId);
    output.writeFieldEnd();
  }
  if (this.docNumber !== null && this.docNumber !== undefined) {
    output.writeFieldBegin('docNumber', Thrift.Type.STRING, 9);
    output.writeString(this.docNumber);
    output.writeFieldEnd();
  }
  if (this.docSysNumber !== null && this.docSysNumber !== undefined) {
    output.writeFieldBegin('docSysNumber', Thrift.Type.STRING, 10);
    output.writeString(this.docSysNumber);
    output.writeFieldEnd();
  }
  if (this.attachmentId !== null && this.attachmentId !== undefined) {
    output.writeFieldBegin('attachmentId', Thrift.Type.STRING, 11);
    output.writeString(this.attachmentId);
    output.writeFieldEnd();
  }
  if (this.attachmentFileName !== null && this.attachmentFileName !== undefined) {
    output.writeFieldBegin('attachmentFileName', Thrift.Type.STRING, 12);
    output.writeString(this.attachmentFileName);
    output.writeFieldEnd();
  }
  if (this.ip1 !== null && this.ip1 !== undefined) {
    output.writeFieldBegin('ip1', Thrift.Type.STRING, 13);
    output.writeString(this.ip1);
    output.writeFieldEnd();
  }
  if (this.ip2 !== null && this.ip2 !== undefined) {
    output.writeFieldBegin('ip2', Thrift.Type.STRING, 14);
    output.writeString(this.ip2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeadlineHistory = function(args) {
  this.id = null;
  this.createDate = null;
  this.creator = null;
  this.document = null;
  this.documentExecution = null;
  this.oldDeadlineDate = null;
  this.theNewDeadlineDate = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = new UserOrGroup(args.creator);
    }
    if (args.document !== undefined && args.document !== null) {
      this.document = new Document(args.document);
    }
    if (args.documentExecution !== undefined && args.documentExecution !== null) {
      this.documentExecution = new DocumentExecution(args.documentExecution);
    }
    if (args.oldDeadlineDate !== undefined && args.oldDeadlineDate !== null) {
      this.oldDeadlineDate = args.oldDeadlineDate;
    }
    if (args.theNewDeadlineDate !== undefined && args.theNewDeadlineDate !== null) {
      this.theNewDeadlineDate = args.theNewDeadlineDate;
    }
  }
};
DeadlineHistory.prototype = {};
DeadlineHistory.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.creator = new UserOrGroup();
        this.creator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.document = new Document();
        this.document.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.documentExecution = new DocumentExecution();
        this.documentExecution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.oldDeadlineDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.theNewDeadlineDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeadlineHistory.prototype.write = function(output) {
  output.writeStructBegin('DeadlineHistory');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRUCT, 3);
    this.creator.write(output);
    output.writeFieldEnd();
  }
  if (this.document !== null && this.document !== undefined) {
    output.writeFieldBegin('document', Thrift.Type.STRUCT, 4);
    this.document.write(output);
    output.writeFieldEnd();
  }
  if (this.documentExecution !== null && this.documentExecution !== undefined) {
    output.writeFieldBegin('documentExecution', Thrift.Type.STRUCT, 5);
    this.documentExecution.write(output);
    output.writeFieldEnd();
  }
  if (this.oldDeadlineDate !== null && this.oldDeadlineDate !== undefined) {
    output.writeFieldBegin('oldDeadlineDate', Thrift.Type.I64, 6);
    output.writeI64(this.oldDeadlineDate);
    output.writeFieldEnd();
  }
  if (this.theNewDeadlineDate !== null && this.theNewDeadlineDate !== undefined) {
    output.writeFieldBegin('theNewDeadlineDate', Thrift.Type.I64, 7);
    output.writeI64(this.theNewDeadlineDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AvailablePatternStage = function(args) {
  this.id = null;
  this.formAvail = null;
  this.img = null;
  this.nameAvail = null;
  this.descriptionAvail = null;
  this.status = null;
  this.params = null;
  this.availableAnswers = null;
  this.fixedDecisions = null;
  this.availType = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.formAvail !== undefined && args.formAvail !== null) {
      this.formAvail = args.formAvail;
    }
    if (args.img !== undefined && args.img !== null) {
      this.img = args.img;
    }
    if (args.nameAvail !== undefined && args.nameAvail !== null) {
      this.nameAvail = args.nameAvail;
    }
    if (args.descriptionAvail !== undefined && args.descriptionAvail !== null) {
      this.descriptionAvail = args.descriptionAvail;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [StageParam]);
    }
    if (args.availableAnswers !== undefined && args.availableAnswers !== null) {
      this.availableAnswers = Thrift.copyList(args.availableAnswers, [null]);
    }
    if (args.fixedDecisions !== undefined && args.fixedDecisions !== null) {
      this.fixedDecisions = args.fixedDecisions;
    }
    if (args.availType !== undefined && args.availType !== null) {
      this.availType = args.availType;
    }
  }
};
AvailablePatternStage.prototype = {};
AvailablePatternStage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.formAvail = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.img = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nameAvail = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionAvail = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size364 = 0;
        var _rtmp3368;
        this.params = [];
        var _etype367 = 0;
        _rtmp3368 = input.readListBegin();
        _etype367 = _rtmp3368.etype;
        _size364 = _rtmp3368.size;
        for (var _i369 = 0; _i369 < _size364; ++_i369)
        {
          var elem370 = null;
          elem370 = new StageParam();
          elem370.read(input);
          this.params.push(elem370);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        var _size371 = 0;
        var _rtmp3375;
        this.availableAnswers = [];
        var _etype374 = 0;
        _rtmp3375 = input.readSetBegin();
        _etype374 = _rtmp3375.etype;
        _size371 = _rtmp3375.size;
        for (var _i376 = 0; _i376 < _size371; ++_i376)
        {
          var elem377 = null;
          elem377 = input.readString().value;
          this.availableAnswers.push(elem377);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.fixedDecisions = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.availType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AvailablePatternStage.prototype.write = function(output) {
  output.writeStructBegin('AvailablePatternStage');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.formAvail !== null && this.formAvail !== undefined) {
    output.writeFieldBegin('formAvail', Thrift.Type.I32, 2);
    output.writeI32(this.formAvail);
    output.writeFieldEnd();
  }
  if (this.img !== null && this.img !== undefined) {
    output.writeFieldBegin('img', Thrift.Type.STRING, 3);
    output.writeString(this.img);
    output.writeFieldEnd();
  }
  if (this.nameAvail !== null && this.nameAvail !== undefined) {
    output.writeFieldBegin('nameAvail', Thrift.Type.STRING, 4);
    output.writeString(this.nameAvail);
    output.writeFieldEnd();
  }
  if (this.descriptionAvail !== null && this.descriptionAvail !== undefined) {
    output.writeFieldBegin('descriptionAvail', Thrift.Type.STRING, 5);
    output.writeString(this.descriptionAvail);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 6);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
    for (var iter378 in this.params)
    {
      if (this.params.hasOwnProperty(iter378))
      {
        iter378 = this.params[iter378];
        iter378.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.availableAnswers !== null && this.availableAnswers !== undefined) {
    output.writeFieldBegin('availableAnswers', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.STRING, this.availableAnswers.length);
    for (var iter379 in this.availableAnswers)
    {
      if (this.availableAnswers.hasOwnProperty(iter379))
      {
        iter379 = this.availableAnswers[iter379];
        output.writeString(iter379);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.fixedDecisions !== null && this.fixedDecisions !== undefined) {
    output.writeFieldBegin('fixedDecisions', Thrift.Type.I32, 9);
    output.writeI32(this.fixedDecisions);
    output.writeFieldEnd();
  }
  if (this.availType !== null && this.availType !== undefined) {
    output.writeFieldBegin('availType', Thrift.Type.I32, 10);
    output.writeI32(this.availType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExternalModule = function(args) {
  this.id = null;
  this.createDate = null;
  this.url = null;
  this.nameExternalModule = null;
  this.descriptionExternalModule = null;
  this.user = null;
  this.error = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.nameExternalModule !== undefined && args.nameExternalModule !== null) {
      this.nameExternalModule = args.nameExternalModule;
    }
    if (args.descriptionExternalModule !== undefined && args.descriptionExternalModule !== null) {
      this.descriptionExternalModule = args.descriptionExternalModule;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = new UserOrGroup(args.user);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ExternalModule.prototype = {};
ExternalModule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.nameExternalModule = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionExternalModule = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new UserOrGroup();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExternalModule.prototype.write = function(output) {
  output.writeStructBegin('ExternalModule');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 3);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.nameExternalModule !== null && this.nameExternalModule !== undefined) {
    output.writeFieldBegin('nameExternalModule', Thrift.Type.STRING, 4);
    output.writeString(this.nameExternalModule);
    output.writeFieldEnd();
  }
  if (this.descriptionExternalModule !== null && this.descriptionExternalModule !== undefined) {
    output.writeFieldBegin('descriptionExternalModule', Thrift.Type.STRING, 5);
    output.writeString(this.descriptionExternalModule);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 6);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 7);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportTemplate = function(args) {
  this.id = null;
  this.createDate = null;
  this.reportName = null;
  this.fastPrint = null;
  this.reportCount = null;
  this.params = null;
  this.group = null;
  this.reportType = null;
  this.accountIds = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.reportName !== undefined && args.reportName !== null) {
      this.reportName = args.reportName;
    }
    if (args.fastPrint !== undefined && args.fastPrint !== null) {
      this.fastPrint = args.fastPrint;
    }
    if (args.reportCount !== undefined && args.reportCount !== null) {
      this.reportCount = args.reportCount;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [null]);
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = args.group;
    }
    if (args.reportType !== undefined && args.reportType !== null) {
      this.reportType = args.reportType;
    }
    if (args.accountIds !== undefined && args.accountIds !== null) {
      this.accountIds = Thrift.copyList(args.accountIds, [null]);
    }
  }
};
ReportTemplate.prototype = {};
ReportTemplate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reportName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.fastPrint = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.reportCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size380 = 0;
        var _rtmp3384;
        this.params = [];
        var _etype383 = 0;
        _rtmp3384 = input.readListBegin();
        _etype383 = _rtmp3384.etype;
        _size380 = _rtmp3384.size;
        for (var _i385 = 0; _i385 < _size380; ++_i385)
        {
          var elem386 = null;
          elem386 = new ReportParams();
          elem386.read(input);
          this.params.push(elem386);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.group = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.reportType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.SET) {
        var _size387 = 0;
        var _rtmp3391;
        this.accountIds = [];
        var _etype390 = 0;
        _rtmp3391 = input.readSetBegin();
        _etype390 = _rtmp3391.etype;
        _size387 = _rtmp3391.size;
        for (var _i392 = 0; _i392 < _size387; ++_i392)
        {
          var elem393 = null;
          elem393 = input.readString().value;
          this.accountIds.push(elem393);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportTemplate.prototype.write = function(output) {
  output.writeStructBegin('ReportTemplate');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.reportName !== null && this.reportName !== undefined) {
    output.writeFieldBegin('reportName', Thrift.Type.STRING, 3);
    output.writeString(this.reportName);
    output.writeFieldEnd();
  }
  if (this.fastPrint !== null && this.fastPrint !== undefined) {
    output.writeFieldBegin('fastPrint', Thrift.Type.BOOL, 4);
    output.writeBool(this.fastPrint);
    output.writeFieldEnd();
  }
  if (this.reportCount !== null && this.reportCount !== undefined) {
    output.writeFieldBegin('reportCount', Thrift.Type.I64, 5);
    output.writeI64(this.reportCount);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
    for (var iter394 in this.params)
    {
      if (this.params.hasOwnProperty(iter394))
      {
        iter394 = this.params[iter394];
        iter394.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRING, 7);
    output.writeString(this.group);
    output.writeFieldEnd();
  }
  if (this.reportType !== null && this.reportType !== undefined) {
    output.writeFieldBegin('reportType', Thrift.Type.I32, 8);
    output.writeI32(this.reportType);
    output.writeFieldEnd();
  }
  if (this.accountIds !== null && this.accountIds !== undefined) {
    output.writeFieldBegin('accountIds', Thrift.Type.SET, 9);
    output.writeSetBegin(Thrift.Type.STRING, this.accountIds.length);
    for (var iter395 in this.accountIds)
    {
      if (this.accountIds.hasOwnProperty(iter395))
      {
        iter395 = this.accountIds[iter395];
        output.writeString(iter395);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportTemplateLink = function(args) {
  this.id = null;
  this.reportId = null;
  this.patternId = null;
  this.userOrGroup = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.reportId !== undefined && args.reportId !== null) {
      this.reportId = args.reportId;
    }
    if (args.patternId !== undefined && args.patternId !== null) {
      this.patternId = args.patternId;
    }
    if (args.userOrGroup !== undefined && args.userOrGroup !== null) {
      this.userOrGroup = new UserOrGroup(args.userOrGroup);
    }
  }
};
ReportTemplateLink.prototype = {};
ReportTemplateLink.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reportId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.patternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.userOrGroup = new UserOrGroup();
        this.userOrGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportTemplateLink.prototype.write = function(output) {
  output.writeStructBegin('ReportTemplateLink');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.reportId !== null && this.reportId !== undefined) {
    output.writeFieldBegin('reportId', Thrift.Type.STRING, 2);
    output.writeString(this.reportId);
    output.writeFieldEnd();
  }
  if (this.patternId !== null && this.patternId !== undefined) {
    output.writeFieldBegin('patternId', Thrift.Type.STRING, 3);
    output.writeString(this.patternId);
    output.writeFieldEnd();
  }
  if (this.userOrGroup !== null && this.userOrGroup !== undefined) {
    output.writeFieldBegin('userOrGroup', Thrift.Type.STRUCT, 4);
    this.userOrGroup.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportParams = function(args) {
  this.id = null;
  this.key = null;
  this.value = null;
  this.type = null;
  this.requared = null;
  this.name = null;
  this.handbookId = null;
  this.handbookLookupCol = null;
  this.handbookSelectColumn = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.requared !== undefined && args.requared !== null) {
      this.requared = args.requared;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.handbookId !== undefined && args.handbookId !== null) {
      this.handbookId = args.handbookId;
    }
    if (args.handbookLookupCol !== undefined && args.handbookLookupCol !== null) {
      this.handbookLookupCol = args.handbookLookupCol;
    }
    if (args.handbookSelectColumn !== undefined && args.handbookSelectColumn !== null) {
      this.handbookSelectColumn = args.handbookSelectColumn;
    }
  }
};
ReportParams.prototype = {};
ReportParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.requared = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.handbookId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.handbookLookupCol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.handbookSelectColumn = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportParams.prototype.write = function(output) {
  output.writeStructBegin('ReportParams');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.requared !== null && this.requared !== undefined) {
    output.writeFieldBegin('requared', Thrift.Type.BOOL, 5);
    output.writeBool(this.requared);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 6);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.handbookId !== null && this.handbookId !== undefined) {
    output.writeFieldBegin('handbookId', Thrift.Type.STRING, 7);
    output.writeString(this.handbookId);
    output.writeFieldEnd();
  }
  if (this.handbookLookupCol !== null && this.handbookLookupCol !== undefined) {
    output.writeFieldBegin('handbookLookupCol', Thrift.Type.STRING, 8);
    output.writeString(this.handbookLookupCol);
    output.writeFieldEnd();
  }
  if (this.handbookSelectColumn !== null && this.handbookSelectColumn !== undefined) {
    output.writeFieldBegin('handbookSelectColumn', Thrift.Type.STRING, 9);
    output.writeString(this.handbookSelectColumn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RoleScHelper = function(args) {
  this.id = null;
  this.himself = null;
  this.usersOrGrous = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.himself !== undefined && args.himself !== null) {
      this.himself = args.himself;
    }
    if (args.usersOrGrous !== undefined && args.usersOrGrous !== null) {
      this.usersOrGrous = Thrift.copyList(args.usersOrGrous, [UserOrGroup]);
    }
  }
};
RoleScHelper.prototype = {};
RoleScHelper.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.himself = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size396 = 0;
        var _rtmp3400;
        this.usersOrGrous = [];
        var _etype399 = 0;
        _rtmp3400 = input.readListBegin();
        _etype399 = _rtmp3400.etype;
        _size396 = _rtmp3400.size;
        for (var _i401 = 0; _i401 < _size396; ++_i401)
        {
          var elem402 = null;
          elem402 = new UserOrGroup();
          elem402.read(input);
          this.usersOrGrous.push(elem402);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RoleScHelper.prototype.write = function(output) {
  output.writeStructBegin('RoleScHelper');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.himself !== null && this.himself !== undefined) {
    output.writeFieldBegin('himself', Thrift.Type.BOOL, 2);
    output.writeBool(this.himself);
    output.writeFieldEnd();
  }
  if (this.usersOrGrous !== null && this.usersOrGrous !== undefined) {
    output.writeFieldBegin('usersOrGrous', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.usersOrGrous.length);
    for (var iter403 in this.usersOrGrous)
    {
      if (this.usersOrGrous.hasOwnProperty(iter403))
      {
        iter403 = this.usersOrGrous[iter403];
        iter403.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

News = function(args) {
  this.id = null;
  this.createDate = null;
  this.theNewsName = null;
  this.theNewsDescription = null;
  this.accountIds = null;
  this.previewUrl = null;
  this.urls = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.theNewsName !== undefined && args.theNewsName !== null) {
      this.theNewsName = args.theNewsName;
    }
    if (args.theNewsDescription !== undefined && args.theNewsDescription !== null) {
      this.theNewsDescription = args.theNewsDescription;
    }
    if (args.accountIds !== undefined && args.accountIds !== null) {
      this.accountIds = Thrift.copyList(args.accountIds, [null]);
    }
    if (args.previewUrl !== undefined && args.previewUrl !== null) {
      this.previewUrl = args.previewUrl;
    }
    if (args.urls !== undefined && args.urls !== null) {
      this.urls = Thrift.copyList(args.urls, [null]);
    }
  }
};
News.prototype = {};
News.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.theNewsName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.theNewsDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size404 = 0;
        var _rtmp3408;
        this.accountIds = [];
        var _etype407 = 0;
        _rtmp3408 = input.readSetBegin();
        _etype407 = _rtmp3408.etype;
        _size404 = _rtmp3408.size;
        for (var _i409 = 0; _i409 < _size404; ++_i409)
        {
          var elem410 = null;
          elem410 = input.readString().value;
          this.accountIds.push(elem410);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.previewUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size411 = 0;
        var _rtmp3415;
        this.urls = [];
        var _etype414 = 0;
        _rtmp3415 = input.readListBegin();
        _etype414 = _rtmp3415.etype;
        _size411 = _rtmp3415.size;
        for (var _i416 = 0; _i416 < _size411; ++_i416)
        {
          var elem417 = null;
          elem417 = input.readString().value;
          this.urls.push(elem417);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

News.prototype.write = function(output) {
  output.writeStructBegin('News');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.theNewsName !== null && this.theNewsName !== undefined) {
    output.writeFieldBegin('theNewsName', Thrift.Type.STRING, 3);
    output.writeString(this.theNewsName);
    output.writeFieldEnd();
  }
  if (this.theNewsDescription !== null && this.theNewsDescription !== undefined) {
    output.writeFieldBegin('theNewsDescription', Thrift.Type.STRING, 4);
    output.writeString(this.theNewsDescription);
    output.writeFieldEnd();
  }
  if (this.accountIds !== null && this.accountIds !== undefined) {
    output.writeFieldBegin('accountIds', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRING, this.accountIds.length);
    for (var iter418 in this.accountIds)
    {
      if (this.accountIds.hasOwnProperty(iter418))
      {
        iter418 = this.accountIds[iter418];
        output.writeString(iter418);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.previewUrl !== null && this.previewUrl !== undefined) {
    output.writeFieldBegin('previewUrl', Thrift.Type.STRING, 6);
    output.writeString(this.previewUrl);
    output.writeFieldEnd();
  }
  if (this.urls !== null && this.urls !== undefined) {
    output.writeFieldBegin('urls', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.urls.length);
    for (var iter419 in this.urls)
    {
      if (this.urls.hasOwnProperty(iter419))
      {
        iter419 = this.urls[iter419];
        output.writeString(iter419);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccountGroup = function(args) {
  this.id = null;
  this.name = null;
  this.accounts = null;
  this.blocked = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.accounts !== undefined && args.accounts !== null) {
      this.accounts = Thrift.copyList(args.accounts, [null]);
    }
    if (args.blocked !== undefined && args.blocked !== null) {
      this.blocked = args.blocked;
    }
  }
};
AccountGroup.prototype = {};
AccountGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size420 = 0;
        var _rtmp3424;
        this.accounts = [];
        var _etype423 = 0;
        _rtmp3424 = input.readListBegin();
        _etype423 = _rtmp3424.etype;
        _size420 = _rtmp3424.size;
        for (var _i425 = 0; _i425 < _size420; ++_i425)
        {
          var elem426 = null;
          elem426 = new Account();
          elem426.read(input);
          this.accounts.push(elem426);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.blocked = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccountGroup.prototype.write = function(output) {
  output.writeStructBegin('AccountGroup');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.accounts !== null && this.accounts !== undefined) {
    output.writeFieldBegin('accounts', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.accounts.length);
    for (var iter427 in this.accounts)
    {
      if (this.accounts.hasOwnProperty(iter427))
      {
        iter427 = this.accounts[iter427];
        iter427.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.blocked !== null && this.blocked !== undefined) {
    output.writeFieldBegin('blocked', Thrift.Type.BOOL, 4);
    output.writeBool(this.blocked);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Account = function(args) {
  this.id = null;
  this.createDate = null;
  this.accountName = null;
  this.main = null;
  this.confidential = null;
  this.encrypted = null;
  this.accountCof = null;
  this.storages = null;
  this.accountGroupId = null;
  this.orderNum = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.accountName !== undefined && args.accountName !== null) {
      this.accountName = args.accountName;
    }
    if (args.main !== undefined && args.main !== null) {
      this.main = args.main;
    }
    if (args.confidential !== undefined && args.confidential !== null) {
      this.confidential = args.confidential;
    }
    if (args.encrypted !== undefined && args.encrypted !== null) {
      this.encrypted = args.encrypted;
    }
    if (args.accountCof !== undefined && args.accountCof !== null) {
      this.accountCof = Thrift.copyMap(args.accountCof, [null]);
    }
    if (args.storages !== undefined && args.storages !== null) {
      this.storages = Thrift.copyList(args.storages, [FileStorage]);
    }
    if (args.accountGroupId !== undefined && args.accountGroupId !== null) {
      this.accountGroupId = args.accountGroupId;
    }
    if (args.orderNum !== undefined && args.orderNum !== null) {
      this.orderNum = args.orderNum;
    }
  }
};
Account.prototype = {};
Account.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accountName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.main = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.confidential = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.encrypted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size428 = 0;
        var _rtmp3432;
        this.accountCof = {};
        var _ktype429 = 0;
        var _vtype430 = 0;
        _rtmp3432 = input.readMapBegin();
        _ktype429 = _rtmp3432.ktype;
        _vtype430 = _rtmp3432.vtype;
        _size428 = _rtmp3432.size;
        for (var _i433 = 0; _i433 < _size428; ++_i433)
        {
          if (_i433 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key434 = null;
          var val435 = null;
          key434 = input.readI32().value;
          val435 = input.readString().value;
          this.accountCof[key434] = val435;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size436 = 0;
        var _rtmp3440;
        this.storages = [];
        var _etype439 = 0;
        _rtmp3440 = input.readListBegin();
        _etype439 = _rtmp3440.etype;
        _size436 = _rtmp3440.size;
        for (var _i441 = 0; _i441 < _size436; ++_i441)
        {
          var elem442 = null;
          elem442 = new FileStorage();
          elem442.read(input);
          this.storages.push(elem442);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.accountGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.orderNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Account.prototype.write = function(output) {
  output.writeStructBegin('Account');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.accountName !== null && this.accountName !== undefined) {
    output.writeFieldBegin('accountName', Thrift.Type.STRING, 3);
    output.writeString(this.accountName);
    output.writeFieldEnd();
  }
  if (this.main !== null && this.main !== undefined) {
    output.writeFieldBegin('main', Thrift.Type.BOOL, 4);
    output.writeBool(this.main);
    output.writeFieldEnd();
  }
  if (this.confidential !== null && this.confidential !== undefined) {
    output.writeFieldBegin('confidential', Thrift.Type.BOOL, 5);
    output.writeBool(this.confidential);
    output.writeFieldEnd();
  }
  if (this.encrypted !== null && this.encrypted !== undefined) {
    output.writeFieldBegin('encrypted', Thrift.Type.BOOL, 6);
    output.writeBool(this.encrypted);
    output.writeFieldEnd();
  }
  if (this.accountCof !== null && this.accountCof !== undefined) {
    output.writeFieldBegin('accountCof', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.accountCof));
    for (var kiter443 in this.accountCof)
    {
      if (this.accountCof.hasOwnProperty(kiter443))
      {
        var viter444 = this.accountCof[kiter443];
        output.writeI32(kiter443);
        output.writeString(viter444);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.storages !== null && this.storages !== undefined) {
    output.writeFieldBegin('storages', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.storages.length);
    for (var iter445 in this.storages)
    {
      if (this.storages.hasOwnProperty(iter445))
      {
        iter445 = this.storages[iter445];
        iter445.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.accountGroupId !== null && this.accountGroupId !== undefined) {
    output.writeFieldBegin('accountGroupId', Thrift.Type.STRING, 9);
    output.writeString(this.accountGroupId);
    output.writeFieldEnd();
  }
  if (this.orderNum !== null && this.orderNum !== undefined) {
    output.writeFieldBegin('orderNum', Thrift.Type.I32, 10);
    output.writeI32(this.orderNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HandBook = function(args) {
  this.id = null;
  this.hBookName = null;
  this.guiId = null;
  this.fixed = null;
  this.accountIds = null;
  this.columns = null;
  this.hbContentAdmins = null;
  this.allowEdit = null;
  this.thriftURL = null;
  this.copyValue = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.hBookName !== undefined && args.hBookName !== null) {
      this.hBookName = args.hBookName;
    }
    if (args.guiId !== undefined && args.guiId !== null) {
      this.guiId = args.guiId;
    }
    if (args.fixed !== undefined && args.fixed !== null) {
      this.fixed = args.fixed;
    }
    if (args.accountIds !== undefined && args.accountIds !== null) {
      this.accountIds = Thrift.copyList(args.accountIds, [null]);
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.hbContentAdmins !== undefined && args.hbContentAdmins !== null) {
      this.hbContentAdmins = Thrift.copyList(args.hbContentAdmins, [UserOrGroup]);
    }
    if (args.allowEdit !== undefined && args.allowEdit !== null) {
      this.allowEdit = args.allowEdit;
    }
    if (args.thriftURL !== undefined && args.thriftURL !== null) {
      this.thriftURL = args.thriftURL;
    }
    if (args.copyValue !== undefined && args.copyValue !== null) {
      this.copyValue = args.copyValue;
    }
  }
};
HandBook.prototype = {};
HandBook.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hBookName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.guiId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.fixed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size446 = 0;
        var _rtmp3450;
        this.accountIds = [];
        var _etype449 = 0;
        _rtmp3450 = input.readSetBegin();
        _etype449 = _rtmp3450.etype;
        _size446 = _rtmp3450.size;
        for (var _i451 = 0; _i451 < _size446; ++_i451)
        {
          var elem452 = null;
          elem452 = input.readString().value;
          this.accountIds.push(elem452);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size453 = 0;
        var _rtmp3457;
        this.columns = [];
        var _etype456 = 0;
        _rtmp3457 = input.readListBegin();
        _etype456 = _rtmp3457.etype;
        _size453 = _rtmp3457.size;
        for (var _i458 = 0; _i458 < _size453; ++_i458)
        {
          var elem459 = null;
          elem459 = new HBColumn();
          elem459.read(input);
          this.columns.push(elem459);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size460 = 0;
        var _rtmp3464;
        this.hbContentAdmins = [];
        var _etype463 = 0;
        _rtmp3464 = input.readListBegin();
        _etype463 = _rtmp3464.etype;
        _size460 = _rtmp3464.size;
        for (var _i465 = 0; _i465 < _size460; ++_i465)
        {
          var elem466 = null;
          elem466 = new UserOrGroup();
          elem466.read(input);
          this.hbContentAdmins.push(elem466);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.allowEdit = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.thriftURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.copyValue = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HandBook.prototype.write = function(output) {
  output.writeStructBegin('HandBook');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.hBookName !== null && this.hBookName !== undefined) {
    output.writeFieldBegin('hBookName', Thrift.Type.STRING, 2);
    output.writeString(this.hBookName);
    output.writeFieldEnd();
  }
  if (this.guiId !== null && this.guiId !== undefined) {
    output.writeFieldBegin('guiId', Thrift.Type.I64, 3);
    output.writeI64(this.guiId);
    output.writeFieldEnd();
  }
  if (this.fixed !== null && this.fixed !== undefined) {
    output.writeFieldBegin('fixed', Thrift.Type.BOOL, 4);
    output.writeBool(this.fixed);
    output.writeFieldEnd();
  }
  if (this.accountIds !== null && this.accountIds !== undefined) {
    output.writeFieldBegin('accountIds', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRING, this.accountIds.length);
    for (var iter467 in this.accountIds)
    {
      if (this.accountIds.hasOwnProperty(iter467))
      {
        iter467 = this.accountIds[iter467];
        output.writeString(iter467);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter468 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter468))
      {
        iter468 = this.columns[iter468];
        iter468.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hbContentAdmins !== null && this.hbContentAdmins !== undefined) {
    output.writeFieldBegin('hbContentAdmins', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.hbContentAdmins.length);
    for (var iter469 in this.hbContentAdmins)
    {
      if (this.hbContentAdmins.hasOwnProperty(iter469))
      {
        iter469 = this.hbContentAdmins[iter469];
        iter469.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.allowEdit !== null && this.allowEdit !== undefined) {
    output.writeFieldBegin('allowEdit', Thrift.Type.BOOL, 8);
    output.writeBool(this.allowEdit);
    output.writeFieldEnd();
  }
  if (this.thriftURL !== null && this.thriftURL !== undefined) {
    output.writeFieldBegin('thriftURL', Thrift.Type.STRING, 9);
    output.writeString(this.thriftURL);
    output.writeFieldEnd();
  }
  if (this.copyValue !== null && this.copyValue !== undefined) {
    output.writeFieldBegin('copyValue', Thrift.Type.BOOL, 10);
    output.writeBool(this.copyValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HBColumn = function(args) {
  this.id = null;
  this.name = null;
  this.requiredColumn = null;
  this.seqNum = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.requiredColumn !== undefined && args.requiredColumn !== null) {
      this.requiredColumn = args.requiredColumn;
    }
    if (args.seqNum !== undefined && args.seqNum !== null) {
      this.seqNum = args.seqNum;
    }
  }
};
HBColumn.prototype = {};
HBColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.requiredColumn = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.seqNum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HBColumn.prototype.write = function(output) {
  output.writeStructBegin('HBColumn');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.requiredColumn !== null && this.requiredColumn !== undefined) {
    output.writeFieldBegin('requiredColumn', Thrift.Type.BOOL, 3);
    output.writeBool(this.requiredColumn);
    output.writeFieldEnd();
  }
  if (this.seqNum !== null && this.seqNum !== undefined) {
    output.writeFieldBegin('seqNum', Thrift.Type.I32, 4);
    output.writeI32(this.seqNum);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Department = function(args) {
  this.id = null;
  this.parentId = null;
  this.name = null;
  this.orgStructureCode = null;
  this.accountId = null;
  this.userCount = null;
  this.path = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.parentId !== undefined && args.parentId !== null) {
      this.parentId = args.parentId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.orgStructureCode !== undefined && args.orgStructureCode !== null) {
      this.orgStructureCode = args.orgStructureCode;
    }
    if (args.accountId !== undefined && args.accountId !== null) {
      this.accountId = args.accountId;
    }
    if (args.userCount !== undefined && args.userCount !== null) {
      this.userCount = args.userCount;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
  }
};
Department.prototype = {};
Department.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.orgStructureCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.userCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Department.prototype.write = function(output) {
  output.writeStructBegin('Department');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.parentId !== null && this.parentId !== undefined) {
    output.writeFieldBegin('parentId', Thrift.Type.STRING, 2);
    output.writeString(this.parentId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.orgStructureCode !== null && this.orgStructureCode !== undefined) {
    output.writeFieldBegin('orgStructureCode', Thrift.Type.STRING, 4);
    output.writeString(this.orgStructureCode);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 5);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.userCount !== null && this.userCount !== undefined) {
    output.writeFieldBegin('userCount', Thrift.Type.I64, 6);
    output.writeI64(this.userCount);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 7);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DigitalSign = function(args) {
  this.id = null;
  this.documentId = null;
  this.userId = null;
  this.attachmentId = null;
  this.signature = null;
  this.methodName = null;
  this.stageId = null;
  this.iteration = null;
  this.signDate = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.attachmentId !== undefined && args.attachmentId !== null) {
      this.attachmentId = args.attachmentId;
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
    if (args.methodName !== undefined && args.methodName !== null) {
      this.methodName = args.methodName;
    }
    if (args.stageId !== undefined && args.stageId !== null) {
      this.stageId = args.stageId;
    }
    if (args.iteration !== undefined && args.iteration !== null) {
      this.iteration = args.iteration;
    }
    if (args.signDate !== undefined && args.signDate !== null) {
      this.signDate = args.signDate;
    }
  }
};
DigitalSign.prototype = {};
DigitalSign.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.attachmentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.methodName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.stageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.iteration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.signDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DigitalSign.prototype.write = function(output) {
  output.writeStructBegin('DigitalSign');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 3);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.attachmentId !== null && this.attachmentId !== undefined) {
    output.writeFieldBegin('attachmentId', Thrift.Type.STRING, 4);
    output.writeString(this.attachmentId);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 5);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  if (this.methodName !== null && this.methodName !== undefined) {
    output.writeFieldBegin('methodName', Thrift.Type.STRING, 6);
    output.writeString(this.methodName);
    output.writeFieldEnd();
  }
  if (this.stageId !== null && this.stageId !== undefined) {
    output.writeFieldBegin('stageId', Thrift.Type.STRING, 7);
    output.writeString(this.stageId);
    output.writeFieldEnd();
  }
  if (this.iteration !== null && this.iteration !== undefined) {
    output.writeFieldBegin('iteration', Thrift.Type.I32, 8);
    output.writeI32(this.iteration);
    output.writeFieldEnd();
  }
  if (this.signDate !== null && this.signDate !== undefined) {
    output.writeFieldBegin('signDate', Thrift.Type.I64, 9);
    output.writeI64(this.signDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SecurityClassification = function(args) {
  this.id = null;
  this.gname = null;
  this.scDescription = null;
  this.group = null;
  this.share = null;
  this.scMask = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.gname !== undefined && args.gname !== null) {
      this.gname = args.gname;
    }
    if (args.scDescription !== undefined && args.scDescription !== null) {
      this.scDescription = args.scDescription;
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = args.group;
    }
    if (args.share !== undefined && args.share !== null) {
      this.share = args.share;
    }
    if (args.scMask !== undefined && args.scMask !== null) {
      this.scMask = args.scMask;
    }
  }
};
SecurityClassification.prototype = {};
SecurityClassification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.gname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.scDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.group = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.share = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.scMask = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityClassification.prototype.write = function(output) {
  output.writeStructBegin('SecurityClassification');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.gname !== null && this.gname !== undefined) {
    output.writeFieldBegin('gname', Thrift.Type.STRING, 2);
    output.writeString(this.gname);
    output.writeFieldEnd();
  }
  if (this.scDescription !== null && this.scDescription !== undefined) {
    output.writeFieldBegin('scDescription', Thrift.Type.STRING, 3);
    output.writeString(this.scDescription);
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRING, 4);
    output.writeString(this.group);
    output.writeFieldEnd();
  }
  if (this.share !== null && this.share !== undefined) {
    output.writeFieldBegin('share', Thrift.Type.BOOL, 5);
    output.writeBool(this.share);
    output.writeFieldEnd();
  }
  if (this.scMask !== null && this.scMask !== undefined) {
    output.writeFieldBegin('scMask', Thrift.Type.STRING, 6);
    output.writeString(this.scMask);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CertificateInfo = function(args) {
  this.serialNumber = null;
  this.issuerDN = null;
  this.subjectDN = null;
  this.signDate = null;
  this.beforeDate = null;
  this.afterDate = null;
  this.signature = null;
  if (args) {
    if (args.serialNumber !== undefined && args.serialNumber !== null) {
      this.serialNumber = args.serialNumber;
    }
    if (args.issuerDN !== undefined && args.issuerDN !== null) {
      this.issuerDN = args.issuerDN;
    }
    if (args.subjectDN !== undefined && args.subjectDN !== null) {
      this.subjectDN = args.subjectDN;
    }
    if (args.signDate !== undefined && args.signDate !== null) {
      this.signDate = args.signDate;
    }
    if (args.beforeDate !== undefined && args.beforeDate !== null) {
      this.beforeDate = args.beforeDate;
    }
    if (args.afterDate !== undefined && args.afterDate !== null) {
      this.afterDate = args.afterDate;
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
  }
};
CertificateInfo.prototype = {};
CertificateInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serialNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.issuerDN = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.subjectDN = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.signDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.beforeDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.afterDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CertificateInfo.prototype.write = function(output) {
  output.writeStructBegin('CertificateInfo');
  if (this.serialNumber !== null && this.serialNumber !== undefined) {
    output.writeFieldBegin('serialNumber', Thrift.Type.STRING, 1);
    output.writeString(this.serialNumber);
    output.writeFieldEnd();
  }
  if (this.issuerDN !== null && this.issuerDN !== undefined) {
    output.writeFieldBegin('issuerDN', Thrift.Type.STRING, 2);
    output.writeString(this.issuerDN);
    output.writeFieldEnd();
  }
  if (this.subjectDN !== null && this.subjectDN !== undefined) {
    output.writeFieldBegin('subjectDN', Thrift.Type.STRING, 3);
    output.writeString(this.subjectDN);
    output.writeFieldEnd();
  }
  if (this.signDate !== null && this.signDate !== undefined) {
    output.writeFieldBegin('signDate', Thrift.Type.I64, 4);
    output.writeI64(this.signDate);
    output.writeFieldEnd();
  }
  if (this.beforeDate !== null && this.beforeDate !== undefined) {
    output.writeFieldBegin('beforeDate', Thrift.Type.I64, 5);
    output.writeI64(this.beforeDate);
    output.writeFieldEnd();
  }
  if (this.afterDate !== null && this.afterDate !== undefined) {
    output.writeFieldBegin('afterDate', Thrift.Type.I64, 6);
    output.writeI64(this.afterDate);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 7);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationTransportType = function(args) {
  this.key = null;
  this.caption = null;
  this.destination = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.caption !== undefined && args.caption !== null) {
      this.caption = args.caption;
    }
    if (args.destination !== undefined && args.destination !== null) {
      this.destination = Thrift.copyList(args.destination, [null]);
    }
  }
};
NotificationTransportType.prototype = {};
NotificationTransportType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.caption = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size470 = 0;
        var _rtmp3474;
        this.destination = [];
        var _etype473 = 0;
        _rtmp3474 = input.readSetBegin();
        _etype473 = _rtmp3474.etype;
        _size470 = _rtmp3474.size;
        for (var _i475 = 0; _i475 < _size470; ++_i475)
        {
          var elem476 = null;
          elem476 = input.readI32().value;
          this.destination.push(elem476);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationTransportType.prototype.write = function(output) {
  output.writeStructBegin('NotificationTransportType');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.caption !== null && this.caption !== undefined) {
    output.writeFieldBegin('caption', Thrift.Type.STRING, 2);
    output.writeString(this.caption);
    output.writeFieldEnd();
  }
  if (this.destination !== null && this.destination !== undefined) {
    output.writeFieldBegin('destination', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.I32, this.destination.length);
    for (var iter477 in this.destination)
    {
      if (this.destination.hasOwnProperty(iter477))
      {
        iter477 = this.destination[iter477];
        output.writeI32(iter477);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationConfig = function(args) {
  this.key = null;
  this.caption = null;
  this.allowedForUser = null;
  this.selectedForUser = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.caption !== undefined && args.caption !== null) {
      this.caption = args.caption;
    }
    if (args.allowedForUser !== undefined && args.allowedForUser !== null) {
      this.allowedForUser = Thrift.copyMap(args.allowedForUser, [null]);
    }
    if (args.selectedForUser !== undefined && args.selectedForUser !== null) {
      this.selectedForUser = Thrift.copyMap(args.selectedForUser, [null]);
    }
  }
};
NotificationConfig.prototype = {};
NotificationConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.caption = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size478 = 0;
        var _rtmp3482;
        this.allowedForUser = {};
        var _ktype479 = 0;
        var _vtype480 = 0;
        _rtmp3482 = input.readMapBegin();
        _ktype479 = _rtmp3482.ktype;
        _vtype480 = _rtmp3482.vtype;
        _size478 = _rtmp3482.size;
        for (var _i483 = 0; _i483 < _size478; ++_i483)
        {
          if (_i483 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key484 = null;
          var val485 = null;
          key484 = input.readString().value;
          val485 = input.readBool().value;
          this.allowedForUser[key484] = val485;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size486 = 0;
        var _rtmp3490;
        this.selectedForUser = {};
        var _ktype487 = 0;
        var _vtype488 = 0;
        _rtmp3490 = input.readMapBegin();
        _ktype487 = _rtmp3490.ktype;
        _vtype488 = _rtmp3490.vtype;
        _size486 = _rtmp3490.size;
        for (var _i491 = 0; _i491 < _size486; ++_i491)
        {
          if (_i491 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key492 = null;
          var val493 = null;
          key492 = input.readString().value;
          val493 = input.readBool().value;
          this.selectedForUser[key492] = val493;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationConfig.prototype.write = function(output) {
  output.writeStructBegin('NotificationConfig');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.caption !== null && this.caption !== undefined) {
    output.writeFieldBegin('caption', Thrift.Type.STRING, 2);
    output.writeString(this.caption);
    output.writeFieldEnd();
  }
  if (this.allowedForUser !== null && this.allowedForUser !== undefined) {
    output.writeFieldBegin('allowedForUser', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.BOOL, Thrift.objectLength(this.allowedForUser));
    for (var kiter494 in this.allowedForUser)
    {
      if (this.allowedForUser.hasOwnProperty(kiter494))
      {
        var viter495 = this.allowedForUser[kiter494];
        output.writeString(kiter494);
        output.writeBool(viter495);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.selectedForUser !== null && this.selectedForUser !== undefined) {
    output.writeFieldBegin('selectedForUser', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.BOOL, Thrift.objectLength(this.selectedForUser));
    for (var kiter496 in this.selectedForUser)
    {
      if (this.selectedForUser.hasOwnProperty(kiter496))
      {
        var viter497 = this.selectedForUser[kiter496];
        output.writeString(kiter496);
        output.writeBool(viter497);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarBusinessEvent = function(args) {
  this.id = null;
  this.eDescription = null;
  this.user = null;
  this.events = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.eDescription !== undefined && args.eDescription !== null) {
      this.eDescription = args.eDescription;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.events !== undefined && args.events !== null) {
      this.events = Thrift.copyList(args.events, [CalendarEvent]);
    }
  }
};
CalendarBusinessEvent.prototype = {};
CalendarBusinessEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.eDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.user = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size498 = 0;
        var _rtmp3502;
        this.events = [];
        var _etype501 = 0;
        _rtmp3502 = input.readListBegin();
        _etype501 = _rtmp3502.etype;
        _size498 = _rtmp3502.size;
        for (var _i503 = 0; _i503 < _size498; ++_i503)
        {
          var elem504 = null;
          elem504 = new CalendarEvent();
          elem504.read(input);
          this.events.push(elem504);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarBusinessEvent.prototype.write = function(output) {
  output.writeStructBegin('CalendarBusinessEvent');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.eDescription !== null && this.eDescription !== undefined) {
    output.writeFieldBegin('eDescription', Thrift.Type.STRING, 2);
    output.writeString(this.eDescription);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.BOOL, 3);
    output.writeBool(this.user);
    output.writeFieldEnd();
  }
  if (this.events !== null && this.events !== undefined) {
    output.writeFieldBegin('events', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.events.length);
    for (var iter505 in this.events)
    {
      if (this.events.hasOwnProperty(iter505))
      {
        iter505 = this.events[iter505];
        iter505.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportFilledParam = function(args) {
  this.id = null;
  this.paramType = null;
  this.value = null;
  this.key = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.paramType !== undefined && args.paramType !== null) {
      this.paramType = args.paramType;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
ReportFilledParam.prototype = {};
ReportFilledParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.paramType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportFilledParam.prototype.write = function(output) {
  output.writeStructBegin('ReportFilledParam');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.paramType !== null && this.paramType !== undefined) {
    output.writeFieldBegin('paramType', Thrift.Type.I32, 2);
    output.writeI32(this.paramType);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 4);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterField = function(args) {
  this.id = null;
  this.field = null;
  this.displayName = null;
  this.readonly = null;
  this.enableSorting = null;
  this.enableColumnMenu = null;
  this.enableColumnResizing = null;
  this.visible = null;
  this.minWidth = null;
  this.width = null;
  this.maxWidth = null;
  this.headerCellTemplate = null;
  this.cellTemplate = null;
  this.js = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.field !== undefined && args.field !== null) {
      this.field = args.field;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.readonly !== undefined && args.readonly !== null) {
      this.readonly = args.readonly;
    }
    if (args.enableSorting !== undefined && args.enableSorting !== null) {
      this.enableSorting = args.enableSorting;
    }
    if (args.enableColumnMenu !== undefined && args.enableColumnMenu !== null) {
      this.enableColumnMenu = args.enableColumnMenu;
    }
    if (args.enableColumnResizing !== undefined && args.enableColumnResizing !== null) {
      this.enableColumnResizing = args.enableColumnResizing;
    }
    if (args.visible !== undefined && args.visible !== null) {
      this.visible = args.visible;
    }
    if (args.minWidth !== undefined && args.minWidth !== null) {
      this.minWidth = args.minWidth;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.maxWidth !== undefined && args.maxWidth !== null) {
      this.maxWidth = args.maxWidth;
    }
    if (args.headerCellTemplate !== undefined && args.headerCellTemplate !== null) {
      this.headerCellTemplate = args.headerCellTemplate;
    }
    if (args.cellTemplate !== undefined && args.cellTemplate !== null) {
      this.cellTemplate = args.cellTemplate;
    }
    if (args.js !== undefined && args.js !== null) {
      this.js = args.js;
    }
  }
};
FilterField.prototype = {};
FilterField.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.field = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.readonly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.enableSorting = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.enableColumnMenu = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.enableColumnResizing = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.visible = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.minWidth = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.width = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.maxWidth = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.headerCellTemplate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.cellTemplate = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.js = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterField.prototype.write = function(output) {
  output.writeStructBegin('FilterField');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRING, 2);
    output.writeString(this.field);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 3);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.readonly !== null && this.readonly !== undefined) {
    output.writeFieldBegin('readonly', Thrift.Type.BOOL, 4);
    output.writeBool(this.readonly);
    output.writeFieldEnd();
  }
  if (this.enableSorting !== null && this.enableSorting !== undefined) {
    output.writeFieldBegin('enableSorting', Thrift.Type.BOOL, 5);
    output.writeBool(this.enableSorting);
    output.writeFieldEnd();
  }
  if (this.enableColumnMenu !== null && this.enableColumnMenu !== undefined) {
    output.writeFieldBegin('enableColumnMenu', Thrift.Type.BOOL, 6);
    output.writeBool(this.enableColumnMenu);
    output.writeFieldEnd();
  }
  if (this.enableColumnResizing !== null && this.enableColumnResizing !== undefined) {
    output.writeFieldBegin('enableColumnResizing', Thrift.Type.BOOL, 7);
    output.writeBool(this.enableColumnResizing);
    output.writeFieldEnd();
  }
  if (this.visible !== null && this.visible !== undefined) {
    output.writeFieldBegin('visible', Thrift.Type.BOOL, 8);
    output.writeBool(this.visible);
    output.writeFieldEnd();
  }
  if (this.minWidth !== null && this.minWidth !== undefined) {
    output.writeFieldBegin('minWidth', Thrift.Type.STRING, 9);
    output.writeString(this.minWidth);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.STRING, 10);
    output.writeString(this.width);
    output.writeFieldEnd();
  }
  if (this.maxWidth !== null && this.maxWidth !== undefined) {
    output.writeFieldBegin('maxWidth', Thrift.Type.STRING, 11);
    output.writeString(this.maxWidth);
    output.writeFieldEnd();
  }
  if (this.headerCellTemplate !== null && this.headerCellTemplate !== undefined) {
    output.writeFieldBegin('headerCellTemplate', Thrift.Type.STRING, 12);
    output.writeString(this.headerCellTemplate);
    output.writeFieldEnd();
  }
  if (this.cellTemplate !== null && this.cellTemplate !== undefined) {
    output.writeFieldBegin('cellTemplate', Thrift.Type.STRING, 13);
    output.writeString(this.cellTemplate);
    output.writeFieldEnd();
  }
  if (this.js !== null && this.js !== undefined) {
    output.writeFieldBegin('js', Thrift.Type.STRING, 14);
    output.writeString(this.js);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocFilter = function(args) {
  this.id = null;
  this.name = null;
  this.value = null;
  this.key = null;
  this.filters = null;
  this.fields = null;
  this.position = null;
  this.forMobile = null;
  this.forRegistry = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.filters !== undefined && args.filters !== null) {
      this.filters = Thrift.copyList(args.filters, [CustomFilterItem]);
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = Thrift.copyMap(args.fields, [FilterField]);
    }
    if (args.position !== undefined && args.position !== null) {
      this.position = args.position;
    }
    if (args.forMobile !== undefined && args.forMobile !== null) {
      this.forMobile = args.forMobile;
    }
    if (args.forRegistry !== undefined && args.forRegistry !== null) {
      this.forRegistry = args.forRegistry;
    }
  }
};
DocFilter.prototype = {};
DocFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size506 = 0;
        var _rtmp3510;
        this.filters = [];
        var _etype509 = 0;
        _rtmp3510 = input.readListBegin();
        _etype509 = _rtmp3510.etype;
        _size506 = _rtmp3510.size;
        for (var _i511 = 0; _i511 < _size506; ++_i511)
        {
          var elem512 = null;
          elem512 = new CustomFilterItem();
          elem512.read(input);
          this.filters.push(elem512);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size513 = 0;
        var _rtmp3517;
        this.fields = {};
        var _ktype514 = 0;
        var _vtype515 = 0;
        _rtmp3517 = input.readMapBegin();
        _ktype514 = _rtmp3517.ktype;
        _vtype515 = _rtmp3517.vtype;
        _size513 = _rtmp3517.size;
        for (var _i518 = 0; _i518 < _size513; ++_i518)
        {
          if (_i518 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key519 = null;
          var val520 = null;
          key519 = input.readI32().value;
          val520 = new FilterField();
          val520.read(input);
          this.fields[key519] = val520;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.position = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.forMobile = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.forRegistry = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocFilter.prototype.write = function(output) {
  output.writeStructBegin('DocFilter');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 4);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.filters !== null && this.filters !== undefined) {
    output.writeFieldBegin('filters', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.filters.length);
    for (var iter521 in this.filters)
    {
      if (this.filters.hasOwnProperty(iter521))
      {
        iter521 = this.filters[iter521];
        iter521.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.fields));
    for (var kiter522 in this.fields)
    {
      if (this.fields.hasOwnProperty(kiter522))
      {
        var viter523 = this.fields[kiter522];
        output.writeI32(kiter522);
        viter523.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I32, 7);
    output.writeI32(this.position);
    output.writeFieldEnd();
  }
  if (this.forMobile !== null && this.forMobile !== undefined) {
    output.writeFieldBegin('forMobile', Thrift.Type.BOOL, 8);
    output.writeBool(this.forMobile);
    output.writeFieldEnd();
  }
  if (this.forRegistry !== null && this.forRegistry !== undefined) {
    output.writeFieldBegin('forRegistry', Thrift.Type.BOOL, 9);
    output.writeBool(this.forRegistry);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserKeyData = function(args) {
  this.id = null;
  this.userId = null;
  this.adminId = null;
  this.createDate = null;
  this.confirmDate = null;
  this.keyState = null;
  this.certificateInfo = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.adminId !== undefined && args.adminId !== null) {
      this.adminId = args.adminId;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.confirmDate !== undefined && args.confirmDate !== null) {
      this.confirmDate = args.confirmDate;
    }
    if (args.keyState !== undefined && args.keyState !== null) {
      this.keyState = args.keyState;
    }
    if (args.certificateInfo !== undefined && args.certificateInfo !== null) {
      this.certificateInfo = new CertificateInfo(args.certificateInfo);
    }
  }
};
UserKeyData.prototype = {};
UserKeyData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.adminId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.confirmDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.keyState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.certificateInfo = new CertificateInfo();
        this.certificateInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserKeyData.prototype.write = function(output) {
  output.writeStructBegin('UserKeyData');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.adminId !== null && this.adminId !== undefined) {
    output.writeFieldBegin('adminId', Thrift.Type.STRING, 3);
    output.writeString(this.adminId);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 4);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.confirmDate !== null && this.confirmDate !== undefined) {
    output.writeFieldBegin('confirmDate', Thrift.Type.I64, 5);
    output.writeI64(this.confirmDate);
    output.writeFieldEnd();
  }
  if (this.keyState !== null && this.keyState !== undefined) {
    output.writeFieldBegin('keyState', Thrift.Type.I32, 6);
    output.writeI32(this.keyState);
    output.writeFieldEnd();
  }
  if (this.certificateInfo !== null && this.certificateInfo !== undefined) {
    output.writeFieldBegin('certificateInfo', Thrift.Type.STRUCT, 7);
    this.certificateInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientDelegate = function(args) {
  this.id = null;
  this.fromUserId = null;
  this.toUserId = null;
  this.dateStart = null;
  this.dateEnd = null;
  this.account = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.fromUserId !== undefined && args.fromUserId !== null) {
      this.fromUserId = new UserOrGroup(args.fromUserId);
    }
    if (args.toUserId !== undefined && args.toUserId !== null) {
      this.toUserId = new UserOrGroup(args.toUserId);
    }
    if (args.dateStart !== undefined && args.dateStart !== null) {
      this.dateStart = args.dateStart;
    }
    if (args.dateEnd !== undefined && args.dateEnd !== null) {
      this.dateEnd = args.dateEnd;
    }
    if (args.account !== undefined && args.account !== null) {
      this.account = new Account(args.account);
    }
  }
};
ClientDelegate.prototype = {};
ClientDelegate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fromUserId = new UserOrGroup();
        this.fromUserId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.toUserId = new UserOrGroup();
        this.toUserId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.dateStart = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.dateEnd = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientDelegate.prototype.write = function(output) {
  output.writeStructBegin('ClientDelegate');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.fromUserId !== null && this.fromUserId !== undefined) {
    output.writeFieldBegin('fromUserId', Thrift.Type.STRUCT, 2);
    this.fromUserId.write(output);
    output.writeFieldEnd();
  }
  if (this.toUserId !== null && this.toUserId !== undefined) {
    output.writeFieldBegin('toUserId', Thrift.Type.STRUCT, 3);
    this.toUserId.write(output);
    output.writeFieldEnd();
  }
  if (this.dateStart !== null && this.dateStart !== undefined) {
    output.writeFieldBegin('dateStart', Thrift.Type.I64, 4);
    output.writeI64(this.dateStart);
    output.writeFieldEnd();
  }
  if (this.dateEnd !== null && this.dateEnd !== undefined) {
    output.writeFieldBegin('dateEnd', Thrift.Type.I64, 5);
    output.writeI64(this.dateEnd);
    output.writeFieldEnd();
  }
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 6);
    this.account.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PatternAttachmentTemplate = function(args) {
  this.id = null;
  this.creatorId = null;
  this.createDate = null;
  this.patternId = null;
  this.name = null;
  this.size = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.creatorId !== undefined && args.creatorId !== null) {
      this.creatorId = args.creatorId;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.patternId !== undefined && args.patternId !== null) {
      this.patternId = args.patternId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
  }
};
PatternAttachmentTemplate.prototype = {};
PatternAttachmentTemplate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.creatorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.patternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PatternAttachmentTemplate.prototype.write = function(output) {
  output.writeStructBegin('PatternAttachmentTemplate');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.creatorId !== null && this.creatorId !== undefined) {
    output.writeFieldBegin('creatorId', Thrift.Type.STRING, 2);
    output.writeString(this.creatorId);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 3);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.patternId !== null && this.patternId !== undefined) {
    output.writeFieldBegin('patternId', Thrift.Type.STRING, 4);
    output.writeString(this.patternId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 6);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WeekendDictionary = function(args) {
  this.id = null;
  this.weekendDate = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.weekendDate !== undefined && args.weekendDate !== null) {
      this.weekendDate = args.weekendDate;
    }
  }
};
WeekendDictionary.prototype = {};
WeekendDictionary.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.weekendDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WeekendDictionary.prototype.write = function(output) {
  output.writeStructBegin('WeekendDictionary');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.weekendDate !== null && this.weekendDate !== undefined) {
    output.writeFieldBegin('weekendDate', Thrift.Type.I64, 2);
    output.writeI64(this.weekendDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Registry = function(args) {
  this.id = null;
  this.regName = null;
  this.regDescription = null;
  this.viewRule = null;
  this.userOrGrList = null;
  this.accountList = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.regName !== undefined && args.regName !== null) {
      this.regName = args.regName;
    }
    if (args.regDescription !== undefined && args.regDescription !== null) {
      this.regDescription = args.regDescription;
    }
    if (args.viewRule !== undefined && args.viewRule !== null) {
      this.viewRule = args.viewRule;
    }
    if (args.userOrGrList !== undefined && args.userOrGrList !== null) {
      this.userOrGrList = Thrift.copyList(args.userOrGrList, [UserOrGroup]);
    }
    if (args.accountList !== undefined && args.accountList !== null) {
      this.accountList = Thrift.copyList(args.accountList, [Account]);
    }
  }
};
Registry.prototype = {};
Registry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.regName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.regDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.viewRule = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size524 = 0;
        var _rtmp3528;
        this.userOrGrList = [];
        var _etype527 = 0;
        _rtmp3528 = input.readListBegin();
        _etype527 = _rtmp3528.etype;
        _size524 = _rtmp3528.size;
        for (var _i529 = 0; _i529 < _size524; ++_i529)
        {
          var elem530 = null;
          elem530 = new UserOrGroup();
          elem530.read(input);
          this.userOrGrList.push(elem530);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size531 = 0;
        var _rtmp3535;
        this.accountList = [];
        var _etype534 = 0;
        _rtmp3535 = input.readListBegin();
        _etype534 = _rtmp3535.etype;
        _size531 = _rtmp3535.size;
        for (var _i536 = 0; _i536 < _size531; ++_i536)
        {
          var elem537 = null;
          elem537 = new Account();
          elem537.read(input);
          this.accountList.push(elem537);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Registry.prototype.write = function(output) {
  output.writeStructBegin('Registry');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.regName !== null && this.regName !== undefined) {
    output.writeFieldBegin('regName', Thrift.Type.STRING, 2);
    output.writeString(this.regName);
    output.writeFieldEnd();
  }
  if (this.regDescription !== null && this.regDescription !== undefined) {
    output.writeFieldBegin('regDescription', Thrift.Type.STRING, 3);
    output.writeString(this.regDescription);
    output.writeFieldEnd();
  }
  if (this.viewRule !== null && this.viewRule !== undefined) {
    output.writeFieldBegin('viewRule', Thrift.Type.STRING, 4);
    output.writeString(this.viewRule);
    output.writeFieldEnd();
  }
  if (this.userOrGrList !== null && this.userOrGrList !== undefined) {
    output.writeFieldBegin('userOrGrList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.userOrGrList.length);
    for (var iter538 in this.userOrGrList)
    {
      if (this.userOrGrList.hasOwnProperty(iter538))
      {
        iter538 = this.userOrGrList[iter538];
        iter538.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.accountList !== null && this.accountList !== undefined) {
    output.writeFieldBegin('accountList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.accountList.length);
    for (var iter539 in this.accountList)
    {
      if (this.accountList.hasOwnProperty(iter539))
      {
        iter539 = this.accountList[iter539];
        iter539.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CharMatchingDictionary = function(args) {
  this.id = null;
  this.charSource = null;
  this.charReplace = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.charSource !== undefined && args.charSource !== null) {
      this.charSource = args.charSource;
    }
    if (args.charReplace !== undefined && args.charReplace !== null) {
      this.charReplace = args.charReplace;
    }
  }
};
CharMatchingDictionary.prototype = {};
CharMatchingDictionary.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.charSource = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.charReplace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CharMatchingDictionary.prototype.write = function(output) {
  output.writeStructBegin('CharMatchingDictionary');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.charSource !== null && this.charSource !== undefined) {
    output.writeFieldBegin('charSource', Thrift.Type.STRING, 2);
    output.writeString(this.charSource);
    output.writeFieldEnd();
  }
  if (this.charReplace !== null && this.charReplace !== undefined) {
    output.writeFieldBegin('charReplace', Thrift.Type.STRING, 3);
    output.writeString(this.charReplace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExecutionTree = function(args) {
  this.card = null;
  this.attachments = null;
  this.comments = null;
  this.childTree = null;
  this.parentTree = null;
  if (args) {
    if (args.card !== undefined && args.card !== null) {
      this.card = new DocumentExecution(args.card);
    }
    if (args.attachments !== undefined && args.attachments !== null) {
      this.attachments = Thrift.copyList(args.attachments, [Attachment]);
    }
    if (args.comments !== undefined && args.comments !== null) {
      this.comments = Thrift.copyList(args.comments, [DocumentComment]);
    }
    if (args.childTree !== undefined && args.childTree !== null) {
      this.childTree = Thrift.copyList(args.childTree, [null]);
    }
    if (args.parentTree !== undefined && args.parentTree !== null) {
      this.parentTree = new ExecutionTree(args.parentTree);
    }
  }
};
ExecutionTree.prototype = {};
ExecutionTree.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.card = new DocumentExecution();
        this.card.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size540 = 0;
        var _rtmp3544;
        this.attachments = [];
        var _etype543 = 0;
        _rtmp3544 = input.readListBegin();
        _etype543 = _rtmp3544.etype;
        _size540 = _rtmp3544.size;
        for (var _i545 = 0; _i545 < _size540; ++_i545)
        {
          var elem546 = null;
          elem546 = new Attachment();
          elem546.read(input);
          this.attachments.push(elem546);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size547 = 0;
        var _rtmp3551;
        this.comments = [];
        var _etype550 = 0;
        _rtmp3551 = input.readListBegin();
        _etype550 = _rtmp3551.etype;
        _size547 = _rtmp3551.size;
        for (var _i552 = 0; _i552 < _size547; ++_i552)
        {
          var elem553 = null;
          elem553 = new DocumentComment();
          elem553.read(input);
          this.comments.push(elem553);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size554 = 0;
        var _rtmp3558;
        this.childTree = [];
        var _etype557 = 0;
        _rtmp3558 = input.readListBegin();
        _etype557 = _rtmp3558.etype;
        _size554 = _rtmp3558.size;
        for (var _i559 = 0; _i559 < _size554; ++_i559)
        {
          var elem560 = null;
          elem560 = new ExecutionTree();
          elem560.read(input);
          this.childTree.push(elem560);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.parentTree = new ExecutionTree();
        this.parentTree.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutionTree.prototype.write = function(output) {
  output.writeStructBegin('ExecutionTree');
  if (this.card !== null && this.card !== undefined) {
    output.writeFieldBegin('card', Thrift.Type.STRUCT, 1);
    this.card.write(output);
    output.writeFieldEnd();
  }
  if (this.attachments !== null && this.attachments !== undefined) {
    output.writeFieldBegin('attachments', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.attachments.length);
    for (var iter561 in this.attachments)
    {
      if (this.attachments.hasOwnProperty(iter561))
      {
        iter561 = this.attachments[iter561];
        iter561.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.comments !== null && this.comments !== undefined) {
    output.writeFieldBegin('comments', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.comments.length);
    for (var iter562 in this.comments)
    {
      if (this.comments.hasOwnProperty(iter562))
      {
        iter562 = this.comments[iter562];
        iter562.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.childTree !== null && this.childTree !== undefined) {
    output.writeFieldBegin('childTree', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.childTree.length);
    for (var iter563 in this.childTree)
    {
      if (this.childTree.hasOwnProperty(iter563))
      {
        iter563 = this.childTree[iter563];
        iter563.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parentTree !== null && this.parentTree !== undefined) {
    output.writeFieldBegin('parentTree', Thrift.Type.STRUCT, 5);
    this.parentTree.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FreezePatternValidation = function(args) {
  this.fillPattern = null;
  this.exList = null;
  if (args) {
    if (args.fillPattern !== undefined && args.fillPattern !== null) {
      this.fillPattern = new FreezeDocumentPattern(args.fillPattern);
    }
    if (args.exList !== undefined && args.exList !== null) {
      this.exList = Thrift.copyList(args.exList, [null]);
    }
  }
};
FreezePatternValidation.prototype = {};
FreezePatternValidation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fillPattern = new FreezeDocumentPattern();
        this.fillPattern.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size564 = 0;
        var _rtmp3568;
        this.exList = [];
        var _etype567 = 0;
        _rtmp3568 = input.readListBegin();
        _etype567 = _rtmp3568.etype;
        _size564 = _rtmp3568.size;
        for (var _i569 = 0; _i569 < _size564; ++_i569)
        {
          var elem570 = null;
          elem570 = new PreconditionException();
          elem570.read(input);
          this.exList.push(elem570);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FreezePatternValidation.prototype.write = function(output) {
  output.writeStructBegin('FreezePatternValidation');
  if (this.fillPattern !== null && this.fillPattern !== undefined) {
    output.writeFieldBegin('fillPattern', Thrift.Type.STRUCT, 1);
    this.fillPattern.write(output);
    output.writeFieldEnd();
  }
  if (this.exList !== null && this.exList !== undefined) {
    output.writeFieldBegin('exList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.exList.length);
    for (var iter571 in this.exList)
    {
      if (this.exList.hasOwnProperty(iter571))
      {
        iter571 = this.exList[iter571];
        iter571.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CompositeId = function(args) {
  this.id = null;
  this.version = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
CompositeId.prototype = {};
CompositeId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompositeId.prototype.write = function(output) {
  output.writeStructBegin('CompositeId');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 2);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScriptDictionary = function(args) {
  this.id = null;
  this.name = null;
  this.description = null;
  this.script = null;
  this.valid = null;
  this.type = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = new CompositeId(args.id);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.script !== undefined && args.script !== null) {
      this.script = args.script;
    }
    if (args.valid !== undefined && args.valid !== null) {
      this.valid = args.valid;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
ScriptDictionary.prototype = {};
ScriptDictionary.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new CompositeId();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.script = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.valid = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptDictionary.prototype.write = function(output) {
  output.writeStructBegin('ScriptDictionary');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
    this.id.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.script !== null && this.script !== undefined) {
    output.writeFieldBegin('script', Thrift.Type.STRING, 4);
    output.writeString(this.script);
    output.writeFieldEnd();
  }
  if (this.valid !== null && this.valid !== undefined) {
    output.writeFieldBegin('valid', Thrift.Type.BOOL, 5);
    output.writeBool(this.valid);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 6);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

License = function(args) {
  this.validFrom = null;
  this.validTo = null;
  this.key = null;
  this.userId = null;
  if (args) {
    if (args.validFrom !== undefined && args.validFrom !== null) {
      this.validFrom = args.validFrom;
    }
    if (args.validTo !== undefined && args.validTo !== null) {
      this.validTo = args.validTo;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
License.prototype = {};
License.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.validFrom = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.validTo = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

License.prototype.write = function(output) {
  output.writeStructBegin('License');
  if (this.validFrom !== null && this.validFrom !== undefined) {
    output.writeFieldBegin('validFrom', Thrift.Type.I64, 1);
    output.writeI64(this.validFrom);
    output.writeFieldEnd();
  }
  if (this.validTo !== null && this.validTo !== undefined) {
    output.writeFieldBegin('validTo', Thrift.Type.I64, 2);
    output.writeI64(this.validTo);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 4);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CURRENT_VERSION = '1.0.79';
