//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

DepartmentService_getAllDepartments_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DepartmentService_getAllDepartments_args.prototype = {};
DepartmentService_getAllDepartments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DepartmentService_getAllDepartments_args.prototype.write = function(output) {
  output.writeStructBegin('DepartmentService_getAllDepartments_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DepartmentService_getAllDepartments_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Department]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DepartmentService_getAllDepartments_result.prototype = {};
DepartmentService_getAllDepartments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2104 = 0;
        var _rtmp32108;
        this.success = [];
        var _etype2107 = 0;
        _rtmp32108 = input.readListBegin();
        _etype2107 = _rtmp32108.etype;
        _size2104 = _rtmp32108.size;
        for (var _i2109 = 0; _i2109 < _size2104; ++_i2109)
        {
          var elem2110 = null;
          elem2110 = new Department();
          elem2110.read(input);
          this.success.push(elem2110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DepartmentService_getAllDepartments_result.prototype.write = function(output) {
  output.writeStructBegin('DepartmentService_getAllDepartments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2111 in this.success)
    {
      if (this.success.hasOwnProperty(iter2111))
      {
        iter2111 = this.success[iter2111];
        iter2111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DepartmentService_getUsersByDepartment_args = function(args) {
  this.token = null;
  this.departmentId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.departmentId !== undefined && args.departmentId !== null) {
      this.departmentId = args.departmentId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DepartmentService_getUsersByDepartment_args.prototype = {};
DepartmentService_getUsersByDepartment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.departmentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DepartmentService_getUsersByDepartment_args.prototype.write = function(output) {
  output.writeStructBegin('DepartmentService_getUsersByDepartment_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.departmentId !== null && this.departmentId !== undefined) {
    output.writeFieldBegin('departmentId', Thrift.Type.STRING, 2);
    output.writeString(this.departmentId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DepartmentService_getUsersByDepartment_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserOrGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DepartmentService_getUsersByDepartment_result.prototype = {};
DepartmentService_getUsersByDepartment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2112 = 0;
        var _rtmp32116;
        this.success = [];
        var _etype2115 = 0;
        _rtmp32116 = input.readListBegin();
        _etype2115 = _rtmp32116.etype;
        _size2112 = _rtmp32116.size;
        for (var _i2117 = 0; _i2117 < _size2112; ++_i2117)
        {
          var elem2118 = null;
          elem2118 = new UserOrGroup();
          elem2118.read(input);
          this.success.push(elem2118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DepartmentService_getUsersByDepartment_result.prototype.write = function(output) {
  output.writeStructBegin('DepartmentService_getUsersByDepartment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2119 in this.success)
    {
      if (this.success.hasOwnProperty(iter2119))
      {
        iter2119 = this.success[iter2119];
        iter2119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DepartmentService_updateDepartment_args = function(args) {
  this.token = null;
  this.departmentId = null;
  this.accountId = null;
  this.orgStructureCode = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.departmentId !== undefined && args.departmentId !== null) {
      this.departmentId = args.departmentId;
    }
    if (args.accountId !== undefined && args.accountId !== null) {
      this.accountId = args.accountId;
    }
    if (args.orgStructureCode !== undefined && args.orgStructureCode !== null) {
      this.orgStructureCode = args.orgStructureCode;
    }
  }
};
DepartmentService_updateDepartment_args.prototype = {};
DepartmentService_updateDepartment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.departmentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.orgStructureCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DepartmentService_updateDepartment_args.prototype.write = function(output) {
  output.writeStructBegin('DepartmentService_updateDepartment_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.departmentId !== null && this.departmentId !== undefined) {
    output.writeFieldBegin('departmentId', Thrift.Type.STRING, 2);
    output.writeString(this.departmentId);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 3);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.orgStructureCode !== null && this.orgStructureCode !== undefined) {
    output.writeFieldBegin('orgStructureCode', Thrift.Type.STRING, 4);
    output.writeString(this.orgStructureCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DepartmentService_updateDepartment_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Department(args.success);
    }
  }
};
DepartmentService_updateDepartment_result.prototype = {};
DepartmentService_updateDepartment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Department();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DepartmentService_updateDepartment_result.prototype.write = function(output) {
  output.writeStructBegin('DepartmentService_updateDepartment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DepartmentService_getAllDepartmentsForUser_args = function(args) {
  this.token = null;
  this.userId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
DepartmentService_getAllDepartmentsForUser_args.prototype = {};
DepartmentService_getAllDepartmentsForUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DepartmentService_getAllDepartmentsForUser_args.prototype.write = function(output) {
  output.writeStructBegin('DepartmentService_getAllDepartmentsForUser_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DepartmentService_getAllDepartmentsForUser_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Department]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DepartmentService_getAllDepartmentsForUser_result.prototype = {};
DepartmentService_getAllDepartmentsForUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2120 = 0;
        var _rtmp32124;
        this.success = [];
        var _etype2123 = 0;
        _rtmp32124 = input.readListBegin();
        _etype2123 = _rtmp32124.etype;
        _size2120 = _rtmp32124.size;
        for (var _i2125 = 0; _i2125 < _size2120; ++_i2125)
        {
          var elem2126 = null;
          elem2126 = new Department();
          elem2126.read(input);
          this.success.push(elem2126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DepartmentService_getAllDepartmentsForUser_result.prototype.write = function(output) {
  output.writeStructBegin('DepartmentService_getAllDepartmentsForUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2127 in this.success)
    {
      if (this.success.hasOwnProperty(iter2127))
      {
        iter2127 = this.success[iter2127];
        iter2127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DepartmentServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
DepartmentServiceClient.prototype = {};
DepartmentServiceClient.prototype.getAllDepartments = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllDepartments(token, filter);
    return this.recv_getAllDepartments();
  } else {
    var postData = this.send_getAllDepartments(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDepartments);
  }
};

DepartmentServiceClient.prototype.send_getAllDepartments = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllDepartments', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new DepartmentService_getAllDepartments_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DepartmentServiceClient.prototype.recv_getAllDepartments = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DepartmentService_getAllDepartments_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDepartments failed: unknown result';
};
DepartmentServiceClient.prototype.getUsersByDepartment = function(token, departmentId, filter, callback) {
  if (callback === undefined) {
    this.send_getUsersByDepartment(token, departmentId, filter);
    return this.recv_getUsersByDepartment();
  } else {
    var postData = this.send_getUsersByDepartment(token, departmentId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getUsersByDepartment);
  }
};

DepartmentServiceClient.prototype.send_getUsersByDepartment = function(token, departmentId, filter, callback) {
  this.output.writeMessageBegin('getUsersByDepartment', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    departmentId: departmentId,
    filter: filter
  };
  var args = new DepartmentService_getUsersByDepartment_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DepartmentServiceClient.prototype.recv_getUsersByDepartment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DepartmentService_getUsersByDepartment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getUsersByDepartment failed: unknown result';
};
DepartmentServiceClient.prototype.updateDepartment = function(token, departmentId, accountId, orgStructureCode, callback) {
  if (callback === undefined) {
    this.send_updateDepartment(token, departmentId, accountId, orgStructureCode);
    return this.recv_updateDepartment();
  } else {
    var postData = this.send_updateDepartment(token, departmentId, accountId, orgStructureCode, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateDepartment);
  }
};

DepartmentServiceClient.prototype.send_updateDepartment = function(token, departmentId, accountId, orgStructureCode, callback) {
  this.output.writeMessageBegin('updateDepartment', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    departmentId: departmentId,
    accountId: accountId,
    orgStructureCode: orgStructureCode
  };
  var args = new DepartmentService_updateDepartment_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DepartmentServiceClient.prototype.recv_updateDepartment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DepartmentService_updateDepartment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateDepartment failed: unknown result';
};
DepartmentServiceClient.prototype.getAllDepartmentsForUser = function(token, userId, callback) {
  if (callback === undefined) {
    this.send_getAllDepartmentsForUser(token, userId);
    return this.recv_getAllDepartmentsForUser();
  } else {
    var postData = this.send_getAllDepartmentsForUser(token, userId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDepartmentsForUser);
  }
};

DepartmentServiceClient.prototype.send_getAllDepartmentsForUser = function(token, userId, callback) {
  this.output.writeMessageBegin('getAllDepartmentsForUser', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userId: userId
  };
  var args = new DepartmentService_getAllDepartmentsForUser_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DepartmentServiceClient.prototype.recv_getAllDepartmentsForUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DepartmentService_getAllDepartmentsForUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDepartmentsForUser failed: unknown result';
};
