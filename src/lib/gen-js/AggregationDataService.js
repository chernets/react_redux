//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

AggregationDataService_getDocumentData_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.requiredData = null;
  this.registryId = null;
  this.decrypt = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.requiredData !== undefined && args.requiredData !== null) {
      this.requiredData = Thrift.copyList(args.requiredData, [null]);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.decrypt !== undefined && args.decrypt !== null) {
      this.decrypt = args.decrypt;
    }
  }
};
AggregationDataService_getDocumentData_args.prototype = {};
AggregationDataService_getDocumentData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size572 = 0;
        var _rtmp3576;
        this.requiredData = [];
        var _etype575 = 0;
        _rtmp3576 = input.readSetBegin();
        _etype575 = _rtmp3576.etype;
        _size572 = _rtmp3576.size;
        for (var _i577 = 0; _i577 < _size572; ++_i577)
        {
          var elem578 = null;
          elem578 = input.readI32().value;
          this.requiredData.push(elem578);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.decrypt = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationDataService_getDocumentData_args.prototype.write = function(output) {
  output.writeStructBegin('AggregationDataService_getDocumentData_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.requiredData !== null && this.requiredData !== undefined) {
    output.writeFieldBegin('requiredData', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.I32, this.requiredData.length);
    for (var iter579 in this.requiredData)
    {
      if (this.requiredData.hasOwnProperty(iter579))
      {
        iter579 = this.requiredData[iter579];
        output.writeI32(iter579);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.decrypt !== null && this.decrypt !== undefined) {
    output.writeFieldBegin('decrypt', Thrift.Type.BOOL, 5);
    output.writeBool(this.decrypt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationDataService_getDocumentData_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new AggregationDocumentData(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AggregationDataService_getDocumentData_result.prototype = {};
AggregationDataService_getDocumentData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AggregationDocumentData();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationDataService_getDocumentData_result.prototype.write = function(output) {
  output.writeStructBegin('AggregationDataService_getDocumentData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationDataService_getAllRegistries_args = function(args) {
  this.token = null;
  this.filter = null;
  this.forAdmin = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
    if (args.forAdmin !== undefined && args.forAdmin !== null) {
      this.forAdmin = args.forAdmin;
    }
  }
};
AggregationDataService_getAllRegistries_args.prototype = {};
AggregationDataService_getAllRegistries_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.forAdmin = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationDataService_getAllRegistries_args.prototype.write = function(output) {
  output.writeStructBegin('AggregationDataService_getAllRegistries_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.forAdmin !== null && this.forAdmin !== undefined) {
    output.writeFieldBegin('forAdmin', Thrift.Type.BOOL, 3);
    output.writeBool(this.forAdmin);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationDataService_getAllRegistries_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Registry]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AggregationDataService_getAllRegistries_result.prototype = {};
AggregationDataService_getAllRegistries_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size580 = 0;
        var _rtmp3584;
        this.success = [];
        var _etype583 = 0;
        _rtmp3584 = input.readListBegin();
        _etype583 = _rtmp3584.etype;
        _size580 = _rtmp3584.size;
        for (var _i585 = 0; _i585 < _size580; ++_i585)
        {
          var elem586 = null;
          elem586 = new Registry();
          elem586.read(input);
          this.success.push(elem586);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationDataService_getAllRegistries_result.prototype.write = function(output) {
  output.writeStructBegin('AggregationDataService_getAllRegistries_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter587 in this.success)
    {
      if (this.success.hasOwnProperty(iter587))
      {
        iter587 = this.success[iter587];
        iter587.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationDataService_getRegistryById_args = function(args) {
  this.token = null;
  this.id = null;
  this.requiredData = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.requiredData !== undefined && args.requiredData !== null) {
      this.requiredData = Thrift.copyList(args.requiredData, [null]);
    }
  }
};
AggregationDataService_getRegistryById_args.prototype = {};
AggregationDataService_getRegistryById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size588 = 0;
        var _rtmp3592;
        this.requiredData = [];
        var _etype591 = 0;
        _rtmp3592 = input.readSetBegin();
        _etype591 = _rtmp3592.etype;
        _size588 = _rtmp3592.size;
        for (var _i593 = 0; _i593 < _size588; ++_i593)
        {
          var elem594 = null;
          elem594 = input.readI32().value;
          this.requiredData.push(elem594);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationDataService_getRegistryById_args.prototype.write = function(output) {
  output.writeStructBegin('AggregationDataService_getRegistryById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.requiredData !== null && this.requiredData !== undefined) {
    output.writeFieldBegin('requiredData', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.I32, this.requiredData.length);
    for (var iter595 in this.requiredData)
    {
      if (this.requiredData.hasOwnProperty(iter595))
      {
        iter595 = this.requiredData[iter595];
        output.writeI32(iter595);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationDataService_getRegistryById_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Registry(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AggregationDataService_getRegistryById_result.prototype = {};
AggregationDataService_getRegistryById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Registry();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationDataService_getRegistryById_result.prototype.write = function(output) {
  output.writeStructBegin('AggregationDataService_getRegistryById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationDataService_removeRegistry_args = function(args) {
  this.token = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
AggregationDataService_removeRegistry_args.prototype = {};
AggregationDataService_removeRegistry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationDataService_removeRegistry_args.prototype.write = function(output) {
  output.writeStructBegin('AggregationDataService_removeRegistry_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 2);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationDataService_removeRegistry_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AggregationDataService_removeRegistry_result.prototype = {};
AggregationDataService_removeRegistry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationDataService_removeRegistry_result.prototype.write = function(output) {
  output.writeStructBegin('AggregationDataService_removeRegistry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationDataService_createOrUpdateRegistry_args = function(args) {
  this.token = null;
  this.registry = null;
  this.userOrGroupList = null;
  this.accountList = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.registry !== undefined && args.registry !== null) {
      this.registry = new Registry(args.registry);
    }
    if (args.userOrGroupList !== undefined && args.userOrGroupList !== null) {
      this.userOrGroupList = Thrift.copyList(args.userOrGroupList, [UserOrGroup]);
    }
    if (args.accountList !== undefined && args.accountList !== null) {
      this.accountList = Thrift.copyList(args.accountList, [Account]);
    }
  }
};
AggregationDataService_createOrUpdateRegistry_args.prototype = {};
AggregationDataService_createOrUpdateRegistry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.registry = new Registry();
        this.registry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size596 = 0;
        var _rtmp3600;
        this.userOrGroupList = [];
        var _etype599 = 0;
        _rtmp3600 = input.readListBegin();
        _etype599 = _rtmp3600.etype;
        _size596 = _rtmp3600.size;
        for (var _i601 = 0; _i601 < _size596; ++_i601)
        {
          var elem602 = null;
          elem602 = new UserOrGroup();
          elem602.read(input);
          this.userOrGroupList.push(elem602);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size603 = 0;
        var _rtmp3607;
        this.accountList = [];
        var _etype606 = 0;
        _rtmp3607 = input.readListBegin();
        _etype606 = _rtmp3607.etype;
        _size603 = _rtmp3607.size;
        for (var _i608 = 0; _i608 < _size603; ++_i608)
        {
          var elem609 = null;
          elem609 = new Account();
          elem609.read(input);
          this.accountList.push(elem609);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationDataService_createOrUpdateRegistry_args.prototype.write = function(output) {
  output.writeStructBegin('AggregationDataService_createOrUpdateRegistry_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.registry !== null && this.registry !== undefined) {
    output.writeFieldBegin('registry', Thrift.Type.STRUCT, 2);
    this.registry.write(output);
    output.writeFieldEnd();
  }
  if (this.userOrGroupList !== null && this.userOrGroupList !== undefined) {
    output.writeFieldBegin('userOrGroupList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroupList.length);
    for (var iter610 in this.userOrGroupList)
    {
      if (this.userOrGroupList.hasOwnProperty(iter610))
      {
        iter610 = this.userOrGroupList[iter610];
        iter610.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.accountList !== null && this.accountList !== undefined) {
    output.writeFieldBegin('accountList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.accountList.length);
    for (var iter611 in this.accountList)
    {
      if (this.accountList.hasOwnProperty(iter611))
      {
        iter611 = this.accountList[iter611];
        iter611.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationDataService_createOrUpdateRegistry_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Registry(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AggregationDataService_createOrUpdateRegistry_result.prototype = {};
AggregationDataService_createOrUpdateRegistry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Registry();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationDataService_createOrUpdateRegistry_result.prototype.write = function(output) {
  output.writeStructBegin('AggregationDataService_createOrUpdateRegistry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationDataService_compareJiraTime_args = function(args) {
  this.jiraTime1 = null;
  this.jiraTime2 = null;
  if (args) {
    if (args.jiraTime1 !== undefined && args.jiraTime1 !== null) {
      this.jiraTime1 = args.jiraTime1;
    }
    if (args.jiraTime2 !== undefined && args.jiraTime2 !== null) {
      this.jiraTime2 = args.jiraTime2;
    }
  }
};
AggregationDataService_compareJiraTime_args.prototype = {};
AggregationDataService_compareJiraTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jiraTime1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.jiraTime2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationDataService_compareJiraTime_args.prototype.write = function(output) {
  output.writeStructBegin('AggregationDataService_compareJiraTime_args');
  if (this.jiraTime1 !== null && this.jiraTime1 !== undefined) {
    output.writeFieldBegin('jiraTime1', Thrift.Type.STRING, 1);
    output.writeString(this.jiraTime1);
    output.writeFieldEnd();
  }
  if (this.jiraTime2 !== null && this.jiraTime2 !== undefined) {
    output.writeFieldBegin('jiraTime2', Thrift.Type.STRING, 2);
    output.writeString(this.jiraTime2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationDataService_compareJiraTime_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AggregationDataService_compareJiraTime_result.prototype = {};
AggregationDataService_compareJiraTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggregationDataService_compareJiraTime_result.prototype.write = function(output) {
  output.writeStructBegin('AggregationDataService_compareJiraTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggregationDataServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
AggregationDataServiceClient.prototype = {};
AggregationDataServiceClient.prototype.getDocumentData = function(token, documentId, requiredData, registryId, decrypt, callback) {
  if (callback === undefined) {
    this.send_getDocumentData(token, documentId, requiredData, registryId, decrypt);
    return this.recv_getDocumentData();
  } else {
    var postData = this.send_getDocumentData(token, documentId, requiredData, registryId, decrypt, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDocumentData);
  }
};

AggregationDataServiceClient.prototype.send_getDocumentData = function(token, documentId, requiredData, registryId, decrypt, callback) {
  this.output.writeMessageBegin('getDocumentData', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    requiredData: requiredData,
    registryId: registryId,
    decrypt: decrypt
  };
  var args = new AggregationDataService_getDocumentData_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AggregationDataServiceClient.prototype.recv_getDocumentData = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AggregationDataService_getDocumentData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDocumentData failed: unknown result';
};
AggregationDataServiceClient.prototype.getAllRegistries = function(token, filter, forAdmin, callback) {
  if (callback === undefined) {
    this.send_getAllRegistries(token, filter, forAdmin);
    return this.recv_getAllRegistries();
  } else {
    var postData = this.send_getAllRegistries(token, filter, forAdmin, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllRegistries);
  }
};

AggregationDataServiceClient.prototype.send_getAllRegistries = function(token, filter, forAdmin, callback) {
  this.output.writeMessageBegin('getAllRegistries', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter,
    forAdmin: forAdmin
  };
  var args = new AggregationDataService_getAllRegistries_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AggregationDataServiceClient.prototype.recv_getAllRegistries = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AggregationDataService_getAllRegistries_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllRegistries failed: unknown result';
};
AggregationDataServiceClient.prototype.getRegistryById = function(token, id, requiredData, callback) {
  if (callback === undefined) {
    this.send_getRegistryById(token, id, requiredData);
    return this.recv_getRegistryById();
  } else {
    var postData = this.send_getRegistryById(token, id, requiredData, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getRegistryById);
  }
};

AggregationDataServiceClient.prototype.send_getRegistryById = function(token, id, requiredData, callback) {
  this.output.writeMessageBegin('getRegistryById', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    id: id,
    requiredData: requiredData
  };
  var args = new AggregationDataService_getRegistryById_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AggregationDataServiceClient.prototype.recv_getRegistryById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AggregationDataService_getRegistryById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getRegistryById failed: unknown result';
};
AggregationDataServiceClient.prototype.removeRegistry = function(token, registryId, callback) {
  if (callback === undefined) {
    this.send_removeRegistry(token, registryId);
    return this.recv_removeRegistry();
  } else {
    var postData = this.send_removeRegistry(token, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeRegistry);
  }
};

AggregationDataServiceClient.prototype.send_removeRegistry = function(token, registryId, callback) {
  this.output.writeMessageBegin('removeRegistry', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    registryId: registryId
  };
  var args = new AggregationDataService_removeRegistry_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AggregationDataServiceClient.prototype.recv_removeRegistry = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AggregationDataService_removeRegistry_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeRegistry failed: unknown result';
};
AggregationDataServiceClient.prototype.createOrUpdateRegistry = function(token, registry, userOrGroupList, accountList, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateRegistry(token, registry, userOrGroupList, accountList);
    return this.recv_createOrUpdateRegistry();
  } else {
    var postData = this.send_createOrUpdateRegistry(token, registry, userOrGroupList, accountList, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateRegistry);
  }
};

AggregationDataServiceClient.prototype.send_createOrUpdateRegistry = function(token, registry, userOrGroupList, accountList, callback) {
  this.output.writeMessageBegin('createOrUpdateRegistry', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    registry: registry,
    userOrGroupList: userOrGroupList,
    accountList: accountList
  };
  var args = new AggregationDataService_createOrUpdateRegistry_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AggregationDataServiceClient.prototype.recv_createOrUpdateRegistry = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AggregationDataService_createOrUpdateRegistry_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateRegistry failed: unknown result';
};
AggregationDataServiceClient.prototype.compareJiraTime = function(jiraTime1, jiraTime2, callback) {
  if (callback === undefined) {
    this.send_compareJiraTime(jiraTime1, jiraTime2);
    return this.recv_compareJiraTime();
  } else {
    var postData = this.send_compareJiraTime(jiraTime1, jiraTime2, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_compareJiraTime);
  }
};

AggregationDataServiceClient.prototype.send_compareJiraTime = function(jiraTime1, jiraTime2, callback) {
  this.output.writeMessageBegin('compareJiraTime', Thrift.MessageType.CALL, this.seqid);
  var params = {
    jiraTime1: jiraTime1,
    jiraTime2: jiraTime2
  };
  var args = new AggregationDataService_compareJiraTime_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AggregationDataServiceClient.prototype.recv_compareJiraTime = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AggregationDataService_compareJiraTime_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'compareJiraTime failed: unknown result';
};
