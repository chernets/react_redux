//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


MessageType = {
  'NORMAL' : 0,
  'AUDIO' : 1,
  'OBJ' : 2
};
FilterCondition = {
  'EQUAL' : 0,
  'NOT_EQUAL' : 1,
  'CONTAIN' : 2,
  'NOT_CONTAIN' : 3,
  'LESS' : 4,
  'LESS_OR_EQUAL' : 5,
  'MORE' : 6,
  'MORE_OR_EQUAL' : 7,
  'IN' : 8,
  'NOT_IN' : 9
};
FilterFieldType = {
  'STRING' : 0,
  'NUMBER' : 1,
  'DATE' : 2,
  'BOOLEAN' : 3,
  'ENUMERATED' : 4,
  'DOUBLE' : 5
};
ServerException = function(args) {
  this.serverExceptionKey = null;
  if (args) {
    if (args.serverExceptionKey !== undefined && args.serverExceptionKey !== null) {
      this.serverExceptionKey = args.serverExceptionKey;
    }
  }
};
Thrift.inherits(ServerException, Thrift.TException);
ServerException.prototype.name = 'ServerException';
ServerException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serverExceptionKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServerException.prototype.write = function(output) {
  output.writeStructBegin('ServerException');
  if (this.serverExceptionKey !== null && this.serverExceptionKey !== undefined) {
    output.writeFieldBegin('serverExceptionKey', Thrift.Type.STRING, 1);
    output.writeString(this.serverExceptionKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PreconditionException = function(args) {
  this.preconditionExceptionKey = null;
  this.param = null;
  if (args) {
    if (args.preconditionExceptionKey !== undefined && args.preconditionExceptionKey !== null) {
      this.preconditionExceptionKey = args.preconditionExceptionKey;
    }
    if (args.param !== undefined && args.param !== null) {
      this.param = args.param;
    }
  }
};
Thrift.inherits(PreconditionException, Thrift.TException);
PreconditionException.prototype.name = 'PreconditionException';
PreconditionException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.preconditionExceptionKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.param = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PreconditionException.prototype.write = function(output) {
  output.writeStructBegin('PreconditionException');
  if (this.preconditionExceptionKey !== null && this.preconditionExceptionKey !== undefined) {
    output.writeFieldBegin('preconditionExceptionKey', Thrift.Type.STRING, 1);
    output.writeString(this.preconditionExceptionKey);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRING, 2);
    output.writeString(this.param);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ObjType = function(args) {
  this.id = null;
  this.objType = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.objType !== undefined && args.objType !== null) {
      this.objType = args.objType;
    }
  }
};
ObjType.prototype = {};
ObjType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.objType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ObjType.prototype.write = function(output) {
  output.writeStructBegin('ObjType');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.objType !== null && this.objType !== undefined) {
    output.writeFieldBegin('objType', Thrift.Type.STRING, 2);
    output.writeString(this.objType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Message = function(args) {
  this.id = null;
  this.createDate = null;
  this.authorId = null;
  this.originalUserId = null;
  this.groupId = null;
  this.message = null;
  this.isRead = null;
  this.msgType = null;
  this.objDescribe = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.authorId !== undefined && args.authorId !== null) {
      this.authorId = args.authorId;
    }
    if (args.originalUserId !== undefined && args.originalUserId !== null) {
      this.originalUserId = args.originalUserId;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.isRead !== undefined && args.isRead !== null) {
      this.isRead = args.isRead;
    }
    if (args.msgType !== undefined && args.msgType !== null) {
      this.msgType = args.msgType;
    }
    if (args.objDescribe !== undefined && args.objDescribe !== null) {
      this.objDescribe = new ObjType(args.objDescribe);
    }
  }
};
Message.prototype = {};
Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.authorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.originalUserId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.groupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isRead = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.msgType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.objDescribe = new ObjType();
        this.objDescribe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 2);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.authorId !== null && this.authorId !== undefined) {
    output.writeFieldBegin('authorId', Thrift.Type.STRING, 3);
    output.writeString(this.authorId);
    output.writeFieldEnd();
  }
  if (this.originalUserId !== null && this.originalUserId !== undefined) {
    output.writeFieldBegin('originalUserId', Thrift.Type.STRING, 4);
    output.writeString(this.originalUserId);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.STRING, 5);
    output.writeString(this.groupId);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 6);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.isRead !== null && this.isRead !== undefined) {
    output.writeFieldBegin('isRead', Thrift.Type.BOOL, 7);
    output.writeBool(this.isRead);
    output.writeFieldEnd();
  }
  if (this.msgType !== null && this.msgType !== undefined) {
    output.writeFieldBegin('msgType', Thrift.Type.I32, 8);
    output.writeI32(this.msgType);
    output.writeFieldEnd();
  }
  if (this.objDescribe !== null && this.objDescribe !== undefined) {
    output.writeFieldBegin('objDescribe', Thrift.Type.STRUCT, 9);
    this.objDescribe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Group = function(args) {
  this.id = null;
  this.nameGroup = null;
  this.documentId = null;
  this.authorId = null;
  this.shared = null;
  this.lastMessage = null;
  this.listen = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.nameGroup !== undefined && args.nameGroup !== null) {
      this.nameGroup = args.nameGroup;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.authorId !== undefined && args.authorId !== null) {
      this.authorId = args.authorId;
    }
    if (args.shared !== undefined && args.shared !== null) {
      this.shared = args.shared;
    }
    if (args.lastMessage !== undefined && args.lastMessage !== null) {
      this.lastMessage = new Message(args.lastMessage);
    }
    if (args.listen !== undefined && args.listen !== null) {
      this.listen = args.listen;
    }
  }
};
Group.prototype = {};
Group.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nameGroup = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.authorId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.shared = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.lastMessage = new Message();
        this.lastMessage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.listen = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Group.prototype.write = function(output) {
  output.writeStructBegin('Group');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.nameGroup !== null && this.nameGroup !== undefined) {
    output.writeFieldBegin('nameGroup', Thrift.Type.STRING, 2);
    output.writeString(this.nameGroup);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 3);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.authorId !== null && this.authorId !== undefined) {
    output.writeFieldBegin('authorId', Thrift.Type.STRING, 4);
    output.writeString(this.authorId);
    output.writeFieldEnd();
  }
  if (this.shared !== null && this.shared !== undefined) {
    output.writeFieldBegin('shared', Thrift.Type.BOOL, 5);
    output.writeBool(this.shared);
    output.writeFieldEnd();
  }
  if (this.lastMessage !== null && this.lastMessage !== undefined) {
    output.writeFieldBegin('lastMessage', Thrift.Type.STRUCT, 6);
    this.lastMessage.write(output);
    output.writeFieldEnd();
  }
  if (this.listen !== null && this.listen !== undefined) {
    output.writeFieldBegin('listen', Thrift.Type.BOOL, 7);
    output.writeBool(this.listen);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GroupInformation = function(args) {
  this.group = null;
  this.messagesCount = null;
  if (args) {
    if (args.group !== undefined && args.group !== null) {
      this.group = new Group(args.group);
    }
    if (args.messagesCount !== undefined && args.messagesCount !== null) {
      this.messagesCount = args.messagesCount;
    }
  }
};
GroupInformation.prototype = {};
GroupInformation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.group = new Group();
        this.group.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.messagesCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupInformation.prototype.write = function(output) {
  output.writeStructBegin('GroupInformation');
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRUCT, 1);
    this.group.write(output);
    output.writeFieldEnd();
  }
  if (this.messagesCount !== null && this.messagesCount !== undefined) {
    output.writeFieldBegin('messagesCount', Thrift.Type.I64, 2);
    output.writeI64(this.messagesCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterItem = function(args) {
  this.field = null;
  this.fType = null;
  this.condition = null;
  this.value = null;
  if (args) {
    if (args.field !== undefined && args.field !== null) {
      this.field = args.field;
    }
    if (args.fType !== undefined && args.fType !== null) {
      this.fType = args.fType;
    }
    if (args.condition !== undefined && args.condition !== null) {
      this.condition = args.condition;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
FilterItem.prototype = {};
FilterItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.field = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.fType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.condition = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterItem.prototype.write = function(output) {
  output.writeStructBegin('FilterItem');
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRING, 1);
    output.writeString(this.field);
    output.writeFieldEnd();
  }
  if (this.fType !== null && this.fType !== undefined) {
    output.writeFieldBegin('fType', Thrift.Type.I32, 2);
    output.writeI32(this.fType);
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.I32, 3);
    output.writeI32(this.condition);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChatFilter = function(args) {
  this.position = null;
  this.countFilter = null;
  this.items = null;
  this.serverId = null;
  this.orders = null;
  if (args) {
    if (args.position !== undefined && args.position !== null) {
      this.position = args.position;
    }
    if (args.countFilter !== undefined && args.countFilter !== null) {
      this.countFilter = args.countFilter;
    }
    if (args.items !== undefined && args.items !== null) {
      this.items = Thrift.copyList(args.items, [FilterItem]);
    }
    if (args.serverId !== undefined && args.serverId !== null) {
      this.serverId = args.serverId;
    }
    if (args.orders !== undefined && args.orders !== null) {
      this.orders = Thrift.copyList(args.orders, [null]);
    }
  }
};
ChatFilter.prototype = {};
ChatFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.position = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.countFilter = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.items = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new FilterItem();
          elem6.read(input);
          this.items.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.serverId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.orders = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.orders.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatFilter.prototype.write = function(output) {
  output.writeStructBegin('ChatFilter');
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I32, 1);
    output.writeI32(this.position);
    output.writeFieldEnd();
  }
  if (this.countFilter !== null && this.countFilter !== undefined) {
    output.writeFieldBegin('countFilter', Thrift.Type.I32, 2);
    output.writeI32(this.countFilter);
    output.writeFieldEnd();
  }
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter14 in this.items)
    {
      if (this.items.hasOwnProperty(iter14))
      {
        iter14 = this.items[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.serverId !== null && this.serverId !== undefined) {
    output.writeFieldBegin('serverId', Thrift.Type.STRING, 4);
    output.writeString(this.serverId);
    output.writeFieldEnd();
  }
  if (this.orders !== null && this.orders !== undefined) {
    output.writeFieldBegin('orders', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.orders.length);
    for (var iter15 in this.orders)
    {
      if (this.orders.hasOwnProperty(iter15))
      {
        iter15 = this.orders[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChatUser = function(args) {
  this.id = null;
  this.userName = null;
  this.present = null;
  this.avatarUrl = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.userName !== undefined && args.userName !== null) {
      this.userName = args.userName;
    }
    if (args.present !== undefined && args.present !== null) {
      this.present = args.present;
    }
    if (args.avatarUrl !== undefined && args.avatarUrl !== null) {
      this.avatarUrl = args.avatarUrl;
    }
  }
};
ChatUser.prototype = {};
ChatUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.present = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.avatarUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatUser.prototype.write = function(output) {
  output.writeStructBegin('ChatUser');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 2);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.present !== null && this.present !== undefined) {
    output.writeFieldBegin('present', Thrift.Type.BOOL, 3);
    output.writeBool(this.present);
    output.writeFieldEnd();
  }
  if (this.avatarUrl !== null && this.avatarUrl !== undefined) {
    output.writeFieldBegin('avatarUrl', Thrift.Type.STRING, 4);
    output.writeString(this.avatarUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CURRENT_VERSION = '1.0-alpha.46';
