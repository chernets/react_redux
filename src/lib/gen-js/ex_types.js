//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


ServerException = function(args) {
  this.serverExceptionKey = null;
  if (args) {
    if (args.serverExceptionKey !== undefined && args.serverExceptionKey !== null) {
      this.serverExceptionKey = args.serverExceptionKey;
    }
  }
};
Thrift.inherits(ServerException, Thrift.TException);
ServerException.prototype.name = 'ServerException';
ServerException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serverExceptionKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServerException.prototype.write = function(output) {
  output.writeStructBegin('ServerException');
  if (this.serverExceptionKey !== null && this.serverExceptionKey !== undefined) {
    output.writeFieldBegin('serverExceptionKey', Thrift.Type.STRING, 1);
    output.writeString(this.serverExceptionKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PreconditionException = function(args) {
  this.preconditionExceptionKey = null;
  this.params = null;
  this.message = null;
  if (args) {
    if (args.preconditionExceptionKey !== undefined && args.preconditionExceptionKey !== null) {
      this.preconditionExceptionKey = args.preconditionExceptionKey;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [null]);
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(PreconditionException, Thrift.TException);
PreconditionException.prototype.name = 'PreconditionException';
PreconditionException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.preconditionExceptionKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.params = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.params.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PreconditionException.prototype.write = function(output) {
  output.writeStructBegin('PreconditionException');
  if (this.preconditionExceptionKey !== null && this.preconditionExceptionKey !== undefined) {
    output.writeFieldBegin('preconditionExceptionKey', Thrift.Type.STRING, 1);
    output.writeString(this.preconditionExceptionKey);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.params.length);
    for (var iter7 in this.params)
    {
      if (this.params.hasOwnProperty(iter7))
      {
        iter7 = this.params[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

