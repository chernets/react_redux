//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ScriptDictionaryService_getAllScriptDictionaries_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
ScriptDictionaryService_getAllScriptDictionaries_args.prototype = {};
ScriptDictionaryService_getAllScriptDictionaries_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptDictionaryService_getAllScriptDictionaries_args.prototype.write = function(output) {
  output.writeStructBegin('ScriptDictionaryService_getAllScriptDictionaries_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScriptDictionaryService_getAllScriptDictionaries_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ScriptDictionary]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ScriptDictionaryService_getAllScriptDictionaries_result.prototype = {};
ScriptDictionaryService_getAllScriptDictionaries_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2386 = 0;
        var _rtmp32390;
        this.success = [];
        var _etype2389 = 0;
        _rtmp32390 = input.readListBegin();
        _etype2389 = _rtmp32390.etype;
        _size2386 = _rtmp32390.size;
        for (var _i2391 = 0; _i2391 < _size2386; ++_i2391)
        {
          var elem2392 = null;
          elem2392 = new ScriptDictionary();
          elem2392.read(input);
          this.success.push(elem2392);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptDictionaryService_getAllScriptDictionaries_result.prototype.write = function(output) {
  output.writeStructBegin('ScriptDictionaryService_getAllScriptDictionaries_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2393 in this.success)
    {
      if (this.success.hasOwnProperty(iter2393))
      {
        iter2393 = this.success[iter2393];
        iter2393.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScriptDictionaryService_getScriptDictionaryById_args = function(args) {
  this.token = null;
  this.id = null;
  this.withContext = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = new CompositeId(args.id);
    }
    if (args.withContext !== undefined && args.withContext !== null) {
      this.withContext = args.withContext;
    }
  }
};
ScriptDictionaryService_getScriptDictionaryById_args.prototype = {};
ScriptDictionaryService_getScriptDictionaryById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new CompositeId();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withContext = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptDictionaryService_getScriptDictionaryById_args.prototype.write = function(output) {
  output.writeStructBegin('ScriptDictionaryService_getScriptDictionaryById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 2);
    this.id.write(output);
    output.writeFieldEnd();
  }
  if (this.withContext !== null && this.withContext !== undefined) {
    output.writeFieldBegin('withContext', Thrift.Type.BOOL, 3);
    output.writeBool(this.withContext);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScriptDictionaryService_getScriptDictionaryById_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ScriptDictionary(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ScriptDictionaryService_getScriptDictionaryById_result.prototype = {};
ScriptDictionaryService_getScriptDictionaryById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ScriptDictionary();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptDictionaryService_getScriptDictionaryById_result.prototype.write = function(output) {
  output.writeStructBegin('ScriptDictionaryService_getScriptDictionaryById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScriptDictionaryService_createOrUpdateScriptDictionary_args = function(args) {
  this.token = null;
  this.scriptDictionary = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.scriptDictionary !== undefined && args.scriptDictionary !== null) {
      this.scriptDictionary = new ScriptDictionary(args.scriptDictionary);
    }
  }
};
ScriptDictionaryService_createOrUpdateScriptDictionary_args.prototype = {};
ScriptDictionaryService_createOrUpdateScriptDictionary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.scriptDictionary = new ScriptDictionary();
        this.scriptDictionary.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptDictionaryService_createOrUpdateScriptDictionary_args.prototype.write = function(output) {
  output.writeStructBegin('ScriptDictionaryService_createOrUpdateScriptDictionary_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.scriptDictionary !== null && this.scriptDictionary !== undefined) {
    output.writeFieldBegin('scriptDictionary', Thrift.Type.STRUCT, 2);
    this.scriptDictionary.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScriptDictionaryService_createOrUpdateScriptDictionary_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ScriptDictionary(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ScriptDictionaryService_createOrUpdateScriptDictionary_result.prototype = {};
ScriptDictionaryService_createOrUpdateScriptDictionary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ScriptDictionary();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptDictionaryService_createOrUpdateScriptDictionary_result.prototype.write = function(output) {
  output.writeStructBegin('ScriptDictionaryService_createOrUpdateScriptDictionary_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScriptDictionaryService_validation_args = function(args) {
  this.token = null;
  this.scriptDictionary = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.scriptDictionary !== undefined && args.scriptDictionary !== null) {
      this.scriptDictionary = new ScriptDictionary(args.scriptDictionary);
    }
  }
};
ScriptDictionaryService_validation_args.prototype = {};
ScriptDictionaryService_validation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.scriptDictionary = new ScriptDictionary();
        this.scriptDictionary.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptDictionaryService_validation_args.prototype.write = function(output) {
  output.writeStructBegin('ScriptDictionaryService_validation_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.scriptDictionary !== null && this.scriptDictionary !== undefined) {
    output.writeFieldBegin('scriptDictionary', Thrift.Type.STRUCT, 2);
    this.scriptDictionary.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScriptDictionaryService_validation_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ScriptDictionaryService_validation_result.prototype = {};
ScriptDictionaryService_validation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptDictionaryService_validation_result.prototype.write = function(output) {
  output.writeStructBegin('ScriptDictionaryService_validation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScriptDictionaryService_removeScriptDictionary_args = function(args) {
  this.token = null;
  this.id = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = new CompositeId(args.id);
    }
  }
};
ScriptDictionaryService_removeScriptDictionary_args.prototype = {};
ScriptDictionaryService_removeScriptDictionary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new CompositeId();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptDictionaryService_removeScriptDictionary_args.prototype.write = function(output) {
  output.writeStructBegin('ScriptDictionaryService_removeScriptDictionary_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 2);
    this.id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScriptDictionaryService_removeScriptDictionary_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
ScriptDictionaryService_removeScriptDictionary_result.prototype = {};
ScriptDictionaryService_removeScriptDictionary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptDictionaryService_removeScriptDictionary_result.prototype.write = function(output) {
  output.writeStructBegin('ScriptDictionaryService_removeScriptDictionary_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScriptDictionaryServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ScriptDictionaryServiceClient.prototype = {};
ScriptDictionaryServiceClient.prototype.getAllScriptDictionaries = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllScriptDictionaries(token, filter);
    return this.recv_getAllScriptDictionaries();
  } else {
    var postData = this.send_getAllScriptDictionaries(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllScriptDictionaries);
  }
};

ScriptDictionaryServiceClient.prototype.send_getAllScriptDictionaries = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllScriptDictionaries', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new ScriptDictionaryService_getAllScriptDictionaries_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ScriptDictionaryServiceClient.prototype.recv_getAllScriptDictionaries = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ScriptDictionaryService_getAllScriptDictionaries_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllScriptDictionaries failed: unknown result';
};
ScriptDictionaryServiceClient.prototype.getScriptDictionaryById = function(token, id, withContext, callback) {
  if (callback === undefined) {
    this.send_getScriptDictionaryById(token, id, withContext);
    return this.recv_getScriptDictionaryById();
  } else {
    var postData = this.send_getScriptDictionaryById(token, id, withContext, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getScriptDictionaryById);
  }
};

ScriptDictionaryServiceClient.prototype.send_getScriptDictionaryById = function(token, id, withContext, callback) {
  this.output.writeMessageBegin('getScriptDictionaryById', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    id: id,
    withContext: withContext
  };
  var args = new ScriptDictionaryService_getScriptDictionaryById_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ScriptDictionaryServiceClient.prototype.recv_getScriptDictionaryById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ScriptDictionaryService_getScriptDictionaryById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getScriptDictionaryById failed: unknown result';
};
ScriptDictionaryServiceClient.prototype.createOrUpdateScriptDictionary = function(token, scriptDictionary, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateScriptDictionary(token, scriptDictionary);
    return this.recv_createOrUpdateScriptDictionary();
  } else {
    var postData = this.send_createOrUpdateScriptDictionary(token, scriptDictionary, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateScriptDictionary);
  }
};

ScriptDictionaryServiceClient.prototype.send_createOrUpdateScriptDictionary = function(token, scriptDictionary, callback) {
  this.output.writeMessageBegin('createOrUpdateScriptDictionary', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    scriptDictionary: scriptDictionary
  };
  var args = new ScriptDictionaryService_createOrUpdateScriptDictionary_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ScriptDictionaryServiceClient.prototype.recv_createOrUpdateScriptDictionary = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ScriptDictionaryService_createOrUpdateScriptDictionary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateScriptDictionary failed: unknown result';
};
ScriptDictionaryServiceClient.prototype.validation = function(token, scriptDictionary, callback) {
  if (callback === undefined) {
    this.send_validation(token, scriptDictionary);
    return this.recv_validation();
  } else {
    var postData = this.send_validation(token, scriptDictionary, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_validation);
  }
};

ScriptDictionaryServiceClient.prototype.send_validation = function(token, scriptDictionary, callback) {
  this.output.writeMessageBegin('validation', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    scriptDictionary: scriptDictionary
  };
  var args = new ScriptDictionaryService_validation_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ScriptDictionaryServiceClient.prototype.recv_validation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ScriptDictionaryService_validation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'validation failed: unknown result';
};
ScriptDictionaryServiceClient.prototype.removeScriptDictionary = function(token, id, callback) {
  if (callback === undefined) {
    this.send_removeScriptDictionary(token, id);
    return this.recv_removeScriptDictionary();
  } else {
    var postData = this.send_removeScriptDictionary(token, id, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeScriptDictionary);
  }
};

ScriptDictionaryServiceClient.prototype.send_removeScriptDictionary = function(token, id, callback) {
  this.output.writeMessageBegin('removeScriptDictionary', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    id: id
  };
  var args = new ScriptDictionaryService_removeScriptDictionary_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ScriptDictionaryServiceClient.prototype.recv_removeScriptDictionary = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ScriptDictionaryService_removeScriptDictionary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeScriptDictionary failed: unknown result';
};
