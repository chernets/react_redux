//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

AdminService_createOrUpdateFileStorage_args = function(args) {
  this.token = null;
  this.fileStorage = null;
  this.password = null;
  this.accountId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fileStorage !== undefined && args.fileStorage !== null) {
      this.fileStorage = new FileStorage(args.fileStorage);
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.accountId !== undefined && args.accountId !== null) {
      this.accountId = args.accountId;
    }
  }
};
AdminService_createOrUpdateFileStorage_args.prototype = {};
AdminService_createOrUpdateFileStorage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fileStorage = new FileStorage();
        this.fileStorage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_createOrUpdateFileStorage_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_createOrUpdateFileStorage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fileStorage !== null && this.fileStorage !== undefined) {
    output.writeFieldBegin('fileStorage', Thrift.Type.STRUCT, 2);
    this.fileStorage.write(output);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 4);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_createOrUpdateFileStorage_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new FileStorage(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_createOrUpdateFileStorage_result.prototype = {};
AdminService_createOrUpdateFileStorage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FileStorage();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_createOrUpdateFileStorage_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_createOrUpdateFileStorage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllFileStorages_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getAllFileStorages_args.prototype = {};
AdminService_getAllFileStorages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllFileStorages_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllFileStorages_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllFileStorages_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [FileStorage]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getAllFileStorages_result.prototype = {};
AdminService_getAllFileStorages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1864 = 0;
        var _rtmp31868;
        this.success = [];
        var _etype1867 = 0;
        _rtmp31868 = input.readListBegin();
        _etype1867 = _rtmp31868.etype;
        _size1864 = _rtmp31868.size;
        for (var _i1869 = 0; _i1869 < _size1864; ++_i1869)
        {
          var elem1870 = null;
          elem1870 = new FileStorage();
          elem1870.read(input);
          this.success.push(elem1870);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllFileStorages_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllFileStorages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1871 in this.success)
    {
      if (this.success.hasOwnProperty(iter1871))
      {
        iter1871 = this.success[iter1871];
        iter1871.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_removeFileStorages_args = function(args) {
  this.token = null;
  this.fileStorageIds = null;
  this.password = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fileStorageIds !== undefined && args.fileStorageIds !== null) {
      this.fileStorageIds = Thrift.copyList(args.fileStorageIds, [null]);
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
AdminService_removeFileStorages_args.prototype = {};
AdminService_removeFileStorages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1872 = 0;
        var _rtmp31876;
        this.fileStorageIds = [];
        var _etype1875 = 0;
        _rtmp31876 = input.readListBegin();
        _etype1875 = _rtmp31876.etype;
        _size1872 = _rtmp31876.size;
        for (var _i1877 = 0; _i1877 < _size1872; ++_i1877)
        {
          var elem1878 = null;
          elem1878 = input.readString().value;
          this.fileStorageIds.push(elem1878);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_removeFileStorages_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_removeFileStorages_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fileStorageIds !== null && this.fileStorageIds !== undefined) {
    output.writeFieldBegin('fileStorageIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.fileStorageIds.length);
    for (var iter1879 in this.fileStorageIds)
    {
      if (this.fileStorageIds.hasOwnProperty(iter1879))
      {
        iter1879 = this.fileStorageIds[iter1879];
        output.writeString(iter1879);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_removeFileStorages_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_removeFileStorages_result.prototype = {};
AdminService_removeFileStorages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_removeFileStorages_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_removeFileStorages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_moveAttachment_args = function(args) {
  this.token = null;
  this.docId = null;
  this.fileStorageId = null;
  this.onlyLatest = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docId !== undefined && args.docId !== null) {
      this.docId = args.docId;
    }
    if (args.fileStorageId !== undefined && args.fileStorageId !== null) {
      this.fileStorageId = args.fileStorageId;
    }
    if (args.onlyLatest !== undefined && args.onlyLatest !== null) {
      this.onlyLatest = args.onlyLatest;
    }
  }
};
AdminService_moveAttachment_args.prototype = {};
AdminService_moveAttachment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileStorageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.onlyLatest = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_moveAttachment_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_moveAttachment_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docId !== null && this.docId !== undefined) {
    output.writeFieldBegin('docId', Thrift.Type.STRING, 2);
    output.writeString(this.docId);
    output.writeFieldEnd();
  }
  if (this.fileStorageId !== null && this.fileStorageId !== undefined) {
    output.writeFieldBegin('fileStorageId', Thrift.Type.STRING, 3);
    output.writeString(this.fileStorageId);
    output.writeFieldEnd();
  }
  if (this.onlyLatest !== null && this.onlyLatest !== undefined) {
    output.writeFieldBegin('onlyLatest', Thrift.Type.BOOL, 4);
    output.writeBool(this.onlyLatest);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_moveAttachment_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_moveAttachment_result.prototype = {};
AdminService_moveAttachment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_moveAttachment_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_moveAttachment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getHistory_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getHistory_args.prototype = {};
AdminService_getHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getHistory_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getHistory_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getHistory_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [History]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getHistory_result.prototype = {};
AdminService_getHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1880 = 0;
        var _rtmp31884;
        this.success = [];
        var _etype1883 = 0;
        _rtmp31884 = input.readListBegin();
        _etype1883 = _rtmp31884.etype;
        _size1880 = _rtmp31884.size;
        for (var _i1885 = 0; _i1885 < _size1880; ++_i1885)
        {
          var elem1886 = null;
          elem1886 = new History();
          elem1886.read(input);
          this.success.push(elem1886);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getHistory_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1887 in this.success)
    {
      if (this.success.hasOwnProperty(iter1887))
      {
        iter1887 = this.success[iter1887];
        iter1887.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_createOrUpdateNews_args = function(args) {
  this.token = null;
  this.news = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.news !== undefined && args.news !== null) {
      this.news = new News(args.news);
    }
  }
};
AdminService_createOrUpdateNews_args.prototype = {};
AdminService_createOrUpdateNews_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.news = new News();
        this.news.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_createOrUpdateNews_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_createOrUpdateNews_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.news !== null && this.news !== undefined) {
    output.writeFieldBegin('news', Thrift.Type.STRUCT, 2);
    this.news.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_createOrUpdateNews_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new News(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_createOrUpdateNews_result.prototype = {};
AdminService_createOrUpdateNews_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new News();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_createOrUpdateNews_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_createOrUpdateNews_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_removeNews_args = function(args) {
  this.token = null;
  this.newsId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.newsId !== undefined && args.newsId !== null) {
      this.newsId = args.newsId;
    }
  }
};
AdminService_removeNews_args.prototype = {};
AdminService_removeNews_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newsId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_removeNews_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_removeNews_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.newsId !== null && this.newsId !== undefined) {
    output.writeFieldBegin('newsId', Thrift.Type.STRING, 2);
    output.writeString(this.newsId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_removeNews_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_removeNews_result.prototype = {};
AdminService_removeNews_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_removeNews_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_removeNews_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllExternalModules_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getAllExternalModules_args.prototype = {};
AdminService_getAllExternalModules_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllExternalModules_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllExternalModules_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllExternalModules_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ExternalModule]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getAllExternalModules_result.prototype = {};
AdminService_getAllExternalModules_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1888 = 0;
        var _rtmp31892;
        this.success = [];
        var _etype1891 = 0;
        _rtmp31892 = input.readListBegin();
        _etype1891 = _rtmp31892.etype;
        _size1888 = _rtmp31892.size;
        for (var _i1893 = 0; _i1893 < _size1888; ++_i1893)
        {
          var elem1894 = null;
          elem1894 = new ExternalModule();
          elem1894.read(input);
          this.success.push(elem1894);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllExternalModules_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllExternalModules_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1895 in this.success)
    {
      if (this.success.hasOwnProperty(iter1895))
      {
        iter1895 = this.success[iter1895];
        iter1895.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_registerExternalModule_args = function(args) {
  this.token = null;
  this.url = null;
  this.newUser = null;
  this.newUserLogin = null;
  this.adminPassword = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.newUser !== undefined && args.newUser !== null) {
      this.newUser = new UserOrGroup(args.newUser);
    }
    if (args.newUserLogin !== undefined && args.newUserLogin !== null) {
      this.newUserLogin = args.newUserLogin;
    }
    if (args.adminPassword !== undefined && args.adminPassword !== null) {
      this.adminPassword = args.adminPassword;
    }
  }
};
AdminService_registerExternalModule_args.prototype = {};
AdminService_registerExternalModule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.newUser = new UserOrGroup();
        this.newUser.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.newUserLogin = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.adminPassword = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_registerExternalModule_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_registerExternalModule_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 2);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.newUser !== null && this.newUser !== undefined) {
    output.writeFieldBegin('newUser', Thrift.Type.STRUCT, 3);
    this.newUser.write(output);
    output.writeFieldEnd();
  }
  if (this.newUserLogin !== null && this.newUserLogin !== undefined) {
    output.writeFieldBegin('newUserLogin', Thrift.Type.STRING, 4);
    output.writeString(this.newUserLogin);
    output.writeFieldEnd();
  }
  if (this.adminPassword !== null && this.adminPassword !== undefined) {
    output.writeFieldBegin('adminPassword', Thrift.Type.STRING, 5);
    output.writeString(this.adminPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_registerExternalModule_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ExternalModule(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_registerExternalModule_result.prototype = {};
AdminService_registerExternalModule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ExternalModule();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_registerExternalModule_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_registerExternalModule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_refreshExternalModule_args = function(args) {
  this.token = null;
  this.extModuleId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.extModuleId !== undefined && args.extModuleId !== null) {
      this.extModuleId = args.extModuleId;
    }
  }
};
AdminService_refreshExternalModule_args.prototype = {};
AdminService_refreshExternalModule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.extModuleId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_refreshExternalModule_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_refreshExternalModule_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.extModuleId !== null && this.extModuleId !== undefined) {
    output.writeFieldBegin('extModuleId', Thrift.Type.STRING, 2);
    output.writeString(this.extModuleId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_refreshExternalModule_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ExternalModule(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_refreshExternalModule_result.prototype = {};
AdminService_refreshExternalModule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ExternalModule();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_refreshExternalModule_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_refreshExternalModule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_removeExternalModule_args = function(args) {
  this.token = null;
  this.extModuleId = null;
  this.password = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.extModuleId !== undefined && args.extModuleId !== null) {
      this.extModuleId = args.extModuleId;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
AdminService_removeExternalModule_args.prototype = {};
AdminService_removeExternalModule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.extModuleId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_removeExternalModule_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_removeExternalModule_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.extModuleId !== null && this.extModuleId !== undefined) {
    output.writeFieldBegin('extModuleId', Thrift.Type.STRING, 2);
    output.writeString(this.extModuleId);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_removeExternalModule_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_removeExternalModule_result.prototype = {};
AdminService_removeExternalModule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_removeExternalModule_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_removeExternalModule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllDocumentAttachments_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getAllDocumentAttachments_args.prototype = {};
AdminService_getAllDocumentAttachments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllDocumentAttachments_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllDocumentAttachments_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllDocumentAttachments_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Attachment]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getAllDocumentAttachments_result.prototype = {};
AdminService_getAllDocumentAttachments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1896 = 0;
        var _rtmp31900;
        this.success = [];
        var _etype1899 = 0;
        _rtmp31900 = input.readListBegin();
        _etype1899 = _rtmp31900.etype;
        _size1896 = _rtmp31900.size;
        for (var _i1901 = 0; _i1901 < _size1896; ++_i1901)
        {
          var elem1902 = null;
          elem1902 = new Attachment();
          elem1902.read(input);
          this.success.push(elem1902);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllDocumentAttachments_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllDocumentAttachments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1903 in this.success)
    {
      if (this.success.hasOwnProperty(iter1903))
      {
        iter1903 = this.success[iter1903];
        iter1903.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_updateDocument_args = function(args) {
  this.token = null;
  this.document = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.document !== undefined && args.document !== null) {
      this.document = new Document(args.document);
    }
  }
};
AdminService_updateDocument_args.prototype = {};
AdminService_updateDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.document = new Document();
        this.document.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_updateDocument_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_updateDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.document !== null && this.document !== undefined) {
    output.writeFieldBegin('document', Thrift.Type.STRUCT, 2);
    this.document.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_updateDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Document(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_updateDocument_result.prototype = {};
AdminService_updateDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Document();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_updateDocument_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_updateDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllFilledDocumentPatternStages_args = function(args) {
  this.token = null;
  this.fillDocPatternId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fillDocPatternId !== undefined && args.fillDocPatternId !== null) {
      this.fillDocPatternId = args.fillDocPatternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getAllFilledDocumentPatternStages_args.prototype = {};
AdminService_getAllFilledDocumentPatternStages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fillDocPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllFilledDocumentPatternStages_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllFilledDocumentPatternStages_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fillDocPatternId !== null && this.fillDocPatternId !== undefined) {
    output.writeFieldBegin('fillDocPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.fillDocPatternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllFilledDocumentPatternStages_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStage]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getAllFilledDocumentPatternStages_result.prototype = {};
AdminService_getAllFilledDocumentPatternStages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1904 = 0;
        var _rtmp31908;
        this.success = [];
        var _etype1907 = 0;
        _rtmp31908 = input.readListBegin();
        _etype1907 = _rtmp31908.etype;
        _size1904 = _rtmp31908.size;
        for (var _i1909 = 0; _i1909 < _size1904; ++_i1909)
        {
          var elem1910 = null;
          elem1910 = new DocumentPatternStage();
          elem1910.read(input);
          this.success.push(elem1910);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllFilledDocumentPatternStages_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllFilledDocumentPatternStages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1911 in this.success)
    {
      if (this.success.hasOwnProperty(iter1911))
      {
        iter1911 = this.success[iter1911];
        iter1911.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_resetDocumentForceMoveError_args = function(args) {
  this.token = null;
  this.documentId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
  }
};
AdminService_resetDocumentForceMoveError_args.prototype = {};
AdminService_resetDocumentForceMoveError_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_resetDocumentForceMoveError_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_resetDocumentForceMoveError_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_resetDocumentForceMoveError_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_resetDocumentForceMoveError_result.prototype = {};
AdminService_resetDocumentForceMoveError_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_resetDocumentForceMoveError_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_resetDocumentForceMoveError_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_changeExecutorForPatternStages_args = function(args) {
  this.token = null;
  this.patternIds = null;
  this.userOrGroup = null;
  this.usersOrGroups = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.patternIds !== undefined && args.patternIds !== null) {
      this.patternIds = Thrift.copyList(args.patternIds, [null]);
    }
    if (args.userOrGroup !== undefined && args.userOrGroup !== null) {
      this.userOrGroup = new UserOrGroup(args.userOrGroup);
    }
    if (args.usersOrGroups !== undefined && args.usersOrGroups !== null) {
      this.usersOrGroups = Thrift.copyList(args.usersOrGroups, [UserOrGroup]);
    }
  }
};
AdminService_changeExecutorForPatternStages_args.prototype = {};
AdminService_changeExecutorForPatternStages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1912 = 0;
        var _rtmp31916;
        this.patternIds = [];
        var _etype1915 = 0;
        _rtmp31916 = input.readListBegin();
        _etype1915 = _rtmp31916.etype;
        _size1912 = _rtmp31916.size;
        for (var _i1917 = 0; _i1917 < _size1912; ++_i1917)
        {
          var elem1918 = null;
          elem1918 = input.readString().value;
          this.patternIds.push(elem1918);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.userOrGroup = new UserOrGroup();
        this.userOrGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size1919 = 0;
        var _rtmp31923;
        this.usersOrGroups = [];
        var _etype1922 = 0;
        _rtmp31923 = input.readListBegin();
        _etype1922 = _rtmp31923.etype;
        _size1919 = _rtmp31923.size;
        for (var _i1924 = 0; _i1924 < _size1919; ++_i1924)
        {
          var elem1925 = null;
          elem1925 = new UserOrGroup();
          elem1925.read(input);
          this.usersOrGroups.push(elem1925);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_changeExecutorForPatternStages_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_changeExecutorForPatternStages_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.patternIds !== null && this.patternIds !== undefined) {
    output.writeFieldBegin('patternIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.patternIds.length);
    for (var iter1926 in this.patternIds)
    {
      if (this.patternIds.hasOwnProperty(iter1926))
      {
        iter1926 = this.patternIds[iter1926];
        output.writeString(iter1926);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userOrGroup !== null && this.userOrGroup !== undefined) {
    output.writeFieldBegin('userOrGroup', Thrift.Type.STRUCT, 3);
    this.userOrGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.usersOrGroups !== null && this.usersOrGroups !== undefined) {
    output.writeFieldBegin('usersOrGroups', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.usersOrGroups.length);
    for (var iter1927 in this.usersOrGroups)
    {
      if (this.usersOrGroups.hasOwnProperty(iter1927))
      {
        iter1927 = this.usersOrGroups[iter1927];
        iter1927.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_changeExecutorForPatternStages_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_changeExecutorForPatternStages_result.prototype = {};
AdminService_changeExecutorForPatternStages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_changeExecutorForPatternStages_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_changeExecutorForPatternStages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_setUserPublicKey_args = function(args) {
  this.token = null;
  this.userId = null;
  this.publicKey = null;
  this.password = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = args.publicKey;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
AdminService_setUserPublicKey_args.prototype = {};
AdminService_setUserPublicKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.publicKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_setUserPublicKey_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_setUserPublicKey_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRING, 3);
    output.writeString(this.publicKey);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_setUserPublicKey_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_setUserPublicKey_result.prototype = {};
AdminService_setUserPublicKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_setUserPublicKey_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_setUserPublicKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_removeUserPublicKey_args = function(args) {
  this.token = null;
  this.userId = null;
  this.password = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
AdminService_removeUserPublicKey_args.prototype = {};
AdminService_removeUserPublicKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_removeUserPublicKey_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_removeUserPublicKey_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_removeUserPublicKey_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_removeUserPublicKey_result.prototype = {};
AdminService_removeUserPublicKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_removeUserPublicKey_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_removeUserPublicKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllUsersRelativeToAccount_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getAllUsersRelativeToAccount_args.prototype = {};
AdminService_getAllUsersRelativeToAccount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllUsersRelativeToAccount_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllUsersRelativeToAccount_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllUsersRelativeToAccount_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserAcc]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getAllUsersRelativeToAccount_result.prototype = {};
AdminService_getAllUsersRelativeToAccount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1928 = 0;
        var _rtmp31932;
        this.success = [];
        var _etype1931 = 0;
        _rtmp31932 = input.readListBegin();
        _etype1931 = _rtmp31932.etype;
        _size1928 = _rtmp31932.size;
        for (var _i1933 = 0; _i1933 < _size1928; ++_i1933)
        {
          var elem1934 = null;
          elem1934 = new UserAcc();
          elem1934.read(input);
          this.success.push(elem1934);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllUsersRelativeToAccount_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllUsersRelativeToAccount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1935 in this.success)
    {
      if (this.success.hasOwnProperty(iter1935))
      {
        iter1935 = this.success[iter1935];
        iter1935.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getCountAllUsersRelativeToAccount_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getCountAllUsersRelativeToAccount_args.prototype = {};
AdminService_getCountAllUsersRelativeToAccount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getCountAllUsersRelativeToAccount_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getCountAllUsersRelativeToAccount_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getCountAllUsersRelativeToAccount_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getCountAllUsersRelativeToAccount_result.prototype = {};
AdminService_getCountAllUsersRelativeToAccount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getCountAllUsersRelativeToAccount_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getCountAllUsersRelativeToAccount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_bindUsersAndAccounts_args = function(args) {
  this.token = null;
  this.accUsers = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.accUsers !== undefined && args.accUsers !== null) {
      this.accUsers = Thrift.copyList(args.accUsers, [UserAcc]);
    }
  }
};
AdminService_bindUsersAndAccounts_args.prototype = {};
AdminService_bindUsersAndAccounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1936 = 0;
        var _rtmp31940;
        this.accUsers = [];
        var _etype1939 = 0;
        _rtmp31940 = input.readListBegin();
        _etype1939 = _rtmp31940.etype;
        _size1936 = _rtmp31940.size;
        for (var _i1941 = 0; _i1941 < _size1936; ++_i1941)
        {
          var elem1942 = null;
          elem1942 = new UserAcc();
          elem1942.read(input);
          this.accUsers.push(elem1942);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_bindUsersAndAccounts_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_bindUsersAndAccounts_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.accUsers !== null && this.accUsers !== undefined) {
    output.writeFieldBegin('accUsers', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.accUsers.length);
    for (var iter1943 in this.accUsers)
    {
      if (this.accUsers.hasOwnProperty(iter1943))
      {
        iter1943 = this.accUsers[iter1943];
        iter1943.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_bindUsersAndAccounts_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_bindUsersAndAccounts_result.prototype = {};
AdminService_bindUsersAndAccounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_bindUsersAndAccounts_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_bindUsersAndAccounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_removeUsersFromAccounts_args = function(args) {
  this.token = null;
  this.accountIds = null;
  this.usersIds = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.accountIds !== undefined && args.accountIds !== null) {
      this.accountIds = Thrift.copyList(args.accountIds, [null]);
    }
    if (args.usersIds !== undefined && args.usersIds !== null) {
      this.usersIds = Thrift.copyList(args.usersIds, [null]);
    }
  }
};
AdminService_removeUsersFromAccounts_args.prototype = {};
AdminService_removeUsersFromAccounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size1944 = 0;
        var _rtmp31948;
        this.accountIds = [];
        var _etype1947 = 0;
        _rtmp31948 = input.readSetBegin();
        _etype1947 = _rtmp31948.etype;
        _size1944 = _rtmp31948.size;
        for (var _i1949 = 0; _i1949 < _size1944; ++_i1949)
        {
          var elem1950 = null;
          elem1950 = input.readString().value;
          this.accountIds.push(elem1950);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size1951 = 0;
        var _rtmp31955;
        this.usersIds = [];
        var _etype1954 = 0;
        _rtmp31955 = input.readSetBegin();
        _etype1954 = _rtmp31955.etype;
        _size1951 = _rtmp31955.size;
        for (var _i1956 = 0; _i1956 < _size1951; ++_i1956)
        {
          var elem1957 = null;
          elem1957 = input.readString().value;
          this.usersIds.push(elem1957);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_removeUsersFromAccounts_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_removeUsersFromAccounts_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.accountIds !== null && this.accountIds !== undefined) {
    output.writeFieldBegin('accountIds', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRING, this.accountIds.length);
    for (var iter1958 in this.accountIds)
    {
      if (this.accountIds.hasOwnProperty(iter1958))
      {
        iter1958 = this.accountIds[iter1958];
        output.writeString(iter1958);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.usersIds !== null && this.usersIds !== undefined) {
    output.writeFieldBegin('usersIds', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.usersIds.length);
    for (var iter1959 in this.usersIds)
    {
      if (this.usersIds.hasOwnProperty(iter1959))
      {
        iter1959 = this.usersIds[iter1959];
        output.writeString(iter1959);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_removeUsersFromAccounts_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_removeUsersFromAccounts_result.prototype = {};
AdminService_removeUsersFromAccounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_removeUsersFromAccounts_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_removeUsersFromAccounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_runScheduler_args = function(args) {
  this.token = null;
  this.name = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
AdminService_runScheduler_args.prototype = {};
AdminService_runScheduler_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_runScheduler_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_runScheduler_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_runScheduler_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_runScheduler_result.prototype = {};
AdminService_runScheduler_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_runScheduler_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_runScheduler_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_changeEncryptKey_args = function(args) {
  this.token = null;
  this.key = null;
  this.accountId = null;
  this.password = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.accountId !== undefined && args.accountId !== null) {
      this.accountId = args.accountId;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
AdminService_changeEncryptKey_args.prototype = {};
AdminService_changeEncryptKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_changeEncryptKey_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_changeEncryptKey_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 3);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_changeEncryptKey_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_changeEncryptKey_result.prototype = {};
AdminService_changeEncryptKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_changeEncryptKey_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_changeEncryptKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllUsersExt_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getAllUsersExt_args.prototype = {};
AdminService_getAllUsersExt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllUsersExt_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllUsersExt_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllUsersExt_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserExt]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getAllUsersExt_result.prototype = {};
AdminService_getAllUsersExt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1960 = 0;
        var _rtmp31964;
        this.success = [];
        var _etype1963 = 0;
        _rtmp31964 = input.readListBegin();
        _etype1963 = _rtmp31964.etype;
        _size1960 = _rtmp31964.size;
        for (var _i1965 = 0; _i1965 < _size1960; ++_i1965)
        {
          var elem1966 = null;
          elem1966 = new UserExt();
          elem1966.read(input);
          this.success.push(elem1966);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllUsersExt_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllUsersExt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1967 in this.success)
    {
      if (this.success.hasOwnProperty(iter1967))
      {
        iter1967 = this.success[iter1967];
        iter1967.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getCountAllUsersExt_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getCountAllUsersExt_args.prototype = {};
AdminService_getCountAllUsersExt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getCountAllUsersExt_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getCountAllUsersExt_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getCountAllUsersExt_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getCountAllUsersExt_result.prototype = {};
AdminService_getCountAllUsersExt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getCountAllUsersExt_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getCountAllUsersExt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllUserNotifications_args = function(args) {
  this.token = null;
  this.userId = null;
  this.unreadOnly = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.unreadOnly !== undefined && args.unreadOnly !== null) {
      this.unreadOnly = args.unreadOnly;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getAllUserNotifications_args.prototype = {};
AdminService_getAllUserNotifications_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.unreadOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllUserNotifications_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllUserNotifications_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.unreadOnly !== null && this.unreadOnly !== undefined) {
    output.writeFieldBegin('unreadOnly', Thrift.Type.BOOL, 3);
    output.writeBool(this.unreadOnly);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllUserNotifications_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [NotificationQueue]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getAllUserNotifications_result.prototype = {};
AdminService_getAllUserNotifications_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1968 = 0;
        var _rtmp31972;
        this.success = [];
        var _etype1971 = 0;
        _rtmp31972 = input.readListBegin();
        _etype1971 = _rtmp31972.etype;
        _size1968 = _rtmp31972.size;
        for (var _i1973 = 0; _i1973 < _size1968; ++_i1973)
        {
          var elem1974 = null;
          elem1974 = new NotificationQueue();
          elem1974.read(input);
          this.success.push(elem1974);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllUserNotifications_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllUserNotifications_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1975 in this.success)
    {
      if (this.success.hasOwnProperty(iter1975))
      {
        iter1975 = this.success[iter1975];
        iter1975.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllNotifications_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getAllNotifications_args.prototype = {};
AdminService_getAllNotifications_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllNotifications_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllNotifications_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllNotifications_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [NotificationQueue]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getAllNotifications_result.prototype = {};
AdminService_getAllNotifications_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1976 = 0;
        var _rtmp31980;
        this.success = [];
        var _etype1979 = 0;
        _rtmp31980 = input.readListBegin();
        _etype1979 = _rtmp31980.etype;
        _size1976 = _rtmp31980.size;
        for (var _i1981 = 0; _i1981 < _size1976; ++_i1981)
        {
          var elem1982 = null;
          elem1982 = new NotificationQueue();
          elem1982.read(input);
          this.success.push(elem1982);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllNotifications_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllNotifications_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1983 in this.success)
    {
      if (this.success.hasOwnProperty(iter1983))
      {
        iter1983 = this.success[iter1983];
        iter1983.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_moveDocumentOnOtherPatternStage_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.stageId = null;
  this.resetMoveError = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.stageId !== undefined && args.stageId !== null) {
      this.stageId = args.stageId;
    }
    if (args.resetMoveError !== undefined && args.resetMoveError !== null) {
      this.resetMoveError = args.resetMoveError;
    }
  }
};
AdminService_moveDocumentOnOtherPatternStage_args.prototype = {};
AdminService_moveDocumentOnOtherPatternStage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.resetMoveError = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_moveDocumentOnOtherPatternStage_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_moveDocumentOnOtherPatternStage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.stageId !== null && this.stageId !== undefined) {
    output.writeFieldBegin('stageId', Thrift.Type.STRING, 3);
    output.writeString(this.stageId);
    output.writeFieldEnd();
  }
  if (this.resetMoveError !== null && this.resetMoveError !== undefined) {
    output.writeFieldBegin('resetMoveError', Thrift.Type.BOOL, 4);
    output.writeBool(this.resetMoveError);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_moveDocumentOnOtherPatternStage_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_moveDocumentOnOtherPatternStage_result.prototype = {};
AdminService_moveDocumentOnOtherPatternStage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_moveDocumentOnOtherPatternStage_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_moveDocumentOnOtherPatternStage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllSessions_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getAllSessions_args.prototype = {};
AdminService_getAllSessions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllSessions_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllSessions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllSessions_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [AuthSession]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getAllSessions_result.prototype = {};
AdminService_getAllSessions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1984 = 0;
        var _rtmp31988;
        this.success = [];
        var _etype1987 = 0;
        _rtmp31988 = input.readListBegin();
        _etype1987 = _rtmp31988.etype;
        _size1984 = _rtmp31988.size;
        for (var _i1989 = 0; _i1989 < _size1984; ++_i1989)
        {
          var elem1990 = null;
          elem1990 = new AuthSession();
          elem1990.read(input);
          this.success.push(elem1990);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllSessions_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllSessions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1991 in this.success)
    {
      if (this.success.hasOwnProperty(iter1991))
      {
        iter1991 = this.success[iter1991];
        iter1991.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getCountAllSessions_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getCountAllSessions_args.prototype = {};
AdminService_getCountAllSessions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getCountAllSessions_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getCountAllSessions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getCountAllSessions_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getCountAllSessions_result.prototype = {};
AdminService_getCountAllSessions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getCountAllSessions_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getCountAllSessions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_confirmUserPublicKey_args = function(args) {
  this.token = null;
  this.id = null;
  this.confirm = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.confirm !== undefined && args.confirm !== null) {
      this.confirm = args.confirm;
    }
  }
};
AdminService_confirmUserPublicKey_args.prototype = {};
AdminService_confirmUserPublicKey_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.confirm = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_confirmUserPublicKey_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_confirmUserPublicKey_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.confirm !== null && this.confirm !== undefined) {
    output.writeFieldBegin('confirm', Thrift.Type.BOOL, 3);
    output.writeBool(this.confirm);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_confirmUserPublicKey_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_confirmUserPublicKey_result.prototype = {};
AdminService_confirmUserPublicKey_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_confirmUserPublicKey_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_confirmUserPublicKey_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_closeSession_args = function(args) {
  this.token = null;
  this.sessionId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
AdminService_closeSession_args.prototype = {};
AdminService_closeSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_closeSession_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_closeSession_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_closeSession_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_closeSession_result.prototype = {};
AdminService_closeSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_closeSession_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_closeSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_copyPersonalAccess_args = function(args) {
  this.token = null;
  this.userIdFrom = null;
  this.userIdTo = null;
  this.accounts = null;
  this.roles = null;
  this.groups = null;
  this.securityClassifications = null;
  this.documents = null;
  this.meetings = null;
  this.bpm = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userIdFrom !== undefined && args.userIdFrom !== null) {
      this.userIdFrom = args.userIdFrom;
    }
    if (args.userIdTo !== undefined && args.userIdTo !== null) {
      this.userIdTo = args.userIdTo;
    }
    if (args.accounts !== undefined && args.accounts !== null) {
      this.accounts = args.accounts;
    }
    if (args.roles !== undefined && args.roles !== null) {
      this.roles = args.roles;
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = args.groups;
    }
    if (args.securityClassifications !== undefined && args.securityClassifications !== null) {
      this.securityClassifications = args.securityClassifications;
    }
    if (args.documents !== undefined && args.documents !== null) {
      this.documents = args.documents;
    }
    if (args.meetings !== undefined && args.meetings !== null) {
      this.meetings = args.meetings;
    }
    if (args.bpm !== undefined && args.bpm !== null) {
      this.bpm = args.bpm;
    }
  }
};
AdminService_copyPersonalAccess_args.prototype = {};
AdminService_copyPersonalAccess_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userIdFrom = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userIdTo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.accounts = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.roles = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.groups = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.securityClassifications = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.documents = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.meetings = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.bpm = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_copyPersonalAccess_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_copyPersonalAccess_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userIdFrom !== null && this.userIdFrom !== undefined) {
    output.writeFieldBegin('userIdFrom', Thrift.Type.STRING, 2);
    output.writeString(this.userIdFrom);
    output.writeFieldEnd();
  }
  if (this.userIdTo !== null && this.userIdTo !== undefined) {
    output.writeFieldBegin('userIdTo', Thrift.Type.STRING, 3);
    output.writeString(this.userIdTo);
    output.writeFieldEnd();
  }
  if (this.accounts !== null && this.accounts !== undefined) {
    output.writeFieldBegin('accounts', Thrift.Type.BOOL, 4);
    output.writeBool(this.accounts);
    output.writeFieldEnd();
  }
  if (this.roles !== null && this.roles !== undefined) {
    output.writeFieldBegin('roles', Thrift.Type.BOOL, 5);
    output.writeBool(this.roles);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.BOOL, 6);
    output.writeBool(this.groups);
    output.writeFieldEnd();
  }
  if (this.securityClassifications !== null && this.securityClassifications !== undefined) {
    output.writeFieldBegin('securityClassifications', Thrift.Type.BOOL, 7);
    output.writeBool(this.securityClassifications);
    output.writeFieldEnd();
  }
  if (this.documents !== null && this.documents !== undefined) {
    output.writeFieldBegin('documents', Thrift.Type.BOOL, 8);
    output.writeBool(this.documents);
    output.writeFieldEnd();
  }
  if (this.meetings !== null && this.meetings !== undefined) {
    output.writeFieldBegin('meetings', Thrift.Type.BOOL, 9);
    output.writeBool(this.meetings);
    output.writeFieldEnd();
  }
  if (this.bpm !== null && this.bpm !== undefined) {
    output.writeFieldBegin('bpm', Thrift.Type.BOOL, 10);
    output.writeBool(this.bpm);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_copyPersonalAccess_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_copyPersonalAccess_result.prototype = {};
AdminService_copyPersonalAccess_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_copyPersonalAccess_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_copyPersonalAccess_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllLicenses_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getAllLicenses_args.prototype = {};
AdminService_getAllLicenses_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllLicenses_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllLicenses_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllLicenses_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getAllLicenses_result.prototype = {};
AdminService_getAllLicenses_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1992 = 0;
        var _rtmp31996;
        this.success = [];
        var _etype1995 = 0;
        _rtmp31996 = input.readListBegin();
        _etype1995 = _rtmp31996.etype;
        _size1992 = _rtmp31996.size;
        for (var _i1997 = 0; _i1997 < _size1992; ++_i1997)
        {
          var elem1998 = null;
          elem1998 = new License();
          elem1998.read(input);
          this.success.push(elem1998);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllLicenses_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllLicenses_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1999 in this.success)
    {
      if (this.success.hasOwnProperty(iter1999))
      {
        iter1999 = this.success[iter1999];
        iter1999.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_uploadLicenses_args = function(args) {
  this.token = null;
  this.fileContentBytes = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fileContentBytes !== undefined && args.fileContentBytes !== null) {
      this.fileContentBytes = args.fileContentBytes;
    }
  }
};
AdminService_uploadLicenses_args.prototype = {};
AdminService_uploadLicenses_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fileContentBytes = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_uploadLicenses_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_uploadLicenses_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fileContentBytes !== null && this.fileContentBytes !== undefined) {
    output.writeFieldBegin('fileContentBytes', Thrift.Type.STRING, 2);
    output.writeBinary(this.fileContentBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_uploadLicenses_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_uploadLicenses_result.prototype = {};
AdminService_uploadLicenses_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2000 = 0;
        var _rtmp32004;
        this.success = [];
        var _etype2003 = 0;
        _rtmp32004 = input.readListBegin();
        _etype2003 = _rtmp32004.etype;
        _size2000 = _rtmp32004.size;
        for (var _i2005 = 0; _i2005 < _size2000; ++_i2005)
        {
          var elem2006 = null;
          elem2006 = new License();
          elem2006.read(input);
          this.success.push(elem2006);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_uploadLicenses_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_uploadLicenses_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2007 in this.success)
    {
      if (this.success.hasOwnProperty(iter2007))
      {
        iter2007 = this.success[iter2007];
        iter2007.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_createOrUpdate_args = function(args) {
  this.token = null;
  this.dictionary = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.dictionary !== undefined && args.dictionary !== null) {
      this.dictionary = new CharMatchingDictionary(args.dictionary);
    }
  }
};
AdminService_createOrUpdate_args.prototype = {};
AdminService_createOrUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dictionary = new CharMatchingDictionary();
        this.dictionary.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_createOrUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_createOrUpdate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.dictionary !== null && this.dictionary !== undefined) {
    output.writeFieldBegin('dictionary', Thrift.Type.STRUCT, 2);
    this.dictionary.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_createOrUpdate_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new CharMatchingDictionary(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_createOrUpdate_result.prototype = {};
AdminService_createOrUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CharMatchingDictionary();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_createOrUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_createOrUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllCharMatchingDictionaries_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
AdminService_getAllCharMatchingDictionaries_args.prototype = {};
AdminService_getAllCharMatchingDictionaries_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllCharMatchingDictionaries_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllCharMatchingDictionaries_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getAllCharMatchingDictionaries_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [CharMatchingDictionary]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getAllCharMatchingDictionaries_result.prototype = {};
AdminService_getAllCharMatchingDictionaries_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2008 = 0;
        var _rtmp32012;
        this.success = [];
        var _etype2011 = 0;
        _rtmp32012 = input.readListBegin();
        _etype2011 = _rtmp32012.etype;
        _size2008 = _rtmp32012.size;
        for (var _i2013 = 0; _i2013 < _size2008; ++_i2013)
        {
          var elem2014 = null;
          elem2014 = new CharMatchingDictionary();
          elem2014.read(input);
          this.success.push(elem2014);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getAllCharMatchingDictionaries_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getAllCharMatchingDictionaries_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2015 in this.success)
    {
      if (this.success.hasOwnProperty(iter2015))
      {
        iter2015 = this.success[iter2015];
        iter2015.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_deleteCharMatchingDictionary_args = function(args) {
  this.token = null;
  this.dictionary = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.dictionary !== undefined && args.dictionary !== null) {
      this.dictionary = args.dictionary;
    }
  }
};
AdminService_deleteCharMatchingDictionary_args.prototype = {};
AdminService_deleteCharMatchingDictionary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dictionary = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_deleteCharMatchingDictionary_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_deleteCharMatchingDictionary_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.dictionary !== null && this.dictionary !== undefined) {
    output.writeFieldBegin('dictionary', Thrift.Type.STRING, 2);
    output.writeString(this.dictionary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_deleteCharMatchingDictionary_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_deleteCharMatchingDictionary_result.prototype = {};
AdminService_deleteCharMatchingDictionary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_deleteCharMatchingDictionary_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_deleteCharMatchingDictionary_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTranslations_args = function(args) {
  this.token = null;
  this.langCode = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.langCode !== undefined && args.langCode !== null) {
      this.langCode = args.langCode;
    }
  }
};
AdminService_getTranslations_args.prototype = {};
AdminService_getTranslations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTranslations_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTranslations_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.langCode !== null && this.langCode !== undefined) {
    output.writeFieldBegin('langCode', Thrift.Type.STRING, 2);
    output.writeString(this.langCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_getTranslations_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_getTranslations_result.prototype = {};
AdminService_getTranslations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_getTranslations_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_getTranslations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_setTranslations_args = function(args) {
  this.token = null;
  this.langCode = null;
  this.langFile = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.langCode !== undefined && args.langCode !== null) {
      this.langCode = args.langCode;
    }
    if (args.langFile !== undefined && args.langFile !== null) {
      this.langFile = args.langFile;
    }
  }
};
AdminService_setTranslations_args.prototype = {};
AdminService_setTranslations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.langCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.langFile = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_setTranslations_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_setTranslations_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.langCode !== null && this.langCode !== undefined) {
    output.writeFieldBegin('langCode', Thrift.Type.STRING, 2);
    output.writeString(this.langCode);
    output.writeFieldEnd();
  }
  if (this.langFile !== null && this.langFile !== undefined) {
    output.writeFieldBegin('langFile', Thrift.Type.STRING, 3);
    output.writeBinary(this.langFile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_setTranslations_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AdminService_setTranslations_result.prototype = {};
AdminService_setTranslations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_setTranslations_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_setTranslations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
AdminServiceClient.prototype = {};
AdminServiceClient.prototype.createOrUpdateFileStorage = function(token, fileStorage, password, accountId, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateFileStorage(token, fileStorage, password, accountId);
    return this.recv_createOrUpdateFileStorage();
  } else {
    var postData = this.send_createOrUpdateFileStorage(token, fileStorage, password, accountId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateFileStorage);
  }
};

AdminServiceClient.prototype.send_createOrUpdateFileStorage = function(token, fileStorage, password, accountId, callback) {
  this.output.writeMessageBegin('createOrUpdateFileStorage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fileStorage: fileStorage,
    password: password,
    accountId: accountId
  };
  var args = new AdminService_createOrUpdateFileStorage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_createOrUpdateFileStorage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_createOrUpdateFileStorage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateFileStorage failed: unknown result';
};
AdminServiceClient.prototype.getAllFileStorages = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllFileStorages(token, filter);
    return this.recv_getAllFileStorages();
  } else {
    var postData = this.send_getAllFileStorages(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllFileStorages);
  }
};

AdminServiceClient.prototype.send_getAllFileStorages = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllFileStorages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new AdminService_getAllFileStorages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getAllFileStorages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getAllFileStorages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllFileStorages failed: unknown result';
};
AdminServiceClient.prototype.removeFileStorages = function(token, fileStorageIds, password, callback) {
  if (callback === undefined) {
    this.send_removeFileStorages(token, fileStorageIds, password);
    return this.recv_removeFileStorages();
  } else {
    var postData = this.send_removeFileStorages(token, fileStorageIds, password, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeFileStorages);
  }
};

AdminServiceClient.prototype.send_removeFileStorages = function(token, fileStorageIds, password, callback) {
  this.output.writeMessageBegin('removeFileStorages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fileStorageIds: fileStorageIds,
    password: password
  };
  var args = new AdminService_removeFileStorages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_removeFileStorages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_removeFileStorages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeFileStorages failed: unknown result';
};
AdminServiceClient.prototype.moveAttachment = function(token, docId, fileStorageId, onlyLatest, callback) {
  if (callback === undefined) {
    this.send_moveAttachment(token, docId, fileStorageId, onlyLatest);
    return this.recv_moveAttachment();
  } else {
    var postData = this.send_moveAttachment(token, docId, fileStorageId, onlyLatest, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_moveAttachment);
  }
};

AdminServiceClient.prototype.send_moveAttachment = function(token, docId, fileStorageId, onlyLatest, callback) {
  this.output.writeMessageBegin('moveAttachment', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docId: docId,
    fileStorageId: fileStorageId,
    onlyLatest: onlyLatest
  };
  var args = new AdminService_moveAttachment_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_moveAttachment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_moveAttachment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'moveAttachment failed: unknown result';
};
AdminServiceClient.prototype.getHistory = function(token, documentId, filter, callback) {
  if (callback === undefined) {
    this.send_getHistory(token, documentId, filter);
    return this.recv_getHistory();
  } else {
    var postData = this.send_getHistory(token, documentId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getHistory);
  }
};

AdminServiceClient.prototype.send_getHistory = function(token, documentId, filter, callback) {
  this.output.writeMessageBegin('getHistory', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    filter: filter
  };
  var args = new AdminService_getHistory_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getHistory = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getHistory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getHistory failed: unknown result';
};
AdminServiceClient.prototype.createOrUpdateNews = function(token, news, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateNews(token, news);
    return this.recv_createOrUpdateNews();
  } else {
    var postData = this.send_createOrUpdateNews(token, news, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateNews);
  }
};

AdminServiceClient.prototype.send_createOrUpdateNews = function(token, news, callback) {
  this.output.writeMessageBegin('createOrUpdateNews', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    news: news
  };
  var args = new AdminService_createOrUpdateNews_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_createOrUpdateNews = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_createOrUpdateNews_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateNews failed: unknown result';
};
AdminServiceClient.prototype.removeNews = function(token, newsId, callback) {
  if (callback === undefined) {
    this.send_removeNews(token, newsId);
    return this.recv_removeNews();
  } else {
    var postData = this.send_removeNews(token, newsId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeNews);
  }
};

AdminServiceClient.prototype.send_removeNews = function(token, newsId, callback) {
  this.output.writeMessageBegin('removeNews', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    newsId: newsId
  };
  var args = new AdminService_removeNews_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_removeNews = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_removeNews_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeNews failed: unknown result';
};
AdminServiceClient.prototype.getAllExternalModules = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllExternalModules(token, filter);
    return this.recv_getAllExternalModules();
  } else {
    var postData = this.send_getAllExternalModules(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllExternalModules);
  }
};

AdminServiceClient.prototype.send_getAllExternalModules = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllExternalModules', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new AdminService_getAllExternalModules_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getAllExternalModules = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getAllExternalModules_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllExternalModules failed: unknown result';
};
AdminServiceClient.prototype.registerExternalModule = function(token, url, newUser, newUserLogin, adminPassword, callback) {
  if (callback === undefined) {
    this.send_registerExternalModule(token, url, newUser, newUserLogin, adminPassword);
    return this.recv_registerExternalModule();
  } else {
    var postData = this.send_registerExternalModule(token, url, newUser, newUserLogin, adminPassword, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_registerExternalModule);
  }
};

AdminServiceClient.prototype.send_registerExternalModule = function(token, url, newUser, newUserLogin, adminPassword, callback) {
  this.output.writeMessageBegin('registerExternalModule', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    url: url,
    newUser: newUser,
    newUserLogin: newUserLogin,
    adminPassword: adminPassword
  };
  var args = new AdminService_registerExternalModule_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_registerExternalModule = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_registerExternalModule_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'registerExternalModule failed: unknown result';
};
AdminServiceClient.prototype.refreshExternalModule = function(token, extModuleId, callback) {
  if (callback === undefined) {
    this.send_refreshExternalModule(token, extModuleId);
    return this.recv_refreshExternalModule();
  } else {
    var postData = this.send_refreshExternalModule(token, extModuleId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_refreshExternalModule);
  }
};

AdminServiceClient.prototype.send_refreshExternalModule = function(token, extModuleId, callback) {
  this.output.writeMessageBegin('refreshExternalModule', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    extModuleId: extModuleId
  };
  var args = new AdminService_refreshExternalModule_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_refreshExternalModule = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_refreshExternalModule_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'refreshExternalModule failed: unknown result';
};
AdminServiceClient.prototype.removeExternalModule = function(token, extModuleId, password, callback) {
  if (callback === undefined) {
    this.send_removeExternalModule(token, extModuleId, password);
    return this.recv_removeExternalModule();
  } else {
    var postData = this.send_removeExternalModule(token, extModuleId, password, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeExternalModule);
  }
};

AdminServiceClient.prototype.send_removeExternalModule = function(token, extModuleId, password, callback) {
  this.output.writeMessageBegin('removeExternalModule', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    extModuleId: extModuleId,
    password: password
  };
  var args = new AdminService_removeExternalModule_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_removeExternalModule = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_removeExternalModule_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeExternalModule failed: unknown result';
};
AdminServiceClient.prototype.getAllDocumentAttachments = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllDocumentAttachments(token, filter);
    return this.recv_getAllDocumentAttachments();
  } else {
    var postData = this.send_getAllDocumentAttachments(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocumentAttachments);
  }
};

AdminServiceClient.prototype.send_getAllDocumentAttachments = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllDocumentAttachments', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new AdminService_getAllDocumentAttachments_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getAllDocumentAttachments = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getAllDocumentAttachments_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocumentAttachments failed: unknown result';
};
AdminServiceClient.prototype.updateDocument = function(token, document, callback) {
  if (callback === undefined) {
    this.send_updateDocument(token, document);
    return this.recv_updateDocument();
  } else {
    var postData = this.send_updateDocument(token, document, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateDocument);
  }
};

AdminServiceClient.prototype.send_updateDocument = function(token, document, callback) {
  this.output.writeMessageBegin('updateDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    document: document
  };
  var args = new AdminService_updateDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_updateDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_updateDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateDocument failed: unknown result';
};
AdminServiceClient.prototype.getAllFilledDocumentPatternStages = function(token, fillDocPatternId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllFilledDocumentPatternStages(token, fillDocPatternId, filter);
    return this.recv_getAllFilledDocumentPatternStages();
  } else {
    var postData = this.send_getAllFilledDocumentPatternStages(token, fillDocPatternId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllFilledDocumentPatternStages);
  }
};

AdminServiceClient.prototype.send_getAllFilledDocumentPatternStages = function(token, fillDocPatternId, filter, callback) {
  this.output.writeMessageBegin('getAllFilledDocumentPatternStages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fillDocPatternId: fillDocPatternId,
    filter: filter
  };
  var args = new AdminService_getAllFilledDocumentPatternStages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getAllFilledDocumentPatternStages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getAllFilledDocumentPatternStages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllFilledDocumentPatternStages failed: unknown result';
};
AdminServiceClient.prototype.resetDocumentForceMoveError = function(token, documentId, callback) {
  if (callback === undefined) {
    this.send_resetDocumentForceMoveError(token, documentId);
    return this.recv_resetDocumentForceMoveError();
  } else {
    var postData = this.send_resetDocumentForceMoveError(token, documentId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_resetDocumentForceMoveError);
  }
};

AdminServiceClient.prototype.send_resetDocumentForceMoveError = function(token, documentId, callback) {
  this.output.writeMessageBegin('resetDocumentForceMoveError', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId
  };
  var args = new AdminService_resetDocumentForceMoveError_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_resetDocumentForceMoveError = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_resetDocumentForceMoveError_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'resetDocumentForceMoveError failed: unknown result';
};
AdminServiceClient.prototype.changeExecutorForPatternStages = function(token, patternIds, userOrGroup, usersOrGroups, callback) {
  if (callback === undefined) {
    this.send_changeExecutorForPatternStages(token, patternIds, userOrGroup, usersOrGroups);
    return this.recv_changeExecutorForPatternStages();
  } else {
    var postData = this.send_changeExecutorForPatternStages(token, patternIds, userOrGroup, usersOrGroups, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeExecutorForPatternStages);
  }
};

AdminServiceClient.prototype.send_changeExecutorForPatternStages = function(token, patternIds, userOrGroup, usersOrGroups, callback) {
  this.output.writeMessageBegin('changeExecutorForPatternStages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    patternIds: patternIds,
    userOrGroup: userOrGroup,
    usersOrGroups: usersOrGroups
  };
  var args = new AdminService_changeExecutorForPatternStages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_changeExecutorForPatternStages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_changeExecutorForPatternStages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeExecutorForPatternStages failed: unknown result';
};
AdminServiceClient.prototype.setUserPublicKey = function(token, userId, publicKey, password, callback) {
  if (callback === undefined) {
    this.send_setUserPublicKey(token, userId, publicKey, password);
    return this.recv_setUserPublicKey();
  } else {
    var postData = this.send_setUserPublicKey(token, userId, publicKey, password, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setUserPublicKey);
  }
};

AdminServiceClient.prototype.send_setUserPublicKey = function(token, userId, publicKey, password, callback) {
  this.output.writeMessageBegin('setUserPublicKey', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userId: userId,
    publicKey: publicKey,
    password: password
  };
  var args = new AdminService_setUserPublicKey_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_setUserPublicKey = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_setUserPublicKey_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setUserPublicKey failed: unknown result';
};
AdminServiceClient.prototype.removeUserPublicKey = function(token, userId, password, callback) {
  if (callback === undefined) {
    this.send_removeUserPublicKey(token, userId, password);
    return this.recv_removeUserPublicKey();
  } else {
    var postData = this.send_removeUserPublicKey(token, userId, password, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeUserPublicKey);
  }
};

AdminServiceClient.prototype.send_removeUserPublicKey = function(token, userId, password, callback) {
  this.output.writeMessageBegin('removeUserPublicKey', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userId: userId,
    password: password
  };
  var args = new AdminService_removeUserPublicKey_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_removeUserPublicKey = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_removeUserPublicKey_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeUserPublicKey failed: unknown result';
};
AdminServiceClient.prototype.getAllUsersRelativeToAccount = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllUsersRelativeToAccount(token, filter);
    return this.recv_getAllUsersRelativeToAccount();
  } else {
    var postData = this.send_getAllUsersRelativeToAccount(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllUsersRelativeToAccount);
  }
};

AdminServiceClient.prototype.send_getAllUsersRelativeToAccount = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllUsersRelativeToAccount', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new AdminService_getAllUsersRelativeToAccount_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getAllUsersRelativeToAccount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getAllUsersRelativeToAccount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllUsersRelativeToAccount failed: unknown result';
};
AdminServiceClient.prototype.getCountAllUsersRelativeToAccount = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getCountAllUsersRelativeToAccount(token, filter);
    return this.recv_getCountAllUsersRelativeToAccount();
  } else {
    var postData = this.send_getCountAllUsersRelativeToAccount(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCountAllUsersRelativeToAccount);
  }
};

AdminServiceClient.prototype.send_getCountAllUsersRelativeToAccount = function(token, filter, callback) {
  this.output.writeMessageBegin('getCountAllUsersRelativeToAccount', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new AdminService_getCountAllUsersRelativeToAccount_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getCountAllUsersRelativeToAccount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getCountAllUsersRelativeToAccount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAllUsersRelativeToAccount failed: unknown result';
};
AdminServiceClient.prototype.bindUsersAndAccounts = function(token, accUsers, callback) {
  if (callback === undefined) {
    this.send_bindUsersAndAccounts(token, accUsers);
    return this.recv_bindUsersAndAccounts();
  } else {
    var postData = this.send_bindUsersAndAccounts(token, accUsers, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_bindUsersAndAccounts);
  }
};

AdminServiceClient.prototype.send_bindUsersAndAccounts = function(token, accUsers, callback) {
  this.output.writeMessageBegin('bindUsersAndAccounts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    accUsers: accUsers
  };
  var args = new AdminService_bindUsersAndAccounts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_bindUsersAndAccounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_bindUsersAndAccounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'bindUsersAndAccounts failed: unknown result';
};
AdminServiceClient.prototype.removeUsersFromAccounts = function(token, accountIds, usersIds, callback) {
  if (callback === undefined) {
    this.send_removeUsersFromAccounts(token, accountIds, usersIds);
    return this.recv_removeUsersFromAccounts();
  } else {
    var postData = this.send_removeUsersFromAccounts(token, accountIds, usersIds, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeUsersFromAccounts);
  }
};

AdminServiceClient.prototype.send_removeUsersFromAccounts = function(token, accountIds, usersIds, callback) {
  this.output.writeMessageBegin('removeUsersFromAccounts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    accountIds: accountIds,
    usersIds: usersIds
  };
  var args = new AdminService_removeUsersFromAccounts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_removeUsersFromAccounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_removeUsersFromAccounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeUsersFromAccounts failed: unknown result';
};
AdminServiceClient.prototype.runScheduler = function(token, name, callback) {
  if (callback === undefined) {
    this.send_runScheduler(token, name);
    return this.recv_runScheduler();
  } else {
    var postData = this.send_runScheduler(token, name, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_runScheduler);
  }
};

AdminServiceClient.prototype.send_runScheduler = function(token, name, callback) {
  this.output.writeMessageBegin('runScheduler', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    name: name
  };
  var args = new AdminService_runScheduler_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_runScheduler = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_runScheduler_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'runScheduler failed: unknown result';
};
AdminServiceClient.prototype.changeEncryptKey = function(token, key, accountId, password, callback) {
  if (callback === undefined) {
    this.send_changeEncryptKey(token, key, accountId, password);
    return this.recv_changeEncryptKey();
  } else {
    var postData = this.send_changeEncryptKey(token, key, accountId, password, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeEncryptKey);
  }
};

AdminServiceClient.prototype.send_changeEncryptKey = function(token, key, accountId, password, callback) {
  this.output.writeMessageBegin('changeEncryptKey', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    key: key,
    accountId: accountId,
    password: password
  };
  var args = new AdminService_changeEncryptKey_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_changeEncryptKey = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_changeEncryptKey_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeEncryptKey failed: unknown result';
};
AdminServiceClient.prototype.getAllUsersExt = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllUsersExt(token, filter);
    return this.recv_getAllUsersExt();
  } else {
    var postData = this.send_getAllUsersExt(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllUsersExt);
  }
};

AdminServiceClient.prototype.send_getAllUsersExt = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllUsersExt', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new AdminService_getAllUsersExt_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getAllUsersExt = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getAllUsersExt_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllUsersExt failed: unknown result';
};
AdminServiceClient.prototype.getCountAllUsersExt = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getCountAllUsersExt(token, filter);
    return this.recv_getCountAllUsersExt();
  } else {
    var postData = this.send_getCountAllUsersExt(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCountAllUsersExt);
  }
};

AdminServiceClient.prototype.send_getCountAllUsersExt = function(token, filter, callback) {
  this.output.writeMessageBegin('getCountAllUsersExt', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new AdminService_getCountAllUsersExt_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getCountAllUsersExt = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getCountAllUsersExt_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAllUsersExt failed: unknown result';
};
AdminServiceClient.prototype.getAllUserNotifications = function(token, userId, unreadOnly, filter, callback) {
  if (callback === undefined) {
    this.send_getAllUserNotifications(token, userId, unreadOnly, filter);
    return this.recv_getAllUserNotifications();
  } else {
    var postData = this.send_getAllUserNotifications(token, userId, unreadOnly, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllUserNotifications);
  }
};

AdminServiceClient.prototype.send_getAllUserNotifications = function(token, userId, unreadOnly, filter, callback) {
  this.output.writeMessageBegin('getAllUserNotifications', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userId: userId,
    unreadOnly: unreadOnly,
    filter: filter
  };
  var args = new AdminService_getAllUserNotifications_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getAllUserNotifications = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getAllUserNotifications_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllUserNotifications failed: unknown result';
};
AdminServiceClient.prototype.getAllNotifications = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllNotifications(token, filter);
    return this.recv_getAllNotifications();
  } else {
    var postData = this.send_getAllNotifications(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllNotifications);
  }
};

AdminServiceClient.prototype.send_getAllNotifications = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllNotifications', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new AdminService_getAllNotifications_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getAllNotifications = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getAllNotifications_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllNotifications failed: unknown result';
};
AdminServiceClient.prototype.moveDocumentOnOtherPatternStage = function(token, documentId, stageId, resetMoveError, callback) {
  if (callback === undefined) {
    this.send_moveDocumentOnOtherPatternStage(token, documentId, stageId, resetMoveError);
    return this.recv_moveDocumentOnOtherPatternStage();
  } else {
    var postData = this.send_moveDocumentOnOtherPatternStage(token, documentId, stageId, resetMoveError, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_moveDocumentOnOtherPatternStage);
  }
};

AdminServiceClient.prototype.send_moveDocumentOnOtherPatternStage = function(token, documentId, stageId, resetMoveError, callback) {
  this.output.writeMessageBegin('moveDocumentOnOtherPatternStage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    stageId: stageId,
    resetMoveError: resetMoveError
  };
  var args = new AdminService_moveDocumentOnOtherPatternStage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_moveDocumentOnOtherPatternStage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_moveDocumentOnOtherPatternStage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'moveDocumentOnOtherPatternStage failed: unknown result';
};
AdminServiceClient.prototype.getAllSessions = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllSessions(token, filter);
    return this.recv_getAllSessions();
  } else {
    var postData = this.send_getAllSessions(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllSessions);
  }
};

AdminServiceClient.prototype.send_getAllSessions = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllSessions', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new AdminService_getAllSessions_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getAllSessions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getAllSessions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllSessions failed: unknown result';
};
AdminServiceClient.prototype.getCountAllSessions = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getCountAllSessions(token, filter);
    return this.recv_getCountAllSessions();
  } else {
    var postData = this.send_getCountAllSessions(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCountAllSessions);
  }
};

AdminServiceClient.prototype.send_getCountAllSessions = function(token, filter, callback) {
  this.output.writeMessageBegin('getCountAllSessions', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new AdminService_getCountAllSessions_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getCountAllSessions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getCountAllSessions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAllSessions failed: unknown result';
};
AdminServiceClient.prototype.confirmUserPublicKey = function(token, id, confirm, callback) {
  if (callback === undefined) {
    this.send_confirmUserPublicKey(token, id, confirm);
    return this.recv_confirmUserPublicKey();
  } else {
    var postData = this.send_confirmUserPublicKey(token, id, confirm, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_confirmUserPublicKey);
  }
};

AdminServiceClient.prototype.send_confirmUserPublicKey = function(token, id, confirm, callback) {
  this.output.writeMessageBegin('confirmUserPublicKey', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    id: id,
    confirm: confirm
  };
  var args = new AdminService_confirmUserPublicKey_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_confirmUserPublicKey = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_confirmUserPublicKey_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'confirmUserPublicKey failed: unknown result';
};
AdminServiceClient.prototype.closeSession = function(token, sessionId, callback) {
  if (callback === undefined) {
    this.send_closeSession(token, sessionId);
    return this.recv_closeSession();
  } else {
    var postData = this.send_closeSession(token, sessionId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_closeSession);
  }
};

AdminServiceClient.prototype.send_closeSession = function(token, sessionId, callback) {
  this.output.writeMessageBegin('closeSession', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    sessionId: sessionId
  };
  var args = new AdminService_closeSession_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_closeSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_closeSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'closeSession failed: unknown result';
};
AdminServiceClient.prototype.copyPersonalAccess = function(token, userIdFrom, userIdTo, accounts, roles, groups, securityClassifications, documents, meetings, bpm, callback) {
  if (callback === undefined) {
    this.send_copyPersonalAccess(token, userIdFrom, userIdTo, accounts, roles, groups, securityClassifications, documents, meetings, bpm);
    return this.recv_copyPersonalAccess();
  } else {
    var postData = this.send_copyPersonalAccess(token, userIdFrom, userIdTo, accounts, roles, groups, securityClassifications, documents, meetings, bpm, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_copyPersonalAccess);
  }
};

AdminServiceClient.prototype.send_copyPersonalAccess = function(token, userIdFrom, userIdTo, accounts, roles, groups, securityClassifications, documents, meetings, bpm, callback) {
  this.output.writeMessageBegin('copyPersonalAccess', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userIdFrom: userIdFrom,
    userIdTo: userIdTo,
    accounts: accounts,
    roles: roles,
    groups: groups,
    securityClassifications: securityClassifications,
    documents: documents,
    meetings: meetings,
    bpm: bpm
  };
  var args = new AdminService_copyPersonalAccess_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_copyPersonalAccess = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_copyPersonalAccess_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'copyPersonalAccess failed: unknown result';
};
AdminServiceClient.prototype.getAllLicenses = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllLicenses(token, filter);
    return this.recv_getAllLicenses();
  } else {
    var postData = this.send_getAllLicenses(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllLicenses);
  }
};

AdminServiceClient.prototype.send_getAllLicenses = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllLicenses', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new AdminService_getAllLicenses_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getAllLicenses = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getAllLicenses_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllLicenses failed: unknown result';
};
AdminServiceClient.prototype.uploadLicenses = function(token, fileContentBytes, callback) {
  if (callback === undefined) {
    this.send_uploadLicenses(token, fileContentBytes);
    return this.recv_uploadLicenses();
  } else {
    var postData = this.send_uploadLicenses(token, fileContentBytes, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_uploadLicenses);
  }
};

AdminServiceClient.prototype.send_uploadLicenses = function(token, fileContentBytes, callback) {
  this.output.writeMessageBegin('uploadLicenses', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fileContentBytes: fileContentBytes
  };
  var args = new AdminService_uploadLicenses_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_uploadLicenses = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_uploadLicenses_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'uploadLicenses failed: unknown result';
};
AdminServiceClient.prototype.createOrUpdate = function(token, dictionary, callback) {
  if (callback === undefined) {
    this.send_createOrUpdate(token, dictionary);
    return this.recv_createOrUpdate();
  } else {
    var postData = this.send_createOrUpdate(token, dictionary, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdate);
  }
};

AdminServiceClient.prototype.send_createOrUpdate = function(token, dictionary, callback) {
  this.output.writeMessageBegin('createOrUpdate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    dictionary: dictionary
  };
  var args = new AdminService_createOrUpdate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_createOrUpdate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_createOrUpdate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdate failed: unknown result';
};
AdminServiceClient.prototype.getAllCharMatchingDictionaries = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllCharMatchingDictionaries(token, filter);
    return this.recv_getAllCharMatchingDictionaries();
  } else {
    var postData = this.send_getAllCharMatchingDictionaries(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllCharMatchingDictionaries);
  }
};

AdminServiceClient.prototype.send_getAllCharMatchingDictionaries = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllCharMatchingDictionaries', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new AdminService_getAllCharMatchingDictionaries_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getAllCharMatchingDictionaries = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getAllCharMatchingDictionaries_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllCharMatchingDictionaries failed: unknown result';
};
AdminServiceClient.prototype.deleteCharMatchingDictionary = function(token, dictionary, callback) {
  if (callback === undefined) {
    this.send_deleteCharMatchingDictionary(token, dictionary);
    return this.recv_deleteCharMatchingDictionary();
  } else {
    var postData = this.send_deleteCharMatchingDictionary(token, dictionary, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteCharMatchingDictionary);
  }
};

AdminServiceClient.prototype.send_deleteCharMatchingDictionary = function(token, dictionary, callback) {
  this.output.writeMessageBegin('deleteCharMatchingDictionary', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    dictionary: dictionary
  };
  var args = new AdminService_deleteCharMatchingDictionary_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_deleteCharMatchingDictionary = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_deleteCharMatchingDictionary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteCharMatchingDictionary failed: unknown result';
};
AdminServiceClient.prototype.getTranslations = function(token, langCode, callback) {
  if (callback === undefined) {
    this.send_getTranslations(token, langCode);
    return this.recv_getTranslations();
  } else {
    var postData = this.send_getTranslations(token, langCode, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTranslations);
  }
};

AdminServiceClient.prototype.send_getTranslations = function(token, langCode, callback) {
  this.output.writeMessageBegin('getTranslations', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    langCode: langCode
  };
  var args = new AdminService_getTranslations_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_getTranslations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_getTranslations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getTranslations failed: unknown result';
};
AdminServiceClient.prototype.setTranslations = function(token, langCode, langFile, callback) {
  if (callback === undefined) {
    this.send_setTranslations(token, langCode, langFile);
    return this.recv_setTranslations();
  } else {
    var postData = this.send_setTranslations(token, langCode, langFile, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setTranslations);
  }
};

AdminServiceClient.prototype.send_setTranslations = function(token, langCode, langFile, callback) {
  this.output.writeMessageBegin('setTranslations', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    langCode: langCode,
    langFile: langFile
  };
  var args = new AdminService_setTranslations_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AdminServiceClient.prototype.recv_setTranslations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdminService_setTranslations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setTranslations failed: unknown result';
};
