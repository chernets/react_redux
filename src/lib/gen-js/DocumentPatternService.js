//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

DocumentPatternService_getAllDocumentPatterns_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentPatternService_getAllDocumentPatterns_args.prototype = {};
DocumentPatternService_getAllDocumentPatterns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatterns_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDocumentPatterns_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatterns_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPattern]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getAllDocumentPatterns_result.prototype = {};
DocumentPatternService_getAllDocumentPatterns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1276 = 0;
        var _rtmp31280;
        this.success = [];
        var _etype1279 = 0;
        _rtmp31280 = input.readListBegin();
        _etype1279 = _rtmp31280.etype;
        _size1276 = _rtmp31280.size;
        for (var _i1281 = 0; _i1281 < _size1276; ++_i1281)
        {
          var elem1282 = null;
          elem1282 = new DocumentPattern();
          elem1282.read(input);
          this.success.push(elem1282);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatterns_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDocumentPatterns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1283 in this.success)
    {
      if (this.success.hasOwnProperty(iter1283))
      {
        iter1283 = this.success[iter1283];
        iter1283.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getDocumentPattern_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
  }
};
DocumentPatternService_getDocumentPattern_args.prototype = {};
DocumentPatternService_getDocumentPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getDocumentPattern_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getDocumentPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getDocumentPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentPattern(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getDocumentPattern_result.prototype = {};
DocumentPatternService_getDocumentPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentPattern();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getDocumentPattern_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getDocumentPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPattern_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
  }
};
DocumentPatternService_deleteDocumentPattern_args.prototype = {};
DocumentPatternService_deleteDocumentPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPattern_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteDocumentPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_deleteDocumentPattern_result.prototype = {};
DocumentPatternService_deleteDocumentPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPattern_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteDocumentPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPattern_args = function(args) {
  this.token = null;
  this.documentPattern = null;
  this.accountId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentPattern !== undefined && args.documentPattern !== null) {
      this.documentPattern = new DocumentPattern(args.documentPattern);
    }
    if (args.accountId !== undefined && args.accountId !== null) {
      this.accountId = args.accountId;
    }
  }
};
DocumentPatternService_createOrUpdateDocumentPattern_args.prototype = {};
DocumentPatternService_createOrUpdateDocumentPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.documentPattern = new DocumentPattern();
        this.documentPattern.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPattern_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDocumentPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentPattern !== null && this.documentPattern !== undefined) {
    output.writeFieldBegin('documentPattern', Thrift.Type.STRUCT, 2);
    this.documentPattern.write(output);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 3);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentPattern(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_createOrUpdateDocumentPattern_result.prototype = {};
DocumentPatternService_createOrUpdateDocumentPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentPattern();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPattern_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDocumentPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStages_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.filter = null;
  this.selector = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
    if (args.selector !== undefined && args.selector !== null) {
      this.selector = args.selector;
    }
  }
};
DocumentPatternService_getAllDocumentPatternStages_args.prototype = {};
DocumentPatternService_getAllDocumentPatternStages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.selector = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStages_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDocumentPatternStages_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.I32, 4);
    output.writeI32(this.selector);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStages_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStage]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getAllDocumentPatternStages_result.prototype = {};
DocumentPatternService_getAllDocumentPatternStages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1284 = 0;
        var _rtmp31288;
        this.success = [];
        var _etype1287 = 0;
        _rtmp31288 = input.readListBegin();
        _etype1287 = _rtmp31288.etype;
        _size1284 = _rtmp31288.size;
        for (var _i1289 = 0; _i1289 < _size1284; ++_i1289)
        {
          var elem1290 = null;
          elem1290 = new DocumentPatternStage();
          elem1290.read(input);
          this.success.push(elem1290);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStages_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDocumentPatternStages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1291 in this.success)
    {
      if (this.success.hasOwnProperty(iter1291))
      {
        iter1291 = this.success[iter1291];
        iter1291.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStagesForCreate_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentPatternService_getAllDocumentPatternStagesForCreate_args.prototype = {};
DocumentPatternService_getAllDocumentPatternStagesForCreate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStagesForCreate_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDocumentPatternStagesForCreate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStagesForCreate_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStage]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getAllDocumentPatternStagesForCreate_result.prototype = {};
DocumentPatternService_getAllDocumentPatternStagesForCreate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1292 = 0;
        var _rtmp31296;
        this.success = [];
        var _etype1295 = 0;
        _rtmp31296 = input.readListBegin();
        _etype1295 = _rtmp31296.etype;
        _size1292 = _rtmp31296.size;
        for (var _i1297 = 0; _i1297 < _size1292; ++_i1297)
        {
          var elem1298 = null;
          elem1298 = new DocumentPatternStage();
          elem1298.read(input);
          this.success.push(elem1298);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStagesForCreate_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDocumentPatternStagesForCreate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1299 in this.success)
    {
      if (this.success.hasOwnProperty(iter1299))
      {
        iter1299 = this.success[iter1299];
        iter1299.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getDocumentPatternStage_args = function(args) {
  this.token = null;
  this.docPatternStageId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternStageId !== undefined && args.docPatternStageId !== null) {
      this.docPatternStageId = args.docPatternStageId;
    }
  }
};
DocumentPatternService_getDocumentPatternStage_args.prototype = {};
DocumentPatternService_getDocumentPatternStage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getDocumentPatternStage_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getDocumentPatternStage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternStageId !== null && this.docPatternStageId !== undefined) {
    output.writeFieldBegin('docPatternStageId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternStageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getDocumentPatternStage_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentPatternStage(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getDocumentPatternStage_result.prototype = {};
DocumentPatternService_getDocumentPatternStage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentPatternStage();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getDocumentPatternStage_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getDocumentPatternStage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternStageAndMoveDocuments_args = function(args) {
  this.token = null;
  this.docPatternStageId = null;
  this.newDocPatternStageId = null;
  this.fillDocPatternId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternStageId !== undefined && args.docPatternStageId !== null) {
      this.docPatternStageId = args.docPatternStageId;
    }
    if (args.newDocPatternStageId !== undefined && args.newDocPatternStageId !== null) {
      this.newDocPatternStageId = args.newDocPatternStageId;
    }
    if (args.fillDocPatternId !== undefined && args.fillDocPatternId !== null) {
      this.fillDocPatternId = args.fillDocPatternId;
    }
  }
};
DocumentPatternService_deleteDocumentPatternStageAndMoveDocuments_args.prototype = {};
DocumentPatternService_deleteDocumentPatternStageAndMoveDocuments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newDocPatternStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fillDocPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternStageAndMoveDocuments_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteDocumentPatternStageAndMoveDocuments_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternStageId !== null && this.docPatternStageId !== undefined) {
    output.writeFieldBegin('docPatternStageId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternStageId);
    output.writeFieldEnd();
  }
  if (this.newDocPatternStageId !== null && this.newDocPatternStageId !== undefined) {
    output.writeFieldBegin('newDocPatternStageId', Thrift.Type.STRING, 3);
    output.writeString(this.newDocPatternStageId);
    output.writeFieldEnd();
  }
  if (this.fillDocPatternId !== null && this.fillDocPatternId !== undefined) {
    output.writeFieldBegin('fillDocPatternId', Thrift.Type.STRING, 4);
    output.writeString(this.fillDocPatternId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternStageAndMoveDocuments_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_deleteDocumentPatternStageAndMoveDocuments_result.prototype = {};
DocumentPatternService_deleteDocumentPatternStageAndMoveDocuments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternStageAndMoveDocuments_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteDocumentPatternStageAndMoveDocuments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternStage_args = function(args) {
  this.token = null;
  this.docPatternStageId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternStageId !== undefined && args.docPatternStageId !== null) {
      this.docPatternStageId = args.docPatternStageId;
    }
  }
};
DocumentPatternService_deleteDocumentPatternStage_args.prototype = {};
DocumentPatternService_deleteDocumentPatternStage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternStage_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteDocumentPatternStage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternStageId !== null && this.docPatternStageId !== undefined) {
    output.writeFieldBegin('docPatternStageId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternStageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternStage_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_deleteDocumentPatternStage_result.prototype = {};
DocumentPatternService_deleteDocumentPatternStage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternStage_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteDocumentPatternStage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStage_args = function(args) {
  this.token = null;
  this.documentPatternStage = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentPatternStage !== undefined && args.documentPatternStage !== null) {
      this.documentPatternStage = new DocumentPatternStage(args.documentPatternStage);
    }
  }
};
DocumentPatternService_createOrUpdateDocumentPatternStage_args.prototype = {};
DocumentPatternService_createOrUpdateDocumentPatternStage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.documentPatternStage = new DocumentPatternStage();
        this.documentPatternStage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStage_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDocumentPatternStage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentPatternStage !== null && this.documentPatternStage !== undefined) {
    output.writeFieldBegin('documentPatternStage', Thrift.Type.STRUCT, 2);
    this.documentPatternStage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStage_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentPatternStage(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_createOrUpdateDocumentPatternStage_result.prototype = {};
DocumentPatternService_createOrUpdateDocumentPatternStage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentPatternStage();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStage_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDocumentPatternStage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStages_args = function(args) {
  this.token = null;
  this.stages = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.stages !== undefined && args.stages !== null) {
      this.stages = Thrift.copyList(args.stages, [DocumentPatternStage]);
    }
  }
};
DocumentPatternService_createOrUpdateDocumentPatternStages_args.prototype = {};
DocumentPatternService_createOrUpdateDocumentPatternStages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1300 = 0;
        var _rtmp31304;
        this.stages = [];
        var _etype1303 = 0;
        _rtmp31304 = input.readListBegin();
        _etype1303 = _rtmp31304.etype;
        _size1300 = _rtmp31304.size;
        for (var _i1305 = 0; _i1305 < _size1300; ++_i1305)
        {
          var elem1306 = null;
          elem1306 = new DocumentPatternStage();
          elem1306.read(input);
          this.stages.push(elem1306);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStages_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDocumentPatternStages_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.stages !== null && this.stages !== undefined) {
    output.writeFieldBegin('stages', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.stages.length);
    for (var iter1307 in this.stages)
    {
      if (this.stages.hasOwnProperty(iter1307))
      {
        iter1307 = this.stages[iter1307];
        iter1307.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStages_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStage]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_createOrUpdateDocumentPatternStages_result.prototype = {};
DocumentPatternService_createOrUpdateDocumentPatternStages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1308 = 0;
        var _rtmp31312;
        this.success = [];
        var _etype1311 = 0;
        _rtmp31312 = input.readListBegin();
        _etype1311 = _rtmp31312.etype;
        _size1308 = _rtmp31312.size;
        for (var _i1313 = 0; _i1313 < _size1308; ++_i1313)
        {
          var elem1314 = null;
          elem1314 = new DocumentPatternStage();
          elem1314.read(input);
          this.success.push(elem1314);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStages_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDocumentPatternStages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1315 in this.success)
    {
      if (this.success.hasOwnProperty(iter1315))
      {
        iter1315 = this.success[iter1315];
        iter1315.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStagesLinks_args = function(args) {
  this.token = null;
  this.links = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.links !== undefined && args.links !== null) {
      this.links = Thrift.copyList(args.links, [DocumentPatternStagesLink]);
    }
  }
};
DocumentPatternService_createOrUpdateDocumentPatternStagesLinks_args.prototype = {};
DocumentPatternService_createOrUpdateDocumentPatternStagesLinks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1316 = 0;
        var _rtmp31320;
        this.links = [];
        var _etype1319 = 0;
        _rtmp31320 = input.readListBegin();
        _etype1319 = _rtmp31320.etype;
        _size1316 = _rtmp31320.size;
        for (var _i1321 = 0; _i1321 < _size1316; ++_i1321)
        {
          var elem1322 = null;
          elem1322 = new DocumentPatternStagesLink();
          elem1322.read(input);
          this.links.push(elem1322);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStagesLinks_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDocumentPatternStagesLinks_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.links !== null && this.links !== undefined) {
    output.writeFieldBegin('links', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.links.length);
    for (var iter1323 in this.links)
    {
      if (this.links.hasOwnProperty(iter1323))
      {
        iter1323 = this.links[iter1323];
        iter1323.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStagesLinks_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStagesLink]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_createOrUpdateDocumentPatternStagesLinks_result.prototype = {};
DocumentPatternService_createOrUpdateDocumentPatternStagesLinks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1324 = 0;
        var _rtmp31328;
        this.success = [];
        var _etype1327 = 0;
        _rtmp31328 = input.readListBegin();
        _etype1327 = _rtmp31328.etype;
        _size1324 = _rtmp31328.size;
        for (var _i1329 = 0; _i1329 < _size1324; ++_i1329)
        {
          var elem1330 = null;
          elem1330 = new DocumentPatternStagesLink();
          elem1330.read(input);
          this.success.push(elem1330);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStagesLinks_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDocumentPatternStagesLinks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1331 in this.success)
    {
      if (this.success.hasOwnProperty(iter1331))
      {
        iter1331 = this.success[iter1331];
        iter1331.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStagesLinks_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.docPatternStageId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.docPatternStageId !== undefined && args.docPatternStageId !== null) {
      this.docPatternStageId = args.docPatternStageId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentPatternService_getAllDocumentPatternStagesLinks_args.prototype = {};
DocumentPatternService_getAllDocumentPatternStagesLinks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStagesLinks_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDocumentPatternStagesLinks_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.docPatternStageId !== null && this.docPatternStageId !== undefined) {
    output.writeFieldBegin('docPatternStageId', Thrift.Type.STRING, 3);
    output.writeString(this.docPatternStageId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStagesLinks_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStagesLink]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getAllDocumentPatternStagesLinks_result.prototype = {};
DocumentPatternService_getAllDocumentPatternStagesLinks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1332 = 0;
        var _rtmp31336;
        this.success = [];
        var _etype1335 = 0;
        _rtmp31336 = input.readListBegin();
        _etype1335 = _rtmp31336.etype;
        _size1332 = _rtmp31336.size;
        for (var _i1337 = 0; _i1337 < _size1332; ++_i1337)
        {
          var elem1338 = null;
          elem1338 = new DocumentPatternStagesLink();
          elem1338.read(input);
          this.success.push(elem1338);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStagesLinks_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDocumentPatternStagesLinks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1339 in this.success)
    {
      if (this.success.hasOwnProperty(iter1339))
      {
        iter1339 = this.success[iter1339];
        iter1339.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getDocumentPatternStageLink_args = function(args) {
  this.token = null;
  this.docPatternStageLinkId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternStageLinkId !== undefined && args.docPatternStageLinkId !== null) {
      this.docPatternStageLinkId = args.docPatternStageLinkId;
    }
  }
};
DocumentPatternService_getDocumentPatternStageLink_args.prototype = {};
DocumentPatternService_getDocumentPatternStageLink_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternStageLinkId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getDocumentPatternStageLink_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getDocumentPatternStageLink_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternStageLinkId !== null && this.docPatternStageLinkId !== undefined) {
    output.writeFieldBegin('docPatternStageLinkId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternStageLinkId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getDocumentPatternStageLink_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentPatternStagesLink(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getDocumentPatternStageLink_result.prototype = {};
DocumentPatternService_getDocumentPatternStageLink_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentPatternStagesLink();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getDocumentPatternStageLink_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getDocumentPatternStageLink_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStagesLink_args = function(args) {
  this.token = null;
  this.documentPatternStagesLink = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentPatternStagesLink !== undefined && args.documentPatternStagesLink !== null) {
      this.documentPatternStagesLink = new DocumentPatternStagesLink(args.documentPatternStagesLink);
    }
  }
};
DocumentPatternService_createOrUpdateDocumentPatternStagesLink_args.prototype = {};
DocumentPatternService_createOrUpdateDocumentPatternStagesLink_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.documentPatternStagesLink = new DocumentPatternStagesLink();
        this.documentPatternStagesLink.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStagesLink_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDocumentPatternStagesLink_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentPatternStagesLink !== null && this.documentPatternStagesLink !== undefined) {
    output.writeFieldBegin('documentPatternStagesLink', Thrift.Type.STRUCT, 2);
    this.documentPatternStagesLink.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStagesLink_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentPatternStagesLink(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_createOrUpdateDocumentPatternStagesLink_result.prototype = {};
DocumentPatternService_createOrUpdateDocumentPatternStagesLink_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentPatternStagesLink();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternStagesLink_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDocumentPatternStagesLink_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternStageLink_args = function(args) {
  this.token = null;
  this.docPatternStageLinkId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternStageLinkId !== undefined && args.docPatternStageLinkId !== null) {
      this.docPatternStageLinkId = args.docPatternStageLinkId;
    }
  }
};
DocumentPatternService_deleteDocumentPatternStageLink_args.prototype = {};
DocumentPatternService_deleteDocumentPatternStageLink_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternStageLinkId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternStageLink_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteDocumentPatternStageLink_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternStageLinkId !== null && this.docPatternStageLinkId !== undefined) {
    output.writeFieldBegin('docPatternStageLinkId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternStageLinkId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternStageLink_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_deleteDocumentPatternStageLink_result.prototype = {};
DocumentPatternService_deleteDocumentPatternStageLink_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternStageLink_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteDocumentPatternStageLink_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStageExecutors_args = function(args) {
  this.token = null;
  this.docPatternStageId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternStageId !== undefined && args.docPatternStageId !== null) {
      this.docPatternStageId = args.docPatternStageId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentPatternService_getAllDocumentPatternStageExecutors_args.prototype = {};
DocumentPatternService_getAllDocumentPatternStageExecutors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStageExecutors_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDocumentPatternStageExecutors_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternStageId !== null && this.docPatternStageId !== undefined) {
    output.writeFieldBegin('docPatternStageId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternStageId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStageExecutors_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStagesExecutor]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getAllDocumentPatternStageExecutors_result.prototype = {};
DocumentPatternService_getAllDocumentPatternStageExecutors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1340 = 0;
        var _rtmp31344;
        this.success = [];
        var _etype1343 = 0;
        _rtmp31344 = input.readListBegin();
        _etype1343 = _rtmp31344.etype;
        _size1340 = _rtmp31344.size;
        for (var _i1345 = 0; _i1345 < _size1340; ++_i1345)
        {
          var elem1346 = null;
          elem1346 = new DocumentPatternStagesExecutor();
          elem1346.read(input);
          this.success.push(elem1346);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternStageExecutors_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDocumentPatternStageExecutors_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1347 in this.success)
    {
      if (this.success.hasOwnProperty(iter1347))
      {
        iter1347 = this.success[iter1347];
        iter1347.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_addExecutorsToDocumentPatternStage_args = function(args) {
  this.token = null;
  this.docPatternStageId = null;
  this.userOrGroups = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternStageId !== undefined && args.docPatternStageId !== null) {
      this.docPatternStageId = args.docPatternStageId;
    }
    if (args.userOrGroups !== undefined && args.userOrGroups !== null) {
      this.userOrGroups = Thrift.copyList(args.userOrGroups, [UserOrGroup]);
    }
  }
};
DocumentPatternService_addExecutorsToDocumentPatternStage_args.prototype = {};
DocumentPatternService_addExecutorsToDocumentPatternStage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1348 = 0;
        var _rtmp31352;
        this.userOrGroups = [];
        var _etype1351 = 0;
        _rtmp31352 = input.readListBegin();
        _etype1351 = _rtmp31352.etype;
        _size1348 = _rtmp31352.size;
        for (var _i1353 = 0; _i1353 < _size1348; ++_i1353)
        {
          var elem1354 = null;
          elem1354 = new UserOrGroup();
          elem1354.read(input);
          this.userOrGroups.push(elem1354);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_addExecutorsToDocumentPatternStage_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_addExecutorsToDocumentPatternStage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternStageId !== null && this.docPatternStageId !== undefined) {
    output.writeFieldBegin('docPatternStageId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternStageId);
    output.writeFieldEnd();
  }
  if (this.userOrGroups !== null && this.userOrGroups !== undefined) {
    output.writeFieldBegin('userOrGroups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroups.length);
    for (var iter1355 in this.userOrGroups)
    {
      if (this.userOrGroups.hasOwnProperty(iter1355))
      {
        iter1355 = this.userOrGroups[iter1355];
        iter1355.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_addExecutorsToDocumentPatternStage_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_addExecutorsToDocumentPatternStage_result.prototype = {};
DocumentPatternService_addExecutorsToDocumentPatternStage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_addExecutorsToDocumentPatternStage_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_addExecutorsToDocumentPatternStage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteExecutorsFromDocumentPatternStage_args = function(args) {
  this.token = null;
  this.docPatternStageId = null;
  this.userOrGroups = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternStageId !== undefined && args.docPatternStageId !== null) {
      this.docPatternStageId = args.docPatternStageId;
    }
    if (args.userOrGroups !== undefined && args.userOrGroups !== null) {
      this.userOrGroups = Thrift.copyList(args.userOrGroups, [UserOrGroup]);
    }
  }
};
DocumentPatternService_deleteExecutorsFromDocumentPatternStage_args.prototype = {};
DocumentPatternService_deleteExecutorsFromDocumentPatternStage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1356 = 0;
        var _rtmp31360;
        this.userOrGroups = [];
        var _etype1359 = 0;
        _rtmp31360 = input.readListBegin();
        _etype1359 = _rtmp31360.etype;
        _size1356 = _rtmp31360.size;
        for (var _i1361 = 0; _i1361 < _size1356; ++_i1361)
        {
          var elem1362 = null;
          elem1362 = new UserOrGroup();
          elem1362.read(input);
          this.userOrGroups.push(elem1362);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteExecutorsFromDocumentPatternStage_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteExecutorsFromDocumentPatternStage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternStageId !== null && this.docPatternStageId !== undefined) {
    output.writeFieldBegin('docPatternStageId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternStageId);
    output.writeFieldEnd();
  }
  if (this.userOrGroups !== null && this.userOrGroups !== undefined) {
    output.writeFieldBegin('userOrGroups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroups.length);
    for (var iter1363 in this.userOrGroups)
    {
      if (this.userOrGroups.hasOwnProperty(iter1363))
      {
        iter1363 = this.userOrGroups[iter1363];
        iter1363.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteExecutorsFromDocumentPatternStage_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_deleteExecutorsFromDocumentPatternStage_result.prototype = {};
DocumentPatternService_deleteExecutorsFromDocumentPatternStage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteExecutorsFromDocumentPatternStage_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteExecutorsFromDocumentPatternStage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_checkDocumentPattern_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentPatternService_checkDocumentPattern_args.prototype = {};
DocumentPatternService_checkDocumentPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_checkDocumentPattern_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_checkDocumentPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_checkDocumentPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_checkDocumentPattern_result.prototype = {};
DocumentPatternService_checkDocumentPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1364 = 0;
        var _rtmp31368;
        this.success = [];
        var _etype1367 = 0;
        _rtmp31368 = input.readListBegin();
        _etype1367 = _rtmp31368.etype;
        _size1364 = _rtmp31368.size;
        for (var _i1369 = 0; _i1369 < _size1364; ++_i1369)
        {
          var elem1370 = null;
          elem1370 = new PreconditionException();
          elem1370.read(input);
          this.success.push(elem1370);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_checkDocumentPattern_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_checkDocumentPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1371 in this.success)
    {
      if (this.success.hasOwnProperty(iter1371))
      {
        iter1371 = this.success[iter1371];
        iter1371.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternContentItems_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.contentItems = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.contentItems !== undefined && args.contentItems !== null) {
      this.contentItems = Thrift.copyList(args.contentItems, [ContentItem]);
    }
  }
};
DocumentPatternService_createOrUpdatePatternContentItems_args.prototype = {};
DocumentPatternService_createOrUpdatePatternContentItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1372 = 0;
        var _rtmp31376;
        this.contentItems = [];
        var _etype1375 = 0;
        _rtmp31376 = input.readListBegin();
        _etype1375 = _rtmp31376.etype;
        _size1372 = _rtmp31376.size;
        for (var _i1377 = 0; _i1377 < _size1372; ++_i1377)
        {
          var elem1378 = null;
          elem1378 = new ContentItem();
          elem1378.read(input);
          this.contentItems.push(elem1378);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternContentItems_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdatePatternContentItems_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.contentItems !== null && this.contentItems !== undefined) {
    output.writeFieldBegin('contentItems', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.contentItems.length);
    for (var iter1379 in this.contentItems)
    {
      if (this.contentItems.hasOwnProperty(iter1379))
      {
        iter1379 = this.contentItems[iter1379];
        iter1379.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternContentItems_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ContentItem]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_createOrUpdatePatternContentItems_result.prototype = {};
DocumentPatternService_createOrUpdatePatternContentItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1380 = 0;
        var _rtmp31384;
        this.success = [];
        var _etype1383 = 0;
        _rtmp31384 = input.readListBegin();
        _etype1383 = _rtmp31384.etype;
        _size1380 = _rtmp31384.size;
        for (var _i1385 = 0; _i1385 < _size1380; ++_i1385)
        {
          var elem1386 = null;
          elem1386 = new ContentItem();
          elem1386.read(input);
          this.success.push(elem1386);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternContentItems_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdatePatternContentItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1387 in this.success)
    {
      if (this.success.hasOwnProperty(iter1387))
      {
        iter1387 = this.success[iter1387];
        iter1387.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deletePatternContentItem_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.contentItemKey = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.contentItemKey !== undefined && args.contentItemKey !== null) {
      this.contentItemKey = args.contentItemKey;
    }
  }
};
DocumentPatternService_deletePatternContentItem_args.prototype = {};
DocumentPatternService_deletePatternContentItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contentItemKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deletePatternContentItem_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deletePatternContentItem_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.contentItemKey !== null && this.contentItemKey !== undefined) {
    output.writeFieldBegin('contentItemKey', Thrift.Type.STRING, 3);
    output.writeString(this.contentItemKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deletePatternContentItem_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_deletePatternContentItem_result.prototype = {};
DocumentPatternService_deletePatternContentItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deletePatternContentItem_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deletePatternContentItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternContentTab_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.patternContentTab = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.patternContentTab !== undefined && args.patternContentTab !== null) {
      this.patternContentTab = new ContentTab(args.patternContentTab);
    }
  }
};
DocumentPatternService_createOrUpdatePatternContentTab_args.prototype = {};
DocumentPatternService_createOrUpdatePatternContentTab_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.patternContentTab = new ContentTab();
        this.patternContentTab.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternContentTab_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdatePatternContentTab_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.patternContentTab !== null && this.patternContentTab !== undefined) {
    output.writeFieldBegin('patternContentTab', Thrift.Type.STRUCT, 3);
    this.patternContentTab.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternContentTab_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ContentTab(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_createOrUpdatePatternContentTab_result.prototype = {};
DocumentPatternService_createOrUpdatePatternContentTab_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ContentTab();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternContentTab_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdatePatternContentTab_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getPatternContentTabsByFilter_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentPatternService_getPatternContentTabsByFilter_args.prototype = {};
DocumentPatternService_getPatternContentTabsByFilter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getPatternContentTabsByFilter_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getPatternContentTabsByFilter_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getPatternContentTabsByFilter_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ContentTab]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getPatternContentTabsByFilter_result.prototype = {};
DocumentPatternService_getPatternContentTabsByFilter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1388 = 0;
        var _rtmp31392;
        this.success = [];
        var _etype1391 = 0;
        _rtmp31392 = input.readListBegin();
        _etype1391 = _rtmp31392.etype;
        _size1388 = _rtmp31392.size;
        for (var _i1393 = 0; _i1393 < _size1388; ++_i1393)
        {
          var elem1394 = null;
          elem1394 = new ContentTab();
          elem1394.read(input);
          this.success.push(elem1394);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getPatternContentTabsByFilter_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getPatternContentTabsByFilter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1395 in this.success)
    {
      if (this.success.hasOwnProperty(iter1395))
      {
        iter1395 = this.success[iter1395];
        iter1395.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deletePatternContentTab_args = function(args) {
  this.token = null;
  this.patternContentTabId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.patternContentTabId !== undefined && args.patternContentTabId !== null) {
      this.patternContentTabId = args.patternContentTabId;
    }
  }
};
DocumentPatternService_deletePatternContentTab_args.prototype = {};
DocumentPatternService_deletePatternContentTab_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.patternContentTabId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deletePatternContentTab_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deletePatternContentTab_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.patternContentTabId !== null && this.patternContentTabId !== undefined) {
    output.writeFieldBegin('patternContentTabId', Thrift.Type.STRING, 2);
    output.writeString(this.patternContentTabId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deletePatternContentTab_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_deletePatternContentTab_result.prototype = {};
DocumentPatternService_deletePatternContentTab_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deletePatternContentTab_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deletePatternContentTab_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternGroups_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentPatternService_getAllDocumentPatternGroups_args.prototype = {};
DocumentPatternService_getAllDocumentPatternGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternGroups_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDocumentPatternGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getAllDocumentPatternGroups_result.prototype = {};
DocumentPatternService_getAllDocumentPatternGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1396 = 0;
        var _rtmp31400;
        this.success = [];
        var _etype1399 = 0;
        _rtmp31400 = input.readListBegin();
        _etype1399 = _rtmp31400.etype;
        _size1396 = _rtmp31400.size;
        for (var _i1401 = 0; _i1401 < _size1396; ++_i1401)
        {
          var elem1402 = null;
          elem1402 = new DocumentPatternGroup();
          elem1402.read(input);
          this.success.push(elem1402);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDocumentPatternGroups_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDocumentPatternGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1403 in this.success)
    {
      if (this.success.hasOwnProperty(iter1403))
      {
        iter1403 = this.success[iter1403];
        iter1403.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternGroup_args = function(args) {
  this.token = null;
  this.documentPatternGroup = null;
  this.accountId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentPatternGroup !== undefined && args.documentPatternGroup !== null) {
      this.documentPatternGroup = new DocumentPatternGroup(args.documentPatternGroup);
    }
    if (args.accountId !== undefined && args.accountId !== null) {
      this.accountId = args.accountId;
    }
  }
};
DocumentPatternService_createOrUpdateDocumentPatternGroup_args.prototype = {};
DocumentPatternService_createOrUpdateDocumentPatternGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.documentPatternGroup = new DocumentPatternGroup();
        this.documentPatternGroup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternGroup_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDocumentPatternGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentPatternGroup !== null && this.documentPatternGroup !== undefined) {
    output.writeFieldBegin('documentPatternGroup', Thrift.Type.STRUCT, 2);
    this.documentPatternGroup.write(output);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 3);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentPatternGroup(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_createOrUpdateDocumentPatternGroup_result.prototype = {};
DocumentPatternService_createOrUpdateDocumentPatternGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentPatternGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDocumentPatternGroup_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDocumentPatternGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternGroup_args = function(args) {
  this.token = null;
  this.documentPatternGroupId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentPatternGroupId !== undefined && args.documentPatternGroupId !== null) {
      this.documentPatternGroupId = args.documentPatternGroupId;
    }
  }
};
DocumentPatternService_deleteDocumentPatternGroup_args.prototype = {};
DocumentPatternService_deleteDocumentPatternGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentPatternGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternGroup_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteDocumentPatternGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentPatternGroupId !== null && this.documentPatternGroupId !== undefined) {
    output.writeFieldBegin('documentPatternGroupId', Thrift.Type.STRING, 2);
    output.writeString(this.documentPatternGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_deleteDocumentPatternGroup_result.prototype = {};
DocumentPatternService_deleteDocumentPatternGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteDocumentPatternGroup_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteDocumentPatternGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllAvailableStages_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentPatternService_getAllAvailableStages_args.prototype = {};
DocumentPatternService_getAllAvailableStages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllAvailableStages_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllAvailableStages_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllAvailableStages_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [AvailablePatternStage]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getAllAvailableStages_result.prototype = {};
DocumentPatternService_getAllAvailableStages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1404 = 0;
        var _rtmp31408;
        this.success = [];
        var _etype1407 = 0;
        _rtmp31408 = input.readListBegin();
        _etype1407 = _rtmp31408.etype;
        _size1404 = _rtmp31408.size;
        for (var _i1409 = 0; _i1409 < _size1404; ++_i1409)
        {
          var elem1410 = null;
          elem1410 = new AvailablePatternStage();
          elem1410.read(input);
          this.success.push(elem1410);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllAvailableStages_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllAvailableStages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1411 in this.success)
    {
      if (this.success.hasOwnProperty(iter1411))
      {
        iter1411 = this.success[iter1411];
        iter1411.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAvailableLinkAnswersByPattern_args = function(args) {
  this.token = null;
  this.patternId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.patternId !== undefined && args.patternId !== null) {
      this.patternId = args.patternId;
    }
  }
};
DocumentPatternService_getAvailableLinkAnswersByPattern_args.prototype = {};
DocumentPatternService_getAvailableLinkAnswersByPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.patternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAvailableLinkAnswersByPattern_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAvailableLinkAnswersByPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.patternId !== null && this.patternId !== undefined) {
    output.writeFieldBegin('patternId', Thrift.Type.STRING, 2);
    output.writeString(this.patternId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAvailableLinkAnswersByPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getAvailableLinkAnswersByPattern_result.prototype = {};
DocumentPatternService_getAvailableLinkAnswersByPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size1412 = 0;
        var _rtmp31416;
        this.success = [];
        var _etype1415 = 0;
        _rtmp31416 = input.readSetBegin();
        _etype1415 = _rtmp31416.etype;
        _size1412 = _rtmp31416.size;
        for (var _i1417 = 0; _i1417 < _size1412; ++_i1417)
        {
          var elem1418 = null;
          elem1418 = input.readString().value;
          this.success.push(elem1418);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAvailableLinkAnswersByPattern_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAvailableLinkAnswersByPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRING, this.success.length);
    for (var iter1419 in this.success)
    {
      if (this.success.hasOwnProperty(iter1419))
      {
        iter1419 = this.success[iter1419];
        output.writeString(iter1419);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_removeAvailableStage_args = function(args) {
  this.token = null;
  this.availStageId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.availStageId !== undefined && args.availStageId !== null) {
      this.availStageId = args.availStageId;
    }
  }
};
DocumentPatternService_removeAvailableStage_args.prototype = {};
DocumentPatternService_removeAvailableStage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.availStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_removeAvailableStage_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_removeAvailableStage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.availStageId !== null && this.availStageId !== undefined) {
    output.writeFieldBegin('availStageId', Thrift.Type.STRING, 2);
    output.writeString(this.availStageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_removeAvailableStage_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_removeAvailableStage_result.prototype = {};
DocumentPatternService_removeAvailableStage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_removeAvailableStage_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_removeAvailableStage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllDigitalViews_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentPatternService_getAllDigitalViews_args.prototype = {};
DocumentPatternService_getAllDigitalViews_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDigitalViews_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDigitalViews_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllDigitalViews_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DigitalView]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getAllDigitalViews_result.prototype = {};
DocumentPatternService_getAllDigitalViews_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1420 = 0;
        var _rtmp31424;
        this.success = [];
        var _etype1423 = 0;
        _rtmp31424 = input.readListBegin();
        _etype1423 = _rtmp31424.etype;
        _size1420 = _rtmp31424.size;
        for (var _i1425 = 0; _i1425 < _size1420; ++_i1425)
        {
          var elem1426 = null;
          elem1426 = new DigitalView();
          elem1426.read(input);
          this.success.push(elem1426);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllDigitalViews_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllDigitalViews_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1427 in this.success)
    {
      if (this.success.hasOwnProperty(iter1427))
      {
        iter1427 = this.success[iter1427];
        iter1427.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDigitalView_args = function(args) {
  this.token = null;
  this.digitalView = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.digitalView !== undefined && args.digitalView !== null) {
      this.digitalView = new DigitalView(args.digitalView);
    }
  }
};
DocumentPatternService_createOrUpdateDigitalView_args.prototype = {};
DocumentPatternService_createOrUpdateDigitalView_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.digitalView = new DigitalView();
        this.digitalView.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDigitalView_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDigitalView_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.digitalView !== null && this.digitalView !== undefined) {
    output.writeFieldBegin('digitalView', Thrift.Type.STRUCT, 2);
    this.digitalView.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDigitalView_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DigitalView(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_createOrUpdateDigitalView_result.prototype = {};
DocumentPatternService_createOrUpdateDigitalView_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DigitalView();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdateDigitalView_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdateDigitalView_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteDigitalView_args = function(args) {
  this.token = null;
  this.digitalViewId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.digitalViewId !== undefined && args.digitalViewId !== null) {
      this.digitalViewId = args.digitalViewId;
    }
  }
};
DocumentPatternService_deleteDigitalView_args.prototype = {};
DocumentPatternService_deleteDigitalView_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.digitalViewId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteDigitalView_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteDigitalView_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.digitalViewId !== null && this.digitalViewId !== undefined) {
    output.writeFieldBegin('digitalViewId', Thrift.Type.STRING, 2);
    output.writeString(this.digitalViewId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_deleteDigitalView_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_deleteDigitalView_result.prototype = {};
DocumentPatternService_deleteDigitalView_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_deleteDigitalView_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_deleteDigitalView_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_exportDocumentPattern_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
  }
};
DocumentPatternService_exportDocumentPattern_args.prototype = {};
DocumentPatternService_exportDocumentPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_exportDocumentPattern_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_exportDocumentPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_exportDocumentPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_exportDocumentPattern_result.prototype = {};
DocumentPatternService_exportDocumentPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_exportDocumentPattern_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_exportDocumentPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_importDocumentPattern_args = function(args) {
  this.token = null;
  this.json = null;
  this.docPatternName = null;
  this.pDescription = null;
  this.docPatternGroupId = null;
  this.accountId = null;
  this.ignoreError = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.json !== undefined && args.json !== null) {
      this.json = args.json;
    }
    if (args.docPatternName !== undefined && args.docPatternName !== null) {
      this.docPatternName = args.docPatternName;
    }
    if (args.pDescription !== undefined && args.pDescription !== null) {
      this.pDescription = args.pDescription;
    }
    if (args.docPatternGroupId !== undefined && args.docPatternGroupId !== null) {
      this.docPatternGroupId = args.docPatternGroupId;
    }
    if (args.accountId !== undefined && args.accountId !== null) {
      this.accountId = args.accountId;
    }
    if (args.ignoreError !== undefined && args.ignoreError !== null) {
      this.ignoreError = args.ignoreError;
    }
  }
};
DocumentPatternService_importDocumentPattern_args.prototype = {};
DocumentPatternService_importDocumentPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.json = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.pDescription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreError = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_importDocumentPattern_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_importDocumentPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.json !== null && this.json !== undefined) {
    output.writeFieldBegin('json', Thrift.Type.STRING, 2);
    output.writeBinary(this.json);
    output.writeFieldEnd();
  }
  if (this.docPatternName !== null && this.docPatternName !== undefined) {
    output.writeFieldBegin('docPatternName', Thrift.Type.STRING, 3);
    output.writeString(this.docPatternName);
    output.writeFieldEnd();
  }
  if (this.pDescription !== null && this.pDescription !== undefined) {
    output.writeFieldBegin('pDescription', Thrift.Type.STRING, 4);
    output.writeString(this.pDescription);
    output.writeFieldEnd();
  }
  if (this.docPatternGroupId !== null && this.docPatternGroupId !== undefined) {
    output.writeFieldBegin('docPatternGroupId', Thrift.Type.STRING, 5);
    output.writeString(this.docPatternGroupId);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 6);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.ignoreError !== null && this.ignoreError !== undefined) {
    output.writeFieldBegin('ignoreError', Thrift.Type.BOOL, 7);
    output.writeBool(this.ignoreError);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_importDocumentPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentPattern(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_importDocumentPattern_result.prototype = {};
DocumentPatternService_importDocumentPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentPattern();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_importDocumentPattern_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_importDocumentPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getPatternUserGroup_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
  }
};
DocumentPatternService_getPatternUserGroup_args.prototype = {};
DocumentPatternService_getPatternUserGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getPatternUserGroup_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getPatternUserGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getPatternUserGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PatternUserGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getPatternUserGroup_result.prototype = {};
DocumentPatternService_getPatternUserGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1428 = 0;
        var _rtmp31432;
        this.success = [];
        var _etype1431 = 0;
        _rtmp31432 = input.readListBegin();
        _etype1431 = _rtmp31432.etype;
        _size1428 = _rtmp31432.size;
        for (var _i1433 = 0; _i1433 < _size1428; ++_i1433)
        {
          var elem1434 = null;
          elem1434 = new PatternUserGroup();
          elem1434.read(input);
          this.success.push(elem1434);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getPatternUserGroup_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getPatternUserGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1435 in this.success)
    {
      if (this.success.hasOwnProperty(iter1435))
      {
        iter1435 = this.success[iter1435];
        iter1435.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternUserGroup_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.userOrGroups = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.userOrGroups !== undefined && args.userOrGroups !== null) {
      this.userOrGroups = Thrift.copyList(args.userOrGroups, [PatternUserGroup]);
    }
  }
};
DocumentPatternService_createOrUpdatePatternUserGroup_args.prototype = {};
DocumentPatternService_createOrUpdatePatternUserGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1436 = 0;
        var _rtmp31440;
        this.userOrGroups = [];
        var _etype1439 = 0;
        _rtmp31440 = input.readListBegin();
        _etype1439 = _rtmp31440.etype;
        _size1436 = _rtmp31440.size;
        for (var _i1441 = 0; _i1441 < _size1436; ++_i1441)
        {
          var elem1442 = null;
          elem1442 = new PatternUserGroup();
          elem1442.read(input);
          this.userOrGroups.push(elem1442);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternUserGroup_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdatePatternUserGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.userOrGroups !== null && this.userOrGroups !== undefined) {
    output.writeFieldBegin('userOrGroups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroups.length);
    for (var iter1443 in this.userOrGroups)
    {
      if (this.userOrGroups.hasOwnProperty(iter1443))
      {
        iter1443 = this.userOrGroups[iter1443];
        iter1443.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternUserGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_createOrUpdatePatternUserGroup_result.prototype = {};
DocumentPatternService_createOrUpdatePatternUserGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternUserGroup_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdatePatternUserGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getPatternProcessRoles_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentPatternService_getPatternProcessRoles_args.prototype = {};
DocumentPatternService_getPatternProcessRoles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getPatternProcessRoles_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getPatternProcessRoles_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getPatternProcessRoles_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PatternUserGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getPatternProcessRoles_result.prototype = {};
DocumentPatternService_getPatternProcessRoles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1444 = 0;
        var _rtmp31448;
        this.success = [];
        var _etype1447 = 0;
        _rtmp31448 = input.readListBegin();
        _etype1447 = _rtmp31448.etype;
        _size1444 = _rtmp31448.size;
        for (var _i1449 = 0; _i1449 < _size1444; ++_i1449)
        {
          var elem1450 = null;
          elem1450 = new PatternUserGroup();
          elem1450.read(input);
          this.success.push(elem1450);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getPatternProcessRoles_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getPatternProcessRoles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1451 in this.success)
    {
      if (this.success.hasOwnProperty(iter1451))
      {
        iter1451 = this.success[iter1451];
        iter1451.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_changePatternProcessRoles_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.userOrGroupsToAdd = null;
  this.keyIdToRemove = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.userOrGroupsToAdd !== undefined && args.userOrGroupsToAdd !== null) {
      this.userOrGroupsToAdd = Thrift.copyList(args.userOrGroupsToAdd, [PatternUserGroup]);
    }
    if (args.keyIdToRemove !== undefined && args.keyIdToRemove !== null) {
      this.keyIdToRemove = Thrift.copyList(args.keyIdToRemove, [null]);
    }
  }
};
DocumentPatternService_changePatternProcessRoles_args.prototype = {};
DocumentPatternService_changePatternProcessRoles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1452 = 0;
        var _rtmp31456;
        this.userOrGroupsToAdd = [];
        var _etype1455 = 0;
        _rtmp31456 = input.readListBegin();
        _etype1455 = _rtmp31456.etype;
        _size1452 = _rtmp31456.size;
        for (var _i1457 = 0; _i1457 < _size1452; ++_i1457)
        {
          var elem1458 = null;
          elem1458 = new PatternUserGroup();
          elem1458.read(input);
          this.userOrGroupsToAdd.push(elem1458);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size1459 = 0;
        var _rtmp31463;
        this.keyIdToRemove = [];
        var _etype1462 = 0;
        _rtmp31463 = input.readSetBegin();
        _etype1462 = _rtmp31463.etype;
        _size1459 = _rtmp31463.size;
        for (var _i1464 = 0; _i1464 < _size1459; ++_i1464)
        {
          var elem1465 = null;
          elem1465 = input.readString().value;
          this.keyIdToRemove.push(elem1465);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_changePatternProcessRoles_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_changePatternProcessRoles_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.userOrGroupsToAdd !== null && this.userOrGroupsToAdd !== undefined) {
    output.writeFieldBegin('userOrGroupsToAdd', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroupsToAdd.length);
    for (var iter1466 in this.userOrGroupsToAdd)
    {
      if (this.userOrGroupsToAdd.hasOwnProperty(iter1466))
      {
        iter1466 = this.userOrGroupsToAdd[iter1466];
        iter1466.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.keyIdToRemove !== null && this.keyIdToRemove !== undefined) {
    output.writeFieldBegin('keyIdToRemove', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.STRING, this.keyIdToRemove.length);
    for (var iter1467 in this.keyIdToRemove)
    {
      if (this.keyIdToRemove.hasOwnProperty(iter1467))
      {
        iter1467 = this.keyIdToRemove[iter1467];
        output.writeString(iter1467);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_changePatternProcessRoles_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PatternUserGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_changePatternProcessRoles_result.prototype = {};
DocumentPatternService_changePatternProcessRoles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1468 = 0;
        var _rtmp31472;
        this.success = [];
        var _etype1471 = 0;
        _rtmp31472 = input.readListBegin();
        _etype1471 = _rtmp31472.etype;
        _size1468 = _rtmp31472.size;
        for (var _i1473 = 0; _i1473 < _size1468; ++_i1473)
        {
          var elem1474 = null;
          elem1474 = new PatternUserGroup();
          elem1474.read(input);
          this.success.push(elem1474);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_changePatternProcessRoles_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_changePatternProcessRoles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1475 in this.success)
    {
      if (this.success.hasOwnProperty(iter1475))
      {
        iter1475 = this.success[iter1475];
        iter1475.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getPatternVariables_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentPatternService_getPatternVariables_args.prototype = {};
DocumentPatternService_getPatternVariables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getPatternVariables_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getPatternVariables_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getPatternVariables_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PatternVariable]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getPatternVariables_result.prototype = {};
DocumentPatternService_getPatternVariables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1476 = 0;
        var _rtmp31480;
        this.success = [];
        var _etype1479 = 0;
        _rtmp31480 = input.readListBegin();
        _etype1479 = _rtmp31480.etype;
        _size1476 = _rtmp31480.size;
        for (var _i1481 = 0; _i1481 < _size1476; ++_i1481)
        {
          var elem1482 = null;
          elem1482 = new PatternVariable();
          elem1482.read(input);
          this.success.push(elem1482);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getPatternVariables_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getPatternVariables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1483 in this.success)
    {
      if (this.success.hasOwnProperty(iter1483))
      {
        iter1483 = this.success[iter1483];
        iter1483.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_changePatternVariables_args = function(args) {
  this.token = null;
  this.docPatternId = null;
  this.patternVariablesToAdd = null;
  this.keyIdToRemove = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docPatternId !== undefined && args.docPatternId !== null) {
      this.docPatternId = args.docPatternId;
    }
    if (args.patternVariablesToAdd !== undefined && args.patternVariablesToAdd !== null) {
      this.patternVariablesToAdd = Thrift.copyList(args.patternVariablesToAdd, [PatternVariable]);
    }
    if (args.keyIdToRemove !== undefined && args.keyIdToRemove !== null) {
      this.keyIdToRemove = Thrift.copyList(args.keyIdToRemove, [null]);
    }
  }
};
DocumentPatternService_changePatternVariables_args.prototype = {};
DocumentPatternService_changePatternVariables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1484 = 0;
        var _rtmp31488;
        this.patternVariablesToAdd = [];
        var _etype1487 = 0;
        _rtmp31488 = input.readListBegin();
        _etype1487 = _rtmp31488.etype;
        _size1484 = _rtmp31488.size;
        for (var _i1489 = 0; _i1489 < _size1484; ++_i1489)
        {
          var elem1490 = null;
          elem1490 = new PatternVariable();
          elem1490.read(input);
          this.patternVariablesToAdd.push(elem1490);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size1491 = 0;
        var _rtmp31495;
        this.keyIdToRemove = [];
        var _etype1494 = 0;
        _rtmp31495 = input.readSetBegin();
        _etype1494 = _rtmp31495.etype;
        _size1491 = _rtmp31495.size;
        for (var _i1496 = 0; _i1496 < _size1491; ++_i1496)
        {
          var elem1497 = null;
          elem1497 = input.readString().value;
          this.keyIdToRemove.push(elem1497);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_changePatternVariables_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_changePatternVariables_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docPatternId !== null && this.docPatternId !== undefined) {
    output.writeFieldBegin('docPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.docPatternId);
    output.writeFieldEnd();
  }
  if (this.patternVariablesToAdd !== null && this.patternVariablesToAdd !== undefined) {
    output.writeFieldBegin('patternVariablesToAdd', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.patternVariablesToAdd.length);
    for (var iter1498 in this.patternVariablesToAdd)
    {
      if (this.patternVariablesToAdd.hasOwnProperty(iter1498))
      {
        iter1498 = this.patternVariablesToAdd[iter1498];
        iter1498.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.keyIdToRemove !== null && this.keyIdToRemove !== undefined) {
    output.writeFieldBegin('keyIdToRemove', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.STRING, this.keyIdToRemove.length);
    for (var iter1499 in this.keyIdToRemove)
    {
      if (this.keyIdToRemove.hasOwnProperty(iter1499))
      {
        iter1499 = this.keyIdToRemove[iter1499];
        output.writeString(iter1499);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_changePatternVariables_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PatternVariable]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_changePatternVariables_result.prototype = {};
DocumentPatternService_changePatternVariables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1500 = 0;
        var _rtmp31504;
        this.success = [];
        var _etype1503 = 0;
        _rtmp31504 = input.readListBegin();
        _etype1503 = _rtmp31504.etype;
        _size1500 = _rtmp31504.size;
        for (var _i1505 = 0; _i1505 < _size1500; ++_i1505)
        {
          var elem1506 = null;
          elem1506 = new PatternVariable();
          elem1506.read(input);
          this.success.push(elem1506);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_changePatternVariables_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_changePatternVariables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1507 in this.success)
    {
      if (this.success.hasOwnProperty(iter1507))
      {
        iter1507 = this.success[iter1507];
        iter1507.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_addAvailablePatternStageToAccounts_args = function(args) {
  this.token = null;
  this.availablePatternStageId = null;
  this.accountIds = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.availablePatternStageId !== undefined && args.availablePatternStageId !== null) {
      this.availablePatternStageId = args.availablePatternStageId;
    }
    if (args.accountIds !== undefined && args.accountIds !== null) {
      this.accountIds = Thrift.copyList(args.accountIds, [null]);
    }
  }
};
DocumentPatternService_addAvailablePatternStageToAccounts_args.prototype = {};
DocumentPatternService_addAvailablePatternStageToAccounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.availablePatternStageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1508 = 0;
        var _rtmp31512;
        this.accountIds = [];
        var _etype1511 = 0;
        _rtmp31512 = input.readListBegin();
        _etype1511 = _rtmp31512.etype;
        _size1508 = _rtmp31512.size;
        for (var _i1513 = 0; _i1513 < _size1508; ++_i1513)
        {
          var elem1514 = null;
          elem1514 = input.readString().value;
          this.accountIds.push(elem1514);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_addAvailablePatternStageToAccounts_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_addAvailablePatternStageToAccounts_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.availablePatternStageId !== null && this.availablePatternStageId !== undefined) {
    output.writeFieldBegin('availablePatternStageId', Thrift.Type.STRING, 2);
    output.writeString(this.availablePatternStageId);
    output.writeFieldEnd();
  }
  if (this.accountIds !== null && this.accountIds !== undefined) {
    output.writeFieldBegin('accountIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.accountIds.length);
    for (var iter1515 in this.accountIds)
    {
      if (this.accountIds.hasOwnProperty(iter1515))
      {
        iter1515 = this.accountIds[iter1515];
        output.writeString(iter1515);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_addAvailablePatternStageToAccounts_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_addAvailablePatternStageToAccounts_result.prototype = {};
DocumentPatternService_addAvailablePatternStageToAccounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_addAvailablePatternStageToAccounts_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_addAvailablePatternStageToAccounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllPatternAttachmentTemplates_args = function(args) {
  this.token = null;
  this.patternId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.patternId !== undefined && args.patternId !== null) {
      this.patternId = args.patternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentPatternService_getAllPatternAttachmentTemplates_args.prototype = {};
DocumentPatternService_getAllPatternAttachmentTemplates_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.patternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllPatternAttachmentTemplates_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllPatternAttachmentTemplates_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.patternId !== null && this.patternId !== undefined) {
    output.writeFieldBegin('patternId', Thrift.Type.STRING, 2);
    output.writeString(this.patternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_getAllPatternAttachmentTemplates_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PatternAttachmentTemplate]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_getAllPatternAttachmentTemplates_result.prototype = {};
DocumentPatternService_getAllPatternAttachmentTemplates_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1516 = 0;
        var _rtmp31520;
        this.success = [];
        var _etype1519 = 0;
        _rtmp31520 = input.readListBegin();
        _etype1519 = _rtmp31520.etype;
        _size1516 = _rtmp31520.size;
        for (var _i1521 = 0; _i1521 < _size1516; ++_i1521)
        {
          var elem1522 = null;
          elem1522 = new PatternAttachmentTemplate();
          elem1522.read(input);
          this.success.push(elem1522);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_getAllPatternAttachmentTemplates_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_getAllPatternAttachmentTemplates_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1523 in this.success)
    {
      if (this.success.hasOwnProperty(iter1523))
      {
        iter1523 = this.success[iter1523];
        iter1523.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternAttachmentTemplate_args = function(args) {
  this.token = null;
  this.patternAttachmentTemplate = null;
  this.xmlFile = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.patternAttachmentTemplate !== undefined && args.patternAttachmentTemplate !== null) {
      this.patternAttachmentTemplate = new PatternAttachmentTemplate(args.patternAttachmentTemplate);
    }
    if (args.xmlFile !== undefined && args.xmlFile !== null) {
      this.xmlFile = args.xmlFile;
    }
  }
};
DocumentPatternService_createOrUpdatePatternAttachmentTemplate_args.prototype = {};
DocumentPatternService_createOrUpdatePatternAttachmentTemplate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.patternAttachmentTemplate = new PatternAttachmentTemplate();
        this.patternAttachmentTemplate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.xmlFile = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternAttachmentTemplate_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdatePatternAttachmentTemplate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.patternAttachmentTemplate !== null && this.patternAttachmentTemplate !== undefined) {
    output.writeFieldBegin('patternAttachmentTemplate', Thrift.Type.STRUCT, 2);
    this.patternAttachmentTemplate.write(output);
    output.writeFieldEnd();
  }
  if (this.xmlFile !== null && this.xmlFile !== undefined) {
    output.writeFieldBegin('xmlFile', Thrift.Type.STRING, 3);
    output.writeBinary(this.xmlFile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternAttachmentTemplate_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new PatternAttachmentTemplate(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_createOrUpdatePatternAttachmentTemplate_result.prototype = {};
DocumentPatternService_createOrUpdatePatternAttachmentTemplate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new PatternAttachmentTemplate();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_createOrUpdatePatternAttachmentTemplate_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_createOrUpdatePatternAttachmentTemplate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_downloadPatternAttachmentTemplate_args = function(args) {
  this.token = null;
  this.patternAttachmentTemplateId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.patternAttachmentTemplateId !== undefined && args.patternAttachmentTemplateId !== null) {
      this.patternAttachmentTemplateId = args.patternAttachmentTemplateId;
    }
  }
};
DocumentPatternService_downloadPatternAttachmentTemplate_args.prototype = {};
DocumentPatternService_downloadPatternAttachmentTemplate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.patternAttachmentTemplateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_downloadPatternAttachmentTemplate_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_downloadPatternAttachmentTemplate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.patternAttachmentTemplateId !== null && this.patternAttachmentTemplateId !== undefined) {
    output.writeFieldBegin('patternAttachmentTemplateId', Thrift.Type.STRING, 2);
    output.writeString(this.patternAttachmentTemplateId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_downloadPatternAttachmentTemplate_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_downloadPatternAttachmentTemplate_result.prototype = {};
DocumentPatternService_downloadPatternAttachmentTemplate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_downloadPatternAttachmentTemplate_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_downloadPatternAttachmentTemplate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_removePatternAttachmentTemplate_args = function(args) {
  this.token = null;
  this.patternAttachmentTemplateId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.patternAttachmentTemplateId !== undefined && args.patternAttachmentTemplateId !== null) {
      this.patternAttachmentTemplateId = args.patternAttachmentTemplateId;
    }
  }
};
DocumentPatternService_removePatternAttachmentTemplate_args.prototype = {};
DocumentPatternService_removePatternAttachmentTemplate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.patternAttachmentTemplateId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_removePatternAttachmentTemplate_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_removePatternAttachmentTemplate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.patternAttachmentTemplateId !== null && this.patternAttachmentTemplateId !== undefined) {
    output.writeFieldBegin('patternAttachmentTemplateId', Thrift.Type.STRING, 2);
    output.writeString(this.patternAttachmentTemplateId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternService_removePatternAttachmentTemplate_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentPatternService_removePatternAttachmentTemplate_result.prototype = {};
DocumentPatternService_removePatternAttachmentTemplate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentPatternService_removePatternAttachmentTemplate_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentPatternService_removePatternAttachmentTemplate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentPatternServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
DocumentPatternServiceClient.prototype = {};
DocumentPatternServiceClient.prototype.getAllDocumentPatterns = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllDocumentPatterns(token, filter);
    return this.recv_getAllDocumentPatterns();
  } else {
    var postData = this.send_getAllDocumentPatterns(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocumentPatterns);
  }
};

DocumentPatternServiceClient.prototype.send_getAllDocumentPatterns = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllDocumentPatterns', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new DocumentPatternService_getAllDocumentPatterns_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getAllDocumentPatterns = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getAllDocumentPatterns_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocumentPatterns failed: unknown result';
};
DocumentPatternServiceClient.prototype.getDocumentPattern = function(token, docPatternId, callback) {
  if (callback === undefined) {
    this.send_getDocumentPattern(token, docPatternId);
    return this.recv_getDocumentPattern();
  } else {
    var postData = this.send_getDocumentPattern(token, docPatternId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDocumentPattern);
  }
};

DocumentPatternServiceClient.prototype.send_getDocumentPattern = function(token, docPatternId, callback) {
  this.output.writeMessageBegin('getDocumentPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId
  };
  var args = new DocumentPatternService_getDocumentPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getDocumentPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getDocumentPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDocumentPattern failed: unknown result';
};
DocumentPatternServiceClient.prototype.deleteDocumentPattern = function(token, docPatternId, callback) {
  if (callback === undefined) {
    this.send_deleteDocumentPattern(token, docPatternId);
    return this.recv_deleteDocumentPattern();
  } else {
    var postData = this.send_deleteDocumentPattern(token, docPatternId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteDocumentPattern);
  }
};

DocumentPatternServiceClient.prototype.send_deleteDocumentPattern = function(token, docPatternId, callback) {
  this.output.writeMessageBegin('deleteDocumentPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId
  };
  var args = new DocumentPatternService_deleteDocumentPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_deleteDocumentPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_deleteDocumentPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteDocumentPattern failed: unknown result';
};
DocumentPatternServiceClient.prototype.createOrUpdateDocumentPattern = function(token, documentPattern, accountId, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateDocumentPattern(token, documentPattern, accountId);
    return this.recv_createOrUpdateDocumentPattern();
  } else {
    var postData = this.send_createOrUpdateDocumentPattern(token, documentPattern, accountId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateDocumentPattern);
  }
};

DocumentPatternServiceClient.prototype.send_createOrUpdateDocumentPattern = function(token, documentPattern, accountId, callback) {
  this.output.writeMessageBegin('createOrUpdateDocumentPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentPattern: documentPattern,
    accountId: accountId
  };
  var args = new DocumentPatternService_createOrUpdateDocumentPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_createOrUpdateDocumentPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_createOrUpdateDocumentPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateDocumentPattern failed: unknown result';
};
DocumentPatternServiceClient.prototype.getAllDocumentPatternStages = function(token, docPatternId, filter, selector, callback) {
  if (callback === undefined) {
    this.send_getAllDocumentPatternStages(token, docPatternId, filter, selector);
    return this.recv_getAllDocumentPatternStages();
  } else {
    var postData = this.send_getAllDocumentPatternStages(token, docPatternId, filter, selector, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocumentPatternStages);
  }
};

DocumentPatternServiceClient.prototype.send_getAllDocumentPatternStages = function(token, docPatternId, filter, selector, callback) {
  this.output.writeMessageBegin('getAllDocumentPatternStages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    filter: filter,
    selector: selector
  };
  var args = new DocumentPatternService_getAllDocumentPatternStages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getAllDocumentPatternStages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getAllDocumentPatternStages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocumentPatternStages failed: unknown result';
};
DocumentPatternServiceClient.prototype.getAllDocumentPatternStagesForCreate = function(token, docPatternId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllDocumentPatternStagesForCreate(token, docPatternId, filter);
    return this.recv_getAllDocumentPatternStagesForCreate();
  } else {
    var postData = this.send_getAllDocumentPatternStagesForCreate(token, docPatternId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocumentPatternStagesForCreate);
  }
};

DocumentPatternServiceClient.prototype.send_getAllDocumentPatternStagesForCreate = function(token, docPatternId, filter, callback) {
  this.output.writeMessageBegin('getAllDocumentPatternStagesForCreate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    filter: filter
  };
  var args = new DocumentPatternService_getAllDocumentPatternStagesForCreate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getAllDocumentPatternStagesForCreate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getAllDocumentPatternStagesForCreate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocumentPatternStagesForCreate failed: unknown result';
};
DocumentPatternServiceClient.prototype.getDocumentPatternStage = function(token, docPatternStageId, callback) {
  if (callback === undefined) {
    this.send_getDocumentPatternStage(token, docPatternStageId);
    return this.recv_getDocumentPatternStage();
  } else {
    var postData = this.send_getDocumentPatternStage(token, docPatternStageId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDocumentPatternStage);
  }
};

DocumentPatternServiceClient.prototype.send_getDocumentPatternStage = function(token, docPatternStageId, callback) {
  this.output.writeMessageBegin('getDocumentPatternStage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternStageId: docPatternStageId
  };
  var args = new DocumentPatternService_getDocumentPatternStage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getDocumentPatternStage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getDocumentPatternStage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDocumentPatternStage failed: unknown result';
};
DocumentPatternServiceClient.prototype.deleteDocumentPatternStageAndMoveDocuments = function(token, docPatternStageId, newDocPatternStageId, fillDocPatternId, callback) {
  if (callback === undefined) {
    this.send_deleteDocumentPatternStageAndMoveDocuments(token, docPatternStageId, newDocPatternStageId, fillDocPatternId);
    return this.recv_deleteDocumentPatternStageAndMoveDocuments();
  } else {
    var postData = this.send_deleteDocumentPatternStageAndMoveDocuments(token, docPatternStageId, newDocPatternStageId, fillDocPatternId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteDocumentPatternStageAndMoveDocuments);
  }
};

DocumentPatternServiceClient.prototype.send_deleteDocumentPatternStageAndMoveDocuments = function(token, docPatternStageId, newDocPatternStageId, fillDocPatternId, callback) {
  this.output.writeMessageBegin('deleteDocumentPatternStageAndMoveDocuments', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternStageId: docPatternStageId,
    newDocPatternStageId: newDocPatternStageId,
    fillDocPatternId: fillDocPatternId
  };
  var args = new DocumentPatternService_deleteDocumentPatternStageAndMoveDocuments_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_deleteDocumentPatternStageAndMoveDocuments = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_deleteDocumentPatternStageAndMoveDocuments_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteDocumentPatternStageAndMoveDocuments failed: unknown result';
};
DocumentPatternServiceClient.prototype.deleteDocumentPatternStage = function(token, docPatternStageId, callback) {
  if (callback === undefined) {
    this.send_deleteDocumentPatternStage(token, docPatternStageId);
    return this.recv_deleteDocumentPatternStage();
  } else {
    var postData = this.send_deleteDocumentPatternStage(token, docPatternStageId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteDocumentPatternStage);
  }
};

DocumentPatternServiceClient.prototype.send_deleteDocumentPatternStage = function(token, docPatternStageId, callback) {
  this.output.writeMessageBegin('deleteDocumentPatternStage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternStageId: docPatternStageId
  };
  var args = new DocumentPatternService_deleteDocumentPatternStage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_deleteDocumentPatternStage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_deleteDocumentPatternStage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteDocumentPatternStage failed: unknown result';
};
DocumentPatternServiceClient.prototype.createOrUpdateDocumentPatternStage = function(token, documentPatternStage, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateDocumentPatternStage(token, documentPatternStage);
    return this.recv_createOrUpdateDocumentPatternStage();
  } else {
    var postData = this.send_createOrUpdateDocumentPatternStage(token, documentPatternStage, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateDocumentPatternStage);
  }
};

DocumentPatternServiceClient.prototype.send_createOrUpdateDocumentPatternStage = function(token, documentPatternStage, callback) {
  this.output.writeMessageBegin('createOrUpdateDocumentPatternStage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentPatternStage: documentPatternStage
  };
  var args = new DocumentPatternService_createOrUpdateDocumentPatternStage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_createOrUpdateDocumentPatternStage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_createOrUpdateDocumentPatternStage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateDocumentPatternStage failed: unknown result';
};
DocumentPatternServiceClient.prototype.createOrUpdateDocumentPatternStages = function(token, stages, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateDocumentPatternStages(token, stages);
    return this.recv_createOrUpdateDocumentPatternStages();
  } else {
    var postData = this.send_createOrUpdateDocumentPatternStages(token, stages, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateDocumentPatternStages);
  }
};

DocumentPatternServiceClient.prototype.send_createOrUpdateDocumentPatternStages = function(token, stages, callback) {
  this.output.writeMessageBegin('createOrUpdateDocumentPatternStages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    stages: stages
  };
  var args = new DocumentPatternService_createOrUpdateDocumentPatternStages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_createOrUpdateDocumentPatternStages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_createOrUpdateDocumentPatternStages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateDocumentPatternStages failed: unknown result';
};
DocumentPatternServiceClient.prototype.createOrUpdateDocumentPatternStagesLinks = function(token, links, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateDocumentPatternStagesLinks(token, links);
    return this.recv_createOrUpdateDocumentPatternStagesLinks();
  } else {
    var postData = this.send_createOrUpdateDocumentPatternStagesLinks(token, links, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateDocumentPatternStagesLinks);
  }
};

DocumentPatternServiceClient.prototype.send_createOrUpdateDocumentPatternStagesLinks = function(token, links, callback) {
  this.output.writeMessageBegin('createOrUpdateDocumentPatternStagesLinks', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    links: links
  };
  var args = new DocumentPatternService_createOrUpdateDocumentPatternStagesLinks_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_createOrUpdateDocumentPatternStagesLinks = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_createOrUpdateDocumentPatternStagesLinks_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateDocumentPatternStagesLinks failed: unknown result';
};
DocumentPatternServiceClient.prototype.getAllDocumentPatternStagesLinks = function(token, docPatternId, docPatternStageId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllDocumentPatternStagesLinks(token, docPatternId, docPatternStageId, filter);
    return this.recv_getAllDocumentPatternStagesLinks();
  } else {
    var postData = this.send_getAllDocumentPatternStagesLinks(token, docPatternId, docPatternStageId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocumentPatternStagesLinks);
  }
};

DocumentPatternServiceClient.prototype.send_getAllDocumentPatternStagesLinks = function(token, docPatternId, docPatternStageId, filter, callback) {
  this.output.writeMessageBegin('getAllDocumentPatternStagesLinks', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    docPatternStageId: docPatternStageId,
    filter: filter
  };
  var args = new DocumentPatternService_getAllDocumentPatternStagesLinks_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getAllDocumentPatternStagesLinks = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getAllDocumentPatternStagesLinks_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocumentPatternStagesLinks failed: unknown result';
};
DocumentPatternServiceClient.prototype.getDocumentPatternStageLink = function(token, docPatternStageLinkId, callback) {
  if (callback === undefined) {
    this.send_getDocumentPatternStageLink(token, docPatternStageLinkId);
    return this.recv_getDocumentPatternStageLink();
  } else {
    var postData = this.send_getDocumentPatternStageLink(token, docPatternStageLinkId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDocumentPatternStageLink);
  }
};

DocumentPatternServiceClient.prototype.send_getDocumentPatternStageLink = function(token, docPatternStageLinkId, callback) {
  this.output.writeMessageBegin('getDocumentPatternStageLink', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternStageLinkId: docPatternStageLinkId
  };
  var args = new DocumentPatternService_getDocumentPatternStageLink_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getDocumentPatternStageLink = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getDocumentPatternStageLink_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDocumentPatternStageLink failed: unknown result';
};
DocumentPatternServiceClient.prototype.createOrUpdateDocumentPatternStagesLink = function(token, documentPatternStagesLink, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateDocumentPatternStagesLink(token, documentPatternStagesLink);
    return this.recv_createOrUpdateDocumentPatternStagesLink();
  } else {
    var postData = this.send_createOrUpdateDocumentPatternStagesLink(token, documentPatternStagesLink, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateDocumentPatternStagesLink);
  }
};

DocumentPatternServiceClient.prototype.send_createOrUpdateDocumentPatternStagesLink = function(token, documentPatternStagesLink, callback) {
  this.output.writeMessageBegin('createOrUpdateDocumentPatternStagesLink', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentPatternStagesLink: documentPatternStagesLink
  };
  var args = new DocumentPatternService_createOrUpdateDocumentPatternStagesLink_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_createOrUpdateDocumentPatternStagesLink = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_createOrUpdateDocumentPatternStagesLink_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateDocumentPatternStagesLink failed: unknown result';
};
DocumentPatternServiceClient.prototype.deleteDocumentPatternStageLink = function(token, docPatternStageLinkId, callback) {
  if (callback === undefined) {
    this.send_deleteDocumentPatternStageLink(token, docPatternStageLinkId);
    return this.recv_deleteDocumentPatternStageLink();
  } else {
    var postData = this.send_deleteDocumentPatternStageLink(token, docPatternStageLinkId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteDocumentPatternStageLink);
  }
};

DocumentPatternServiceClient.prototype.send_deleteDocumentPatternStageLink = function(token, docPatternStageLinkId, callback) {
  this.output.writeMessageBegin('deleteDocumentPatternStageLink', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternStageLinkId: docPatternStageLinkId
  };
  var args = new DocumentPatternService_deleteDocumentPatternStageLink_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_deleteDocumentPatternStageLink = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_deleteDocumentPatternStageLink_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteDocumentPatternStageLink failed: unknown result';
};
DocumentPatternServiceClient.prototype.getAllDocumentPatternStageExecutors = function(token, docPatternStageId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllDocumentPatternStageExecutors(token, docPatternStageId, filter);
    return this.recv_getAllDocumentPatternStageExecutors();
  } else {
    var postData = this.send_getAllDocumentPatternStageExecutors(token, docPatternStageId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocumentPatternStageExecutors);
  }
};

DocumentPatternServiceClient.prototype.send_getAllDocumentPatternStageExecutors = function(token, docPatternStageId, filter, callback) {
  this.output.writeMessageBegin('getAllDocumentPatternStageExecutors', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternStageId: docPatternStageId,
    filter: filter
  };
  var args = new DocumentPatternService_getAllDocumentPatternStageExecutors_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getAllDocumentPatternStageExecutors = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getAllDocumentPatternStageExecutors_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocumentPatternStageExecutors failed: unknown result';
};
DocumentPatternServiceClient.prototype.addExecutorsToDocumentPatternStage = function(token, docPatternStageId, userOrGroups, callback) {
  if (callback === undefined) {
    this.send_addExecutorsToDocumentPatternStage(token, docPatternStageId, userOrGroups);
    return this.recv_addExecutorsToDocumentPatternStage();
  } else {
    var postData = this.send_addExecutorsToDocumentPatternStage(token, docPatternStageId, userOrGroups, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addExecutorsToDocumentPatternStage);
  }
};

DocumentPatternServiceClient.prototype.send_addExecutorsToDocumentPatternStage = function(token, docPatternStageId, userOrGroups, callback) {
  this.output.writeMessageBegin('addExecutorsToDocumentPatternStage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternStageId: docPatternStageId,
    userOrGroups: userOrGroups
  };
  var args = new DocumentPatternService_addExecutorsToDocumentPatternStage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_addExecutorsToDocumentPatternStage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_addExecutorsToDocumentPatternStage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addExecutorsToDocumentPatternStage failed: unknown result';
};
DocumentPatternServiceClient.prototype.deleteExecutorsFromDocumentPatternStage = function(token, docPatternStageId, userOrGroups, callback) {
  if (callback === undefined) {
    this.send_deleteExecutorsFromDocumentPatternStage(token, docPatternStageId, userOrGroups);
    return this.recv_deleteExecutorsFromDocumentPatternStage();
  } else {
    var postData = this.send_deleteExecutorsFromDocumentPatternStage(token, docPatternStageId, userOrGroups, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteExecutorsFromDocumentPatternStage);
  }
};

DocumentPatternServiceClient.prototype.send_deleteExecutorsFromDocumentPatternStage = function(token, docPatternStageId, userOrGroups, callback) {
  this.output.writeMessageBegin('deleteExecutorsFromDocumentPatternStage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternStageId: docPatternStageId,
    userOrGroups: userOrGroups
  };
  var args = new DocumentPatternService_deleteExecutorsFromDocumentPatternStage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_deleteExecutorsFromDocumentPatternStage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_deleteExecutorsFromDocumentPatternStage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteExecutorsFromDocumentPatternStage failed: unknown result';
};
DocumentPatternServiceClient.prototype.checkDocumentPattern = function(token, docPatternId, filter, callback) {
  if (callback === undefined) {
    this.send_checkDocumentPattern(token, docPatternId, filter);
    return this.recv_checkDocumentPattern();
  } else {
    var postData = this.send_checkDocumentPattern(token, docPatternId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_checkDocumentPattern);
  }
};

DocumentPatternServiceClient.prototype.send_checkDocumentPattern = function(token, docPatternId, filter, callback) {
  this.output.writeMessageBegin('checkDocumentPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    filter: filter
  };
  var args = new DocumentPatternService_checkDocumentPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_checkDocumentPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_checkDocumentPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'checkDocumentPattern failed: unknown result';
};
DocumentPatternServiceClient.prototype.createOrUpdatePatternContentItems = function(token, docPatternId, contentItems, callback) {
  if (callback === undefined) {
    this.send_createOrUpdatePatternContentItems(token, docPatternId, contentItems);
    return this.recv_createOrUpdatePatternContentItems();
  } else {
    var postData = this.send_createOrUpdatePatternContentItems(token, docPatternId, contentItems, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdatePatternContentItems);
  }
};

DocumentPatternServiceClient.prototype.send_createOrUpdatePatternContentItems = function(token, docPatternId, contentItems, callback) {
  this.output.writeMessageBegin('createOrUpdatePatternContentItems', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    contentItems: contentItems
  };
  var args = new DocumentPatternService_createOrUpdatePatternContentItems_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_createOrUpdatePatternContentItems = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_createOrUpdatePatternContentItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdatePatternContentItems failed: unknown result';
};
DocumentPatternServiceClient.prototype.deletePatternContentItem = function(token, docPatternId, contentItemKey, callback) {
  if (callback === undefined) {
    this.send_deletePatternContentItem(token, docPatternId, contentItemKey);
    return this.recv_deletePatternContentItem();
  } else {
    var postData = this.send_deletePatternContentItem(token, docPatternId, contentItemKey, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deletePatternContentItem);
  }
};

DocumentPatternServiceClient.prototype.send_deletePatternContentItem = function(token, docPatternId, contentItemKey, callback) {
  this.output.writeMessageBegin('deletePatternContentItem', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    contentItemKey: contentItemKey
  };
  var args = new DocumentPatternService_deletePatternContentItem_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_deletePatternContentItem = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_deletePatternContentItem_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deletePatternContentItem failed: unknown result';
};
DocumentPatternServiceClient.prototype.createOrUpdatePatternContentTab = function(token, docPatternId, patternContentTab, callback) {
  if (callback === undefined) {
    this.send_createOrUpdatePatternContentTab(token, docPatternId, patternContentTab);
    return this.recv_createOrUpdatePatternContentTab();
  } else {
    var postData = this.send_createOrUpdatePatternContentTab(token, docPatternId, patternContentTab, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdatePatternContentTab);
  }
};

DocumentPatternServiceClient.prototype.send_createOrUpdatePatternContentTab = function(token, docPatternId, patternContentTab, callback) {
  this.output.writeMessageBegin('createOrUpdatePatternContentTab', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    patternContentTab: patternContentTab
  };
  var args = new DocumentPatternService_createOrUpdatePatternContentTab_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_createOrUpdatePatternContentTab = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_createOrUpdatePatternContentTab_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdatePatternContentTab failed: unknown result';
};
DocumentPatternServiceClient.prototype.getPatternContentTabsByFilter = function(token, docPatternId, filter, callback) {
  if (callback === undefined) {
    this.send_getPatternContentTabsByFilter(token, docPatternId, filter);
    return this.recv_getPatternContentTabsByFilter();
  } else {
    var postData = this.send_getPatternContentTabsByFilter(token, docPatternId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPatternContentTabsByFilter);
  }
};

DocumentPatternServiceClient.prototype.send_getPatternContentTabsByFilter = function(token, docPatternId, filter, callback) {
  this.output.writeMessageBegin('getPatternContentTabsByFilter', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    filter: filter
  };
  var args = new DocumentPatternService_getPatternContentTabsByFilter_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getPatternContentTabsByFilter = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getPatternContentTabsByFilter_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPatternContentTabsByFilter failed: unknown result';
};
DocumentPatternServiceClient.prototype.deletePatternContentTab = function(token, patternContentTabId, callback) {
  if (callback === undefined) {
    this.send_deletePatternContentTab(token, patternContentTabId);
    return this.recv_deletePatternContentTab();
  } else {
    var postData = this.send_deletePatternContentTab(token, patternContentTabId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deletePatternContentTab);
  }
};

DocumentPatternServiceClient.prototype.send_deletePatternContentTab = function(token, patternContentTabId, callback) {
  this.output.writeMessageBegin('deletePatternContentTab', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    patternContentTabId: patternContentTabId
  };
  var args = new DocumentPatternService_deletePatternContentTab_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_deletePatternContentTab = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_deletePatternContentTab_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deletePatternContentTab failed: unknown result';
};
DocumentPatternServiceClient.prototype.getAllDocumentPatternGroups = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllDocumentPatternGroups(token, filter);
    return this.recv_getAllDocumentPatternGroups();
  } else {
    var postData = this.send_getAllDocumentPatternGroups(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocumentPatternGroups);
  }
};

DocumentPatternServiceClient.prototype.send_getAllDocumentPatternGroups = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllDocumentPatternGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new DocumentPatternService_getAllDocumentPatternGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getAllDocumentPatternGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getAllDocumentPatternGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocumentPatternGroups failed: unknown result';
};
DocumentPatternServiceClient.prototype.createOrUpdateDocumentPatternGroup = function(token, documentPatternGroup, accountId, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateDocumentPatternGroup(token, documentPatternGroup, accountId);
    return this.recv_createOrUpdateDocumentPatternGroup();
  } else {
    var postData = this.send_createOrUpdateDocumentPatternGroup(token, documentPatternGroup, accountId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateDocumentPatternGroup);
  }
};

DocumentPatternServiceClient.prototype.send_createOrUpdateDocumentPatternGroup = function(token, documentPatternGroup, accountId, callback) {
  this.output.writeMessageBegin('createOrUpdateDocumentPatternGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentPatternGroup: documentPatternGroup,
    accountId: accountId
  };
  var args = new DocumentPatternService_createOrUpdateDocumentPatternGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_createOrUpdateDocumentPatternGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_createOrUpdateDocumentPatternGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateDocumentPatternGroup failed: unknown result';
};
DocumentPatternServiceClient.prototype.deleteDocumentPatternGroup = function(token, documentPatternGroupId, callback) {
  if (callback === undefined) {
    this.send_deleteDocumentPatternGroup(token, documentPatternGroupId);
    return this.recv_deleteDocumentPatternGroup();
  } else {
    var postData = this.send_deleteDocumentPatternGroup(token, documentPatternGroupId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteDocumentPatternGroup);
  }
};

DocumentPatternServiceClient.prototype.send_deleteDocumentPatternGroup = function(token, documentPatternGroupId, callback) {
  this.output.writeMessageBegin('deleteDocumentPatternGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentPatternGroupId: documentPatternGroupId
  };
  var args = new DocumentPatternService_deleteDocumentPatternGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_deleteDocumentPatternGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_deleteDocumentPatternGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteDocumentPatternGroup failed: unknown result';
};
DocumentPatternServiceClient.prototype.getAllAvailableStages = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllAvailableStages(token, filter);
    return this.recv_getAllAvailableStages();
  } else {
    var postData = this.send_getAllAvailableStages(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllAvailableStages);
  }
};

DocumentPatternServiceClient.prototype.send_getAllAvailableStages = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllAvailableStages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new DocumentPatternService_getAllAvailableStages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getAllAvailableStages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getAllAvailableStages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllAvailableStages failed: unknown result';
};
DocumentPatternServiceClient.prototype.getAvailableLinkAnswersByPattern = function(token, patternId, callback) {
  if (callback === undefined) {
    this.send_getAvailableLinkAnswersByPattern(token, patternId);
    return this.recv_getAvailableLinkAnswersByPattern();
  } else {
    var postData = this.send_getAvailableLinkAnswersByPattern(token, patternId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAvailableLinkAnswersByPattern);
  }
};

DocumentPatternServiceClient.prototype.send_getAvailableLinkAnswersByPattern = function(token, patternId, callback) {
  this.output.writeMessageBegin('getAvailableLinkAnswersByPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    patternId: patternId
  };
  var args = new DocumentPatternService_getAvailableLinkAnswersByPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getAvailableLinkAnswersByPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getAvailableLinkAnswersByPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAvailableLinkAnswersByPattern failed: unknown result';
};
DocumentPatternServiceClient.prototype.removeAvailableStage = function(token, availStageId, callback) {
  if (callback === undefined) {
    this.send_removeAvailableStage(token, availStageId);
    return this.recv_removeAvailableStage();
  } else {
    var postData = this.send_removeAvailableStage(token, availStageId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeAvailableStage);
  }
};

DocumentPatternServiceClient.prototype.send_removeAvailableStage = function(token, availStageId, callback) {
  this.output.writeMessageBegin('removeAvailableStage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    availStageId: availStageId
  };
  var args = new DocumentPatternService_removeAvailableStage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_removeAvailableStage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_removeAvailableStage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeAvailableStage failed: unknown result';
};
DocumentPatternServiceClient.prototype.getAllDigitalViews = function(token, docPatternId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllDigitalViews(token, docPatternId, filter);
    return this.recv_getAllDigitalViews();
  } else {
    var postData = this.send_getAllDigitalViews(token, docPatternId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDigitalViews);
  }
};

DocumentPatternServiceClient.prototype.send_getAllDigitalViews = function(token, docPatternId, filter, callback) {
  this.output.writeMessageBegin('getAllDigitalViews', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    filter: filter
  };
  var args = new DocumentPatternService_getAllDigitalViews_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getAllDigitalViews = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getAllDigitalViews_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDigitalViews failed: unknown result';
};
DocumentPatternServiceClient.prototype.createOrUpdateDigitalView = function(token, digitalView, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateDigitalView(token, digitalView);
    return this.recv_createOrUpdateDigitalView();
  } else {
    var postData = this.send_createOrUpdateDigitalView(token, digitalView, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateDigitalView);
  }
};

DocumentPatternServiceClient.prototype.send_createOrUpdateDigitalView = function(token, digitalView, callback) {
  this.output.writeMessageBegin('createOrUpdateDigitalView', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    digitalView: digitalView
  };
  var args = new DocumentPatternService_createOrUpdateDigitalView_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_createOrUpdateDigitalView = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_createOrUpdateDigitalView_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateDigitalView failed: unknown result';
};
DocumentPatternServiceClient.prototype.deleteDigitalView = function(token, digitalViewId, callback) {
  if (callback === undefined) {
    this.send_deleteDigitalView(token, digitalViewId);
    return this.recv_deleteDigitalView();
  } else {
    var postData = this.send_deleteDigitalView(token, digitalViewId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteDigitalView);
  }
};

DocumentPatternServiceClient.prototype.send_deleteDigitalView = function(token, digitalViewId, callback) {
  this.output.writeMessageBegin('deleteDigitalView', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    digitalViewId: digitalViewId
  };
  var args = new DocumentPatternService_deleteDigitalView_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_deleteDigitalView = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_deleteDigitalView_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteDigitalView failed: unknown result';
};
DocumentPatternServiceClient.prototype.exportDocumentPattern = function(token, docPatternId, callback) {
  if (callback === undefined) {
    this.send_exportDocumentPattern(token, docPatternId);
    return this.recv_exportDocumentPattern();
  } else {
    var postData = this.send_exportDocumentPattern(token, docPatternId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_exportDocumentPattern);
  }
};

DocumentPatternServiceClient.prototype.send_exportDocumentPattern = function(token, docPatternId, callback) {
  this.output.writeMessageBegin('exportDocumentPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId
  };
  var args = new DocumentPatternService_exportDocumentPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_exportDocumentPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_exportDocumentPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'exportDocumentPattern failed: unknown result';
};
DocumentPatternServiceClient.prototype.importDocumentPattern = function(token, json, docPatternName, pDescription, docPatternGroupId, accountId, ignoreError, callback) {
  if (callback === undefined) {
    this.send_importDocumentPattern(token, json, docPatternName, pDescription, docPatternGroupId, accountId, ignoreError);
    return this.recv_importDocumentPattern();
  } else {
    var postData = this.send_importDocumentPattern(token, json, docPatternName, pDescription, docPatternGroupId, accountId, ignoreError, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_importDocumentPattern);
  }
};

DocumentPatternServiceClient.prototype.send_importDocumentPattern = function(token, json, docPatternName, pDescription, docPatternGroupId, accountId, ignoreError, callback) {
  this.output.writeMessageBegin('importDocumentPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    json: json,
    docPatternName: docPatternName,
    pDescription: pDescription,
    docPatternGroupId: docPatternGroupId,
    accountId: accountId,
    ignoreError: ignoreError
  };
  var args = new DocumentPatternService_importDocumentPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_importDocumentPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_importDocumentPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'importDocumentPattern failed: unknown result';
};
DocumentPatternServiceClient.prototype.getPatternUserGroup = function(token, docPatternId, callback) {
  if (callback === undefined) {
    this.send_getPatternUserGroup(token, docPatternId);
    return this.recv_getPatternUserGroup();
  } else {
    var postData = this.send_getPatternUserGroup(token, docPatternId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPatternUserGroup);
  }
};

DocumentPatternServiceClient.prototype.send_getPatternUserGroup = function(token, docPatternId, callback) {
  this.output.writeMessageBegin('getPatternUserGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId
  };
  var args = new DocumentPatternService_getPatternUserGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getPatternUserGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getPatternUserGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPatternUserGroup failed: unknown result';
};
DocumentPatternServiceClient.prototype.createOrUpdatePatternUserGroup = function(token, docPatternId, userOrGroups, callback) {
  if (callback === undefined) {
    this.send_createOrUpdatePatternUserGroup(token, docPatternId, userOrGroups);
    return this.recv_createOrUpdatePatternUserGroup();
  } else {
    var postData = this.send_createOrUpdatePatternUserGroup(token, docPatternId, userOrGroups, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdatePatternUserGroup);
  }
};

DocumentPatternServiceClient.prototype.send_createOrUpdatePatternUserGroup = function(token, docPatternId, userOrGroups, callback) {
  this.output.writeMessageBegin('createOrUpdatePatternUserGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    userOrGroups: userOrGroups
  };
  var args = new DocumentPatternService_createOrUpdatePatternUserGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_createOrUpdatePatternUserGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_createOrUpdatePatternUserGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdatePatternUserGroup failed: unknown result';
};
DocumentPatternServiceClient.prototype.getPatternProcessRoles = function(token, docPatternId, filter, callback) {
  if (callback === undefined) {
    this.send_getPatternProcessRoles(token, docPatternId, filter);
    return this.recv_getPatternProcessRoles();
  } else {
    var postData = this.send_getPatternProcessRoles(token, docPatternId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPatternProcessRoles);
  }
};

DocumentPatternServiceClient.prototype.send_getPatternProcessRoles = function(token, docPatternId, filter, callback) {
  this.output.writeMessageBegin('getPatternProcessRoles', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    filter: filter
  };
  var args = new DocumentPatternService_getPatternProcessRoles_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getPatternProcessRoles = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getPatternProcessRoles_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPatternProcessRoles failed: unknown result';
};
DocumentPatternServiceClient.prototype.changePatternProcessRoles = function(token, docPatternId, userOrGroupsToAdd, keyIdToRemove, callback) {
  if (callback === undefined) {
    this.send_changePatternProcessRoles(token, docPatternId, userOrGroupsToAdd, keyIdToRemove);
    return this.recv_changePatternProcessRoles();
  } else {
    var postData = this.send_changePatternProcessRoles(token, docPatternId, userOrGroupsToAdd, keyIdToRemove, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changePatternProcessRoles);
  }
};

DocumentPatternServiceClient.prototype.send_changePatternProcessRoles = function(token, docPatternId, userOrGroupsToAdd, keyIdToRemove, callback) {
  this.output.writeMessageBegin('changePatternProcessRoles', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    userOrGroupsToAdd: userOrGroupsToAdd,
    keyIdToRemove: keyIdToRemove
  };
  var args = new DocumentPatternService_changePatternProcessRoles_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_changePatternProcessRoles = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_changePatternProcessRoles_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changePatternProcessRoles failed: unknown result';
};
DocumentPatternServiceClient.prototype.getPatternVariables = function(token, docPatternId, filter, callback) {
  if (callback === undefined) {
    this.send_getPatternVariables(token, docPatternId, filter);
    return this.recv_getPatternVariables();
  } else {
    var postData = this.send_getPatternVariables(token, docPatternId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getPatternVariables);
  }
};

DocumentPatternServiceClient.prototype.send_getPatternVariables = function(token, docPatternId, filter, callback) {
  this.output.writeMessageBegin('getPatternVariables', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    filter: filter
  };
  var args = new DocumentPatternService_getPatternVariables_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getPatternVariables = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getPatternVariables_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getPatternVariables failed: unknown result';
};
DocumentPatternServiceClient.prototype.changePatternVariables = function(token, docPatternId, patternVariablesToAdd, keyIdToRemove, callback) {
  if (callback === undefined) {
    this.send_changePatternVariables(token, docPatternId, patternVariablesToAdd, keyIdToRemove);
    return this.recv_changePatternVariables();
  } else {
    var postData = this.send_changePatternVariables(token, docPatternId, patternVariablesToAdd, keyIdToRemove, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changePatternVariables);
  }
};

DocumentPatternServiceClient.prototype.send_changePatternVariables = function(token, docPatternId, patternVariablesToAdd, keyIdToRemove, callback) {
  this.output.writeMessageBegin('changePatternVariables', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docPatternId: docPatternId,
    patternVariablesToAdd: patternVariablesToAdd,
    keyIdToRemove: keyIdToRemove
  };
  var args = new DocumentPatternService_changePatternVariables_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_changePatternVariables = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_changePatternVariables_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changePatternVariables failed: unknown result';
};
DocumentPatternServiceClient.prototype.addAvailablePatternStageToAccounts = function(token, availablePatternStageId, accountIds, callback) {
  if (callback === undefined) {
    this.send_addAvailablePatternStageToAccounts(token, availablePatternStageId, accountIds);
    return this.recv_addAvailablePatternStageToAccounts();
  } else {
    var postData = this.send_addAvailablePatternStageToAccounts(token, availablePatternStageId, accountIds, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addAvailablePatternStageToAccounts);
  }
};

DocumentPatternServiceClient.prototype.send_addAvailablePatternStageToAccounts = function(token, availablePatternStageId, accountIds, callback) {
  this.output.writeMessageBegin('addAvailablePatternStageToAccounts', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    availablePatternStageId: availablePatternStageId,
    accountIds: accountIds
  };
  var args = new DocumentPatternService_addAvailablePatternStageToAccounts_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_addAvailablePatternStageToAccounts = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_addAvailablePatternStageToAccounts_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addAvailablePatternStageToAccounts failed: unknown result';
};
DocumentPatternServiceClient.prototype.getAllPatternAttachmentTemplates = function(token, patternId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllPatternAttachmentTemplates(token, patternId, filter);
    return this.recv_getAllPatternAttachmentTemplates();
  } else {
    var postData = this.send_getAllPatternAttachmentTemplates(token, patternId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllPatternAttachmentTemplates);
  }
};

DocumentPatternServiceClient.prototype.send_getAllPatternAttachmentTemplates = function(token, patternId, filter, callback) {
  this.output.writeMessageBegin('getAllPatternAttachmentTemplates', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    patternId: patternId,
    filter: filter
  };
  var args = new DocumentPatternService_getAllPatternAttachmentTemplates_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_getAllPatternAttachmentTemplates = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_getAllPatternAttachmentTemplates_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllPatternAttachmentTemplates failed: unknown result';
};
DocumentPatternServiceClient.prototype.createOrUpdatePatternAttachmentTemplate = function(token, patternAttachmentTemplate, xmlFile, callback) {
  if (callback === undefined) {
    this.send_createOrUpdatePatternAttachmentTemplate(token, patternAttachmentTemplate, xmlFile);
    return this.recv_createOrUpdatePatternAttachmentTemplate();
  } else {
    var postData = this.send_createOrUpdatePatternAttachmentTemplate(token, patternAttachmentTemplate, xmlFile, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdatePatternAttachmentTemplate);
  }
};

DocumentPatternServiceClient.prototype.send_createOrUpdatePatternAttachmentTemplate = function(token, patternAttachmentTemplate, xmlFile, callback) {
  this.output.writeMessageBegin('createOrUpdatePatternAttachmentTemplate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    patternAttachmentTemplate: patternAttachmentTemplate,
    xmlFile: xmlFile
  };
  var args = new DocumentPatternService_createOrUpdatePatternAttachmentTemplate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_createOrUpdatePatternAttachmentTemplate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_createOrUpdatePatternAttachmentTemplate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdatePatternAttachmentTemplate failed: unknown result';
};
DocumentPatternServiceClient.prototype.downloadPatternAttachmentTemplate = function(token, patternAttachmentTemplateId, callback) {
  if (callback === undefined) {
    this.send_downloadPatternAttachmentTemplate(token, patternAttachmentTemplateId);
    return this.recv_downloadPatternAttachmentTemplate();
  } else {
    var postData = this.send_downloadPatternAttachmentTemplate(token, patternAttachmentTemplateId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_downloadPatternAttachmentTemplate);
  }
};

DocumentPatternServiceClient.prototype.send_downloadPatternAttachmentTemplate = function(token, patternAttachmentTemplateId, callback) {
  this.output.writeMessageBegin('downloadPatternAttachmentTemplate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    patternAttachmentTemplateId: patternAttachmentTemplateId
  };
  var args = new DocumentPatternService_downloadPatternAttachmentTemplate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_downloadPatternAttachmentTemplate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_downloadPatternAttachmentTemplate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'downloadPatternAttachmentTemplate failed: unknown result';
};
DocumentPatternServiceClient.prototype.removePatternAttachmentTemplate = function(token, patternAttachmentTemplateId, callback) {
  if (callback === undefined) {
    this.send_removePatternAttachmentTemplate(token, patternAttachmentTemplateId);
    return this.recv_removePatternAttachmentTemplate();
  } else {
    var postData = this.send_removePatternAttachmentTemplate(token, patternAttachmentTemplateId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removePatternAttachmentTemplate);
  }
};

DocumentPatternServiceClient.prototype.send_removePatternAttachmentTemplate = function(token, patternAttachmentTemplateId, callback) {
  this.output.writeMessageBegin('removePatternAttachmentTemplate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    patternAttachmentTemplateId: patternAttachmentTemplateId
  };
  var args = new DocumentPatternService_removePatternAttachmentTemplate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentPatternServiceClient.prototype.recv_removePatternAttachmentTemplate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentPatternService_removePatternAttachmentTemplate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removePatternAttachmentTemplate failed: unknown result';
};
