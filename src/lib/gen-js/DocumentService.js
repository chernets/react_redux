//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

DocumentService_calculatePermissions_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_calculatePermissions_args.prototype = {};
DocumentService_calculatePermissions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_calculatePermissions_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_calculatePermissions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_calculatePermissions_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocPermissions(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_calculatePermissions_result.prototype = {};
DocumentService_calculatePermissions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocPermissions();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_calculatePermissions_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_calculatePermissions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createOrUpdateDocument_args = function(args) {
  this.token = null;
  this.document = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.document !== undefined && args.document !== null) {
      this.document = new Document(args.document);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_createOrUpdateDocument_args.prototype = {};
DocumentService_createOrUpdateDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.document = new Document();
        this.document.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createOrUpdateDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createOrUpdateDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.document !== null && this.document !== undefined) {
    output.writeFieldBegin('document', Thrift.Type.STRUCT, 2);
    this.document.write(output);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createOrUpdateDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Document(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_createOrUpdateDocument_result.prototype = {};
DocumentService_createOrUpdateDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Document();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createOrUpdateDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createOrUpdateDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_updateDocument_args = function(args) {
  this.token = null;
  this.document = null;
  this.registryId = null;
  this.addedResponsibles = null;
  this.removedResponsibles = null;
  this.addedSecurityClassificationIds = null;
  this.removedSecurityClassificationIds = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.document !== undefined && args.document !== null) {
      this.document = new Document(args.document);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.addedResponsibles !== undefined && args.addedResponsibles !== null) {
      this.addedResponsibles = Thrift.copyList(args.addedResponsibles, [UserOrGroup]);
    }
    if (args.removedResponsibles !== undefined && args.removedResponsibles !== null) {
      this.removedResponsibles = Thrift.copyList(args.removedResponsibles, [UserOrGroup]);
    }
    if (args.addedSecurityClassificationIds !== undefined && args.addedSecurityClassificationIds !== null) {
      this.addedSecurityClassificationIds = Thrift.copyList(args.addedSecurityClassificationIds, [null]);
    }
    if (args.removedSecurityClassificationIds !== undefined && args.removedSecurityClassificationIds !== null) {
      this.removedSecurityClassificationIds = Thrift.copyList(args.removedSecurityClassificationIds, [null]);
    }
  }
};
DocumentService_updateDocument_args.prototype = {};
DocumentService_updateDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.document = new Document();
        this.document.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size860 = 0;
        var _rtmp3864;
        this.addedResponsibles = [];
        var _etype863 = 0;
        _rtmp3864 = input.readListBegin();
        _etype863 = _rtmp3864.etype;
        _size860 = _rtmp3864.size;
        for (var _i865 = 0; _i865 < _size860; ++_i865)
        {
          var elem866 = null;
          elem866 = new UserOrGroup();
          elem866.read(input);
          this.addedResponsibles.push(elem866);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size867 = 0;
        var _rtmp3871;
        this.removedResponsibles = [];
        var _etype870 = 0;
        _rtmp3871 = input.readListBegin();
        _etype870 = _rtmp3871.etype;
        _size867 = _rtmp3871.size;
        for (var _i872 = 0; _i872 < _size867; ++_i872)
        {
          var elem873 = null;
          elem873 = new UserOrGroup();
          elem873.read(input);
          this.removedResponsibles.push(elem873);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size874 = 0;
        var _rtmp3878;
        this.addedSecurityClassificationIds = [];
        var _etype877 = 0;
        _rtmp3878 = input.readListBegin();
        _etype877 = _rtmp3878.etype;
        _size874 = _rtmp3878.size;
        for (var _i879 = 0; _i879 < _size874; ++_i879)
        {
          var elem880 = null;
          elem880 = input.readString().value;
          this.addedSecurityClassificationIds.push(elem880);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size881 = 0;
        var _rtmp3885;
        this.removedSecurityClassificationIds = [];
        var _etype884 = 0;
        _rtmp3885 = input.readListBegin();
        _etype884 = _rtmp3885.etype;
        _size881 = _rtmp3885.size;
        for (var _i886 = 0; _i886 < _size881; ++_i886)
        {
          var elem887 = null;
          elem887 = input.readString().value;
          this.removedSecurityClassificationIds.push(elem887);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_updateDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_updateDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.document !== null && this.document !== undefined) {
    output.writeFieldBegin('document', Thrift.Type.STRUCT, 2);
    this.document.write(output);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.addedResponsibles !== null && this.addedResponsibles !== undefined) {
    output.writeFieldBegin('addedResponsibles', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.addedResponsibles.length);
    for (var iter888 in this.addedResponsibles)
    {
      if (this.addedResponsibles.hasOwnProperty(iter888))
      {
        iter888 = this.addedResponsibles[iter888];
        iter888.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.removedResponsibles !== null && this.removedResponsibles !== undefined) {
    output.writeFieldBegin('removedResponsibles', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.removedResponsibles.length);
    for (var iter889 in this.removedResponsibles)
    {
      if (this.removedResponsibles.hasOwnProperty(iter889))
      {
        iter889 = this.removedResponsibles[iter889];
        iter889.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.addedSecurityClassificationIds !== null && this.addedSecurityClassificationIds !== undefined) {
    output.writeFieldBegin('addedSecurityClassificationIds', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.addedSecurityClassificationIds.length);
    for (var iter890 in this.addedSecurityClassificationIds)
    {
      if (this.addedSecurityClassificationIds.hasOwnProperty(iter890))
      {
        iter890 = this.addedSecurityClassificationIds[iter890];
        output.writeString(iter890);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.removedSecurityClassificationIds !== null && this.removedSecurityClassificationIds !== undefined) {
    output.writeFieldBegin('removedSecurityClassificationIds', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.removedSecurityClassificationIds.length);
    for (var iter891 in this.removedSecurityClassificationIds)
    {
      if (this.removedSecurityClassificationIds.hasOwnProperty(iter891))
      {
        iter891 = this.removedSecurityClassificationIds[iter891];
        output.writeString(iter891);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_updateDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Document(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_updateDocument_result.prototype = {};
DocumentService_updateDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Document();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_updateDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_updateDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createDocument_args = function(args) {
  this.token = null;
  this.document = null;
  this.parentDocumentId = null;
  this.users = null;
  this.contentItems = null;
  this.securityClassificationsId = null;
  this.attachmentIds = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.document !== undefined && args.document !== null) {
      this.document = new Document(args.document);
    }
    if (args.parentDocumentId !== undefined && args.parentDocumentId !== null) {
      this.parentDocumentId = args.parentDocumentId;
    }
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [UserOrGroup]);
    }
    if (args.contentItems !== undefined && args.contentItems !== null) {
      this.contentItems = Thrift.copyList(args.contentItems, [ContentItem]);
    }
    if (args.securityClassificationsId !== undefined && args.securityClassificationsId !== null) {
      this.securityClassificationsId = Thrift.copyList(args.securityClassificationsId, [null]);
    }
    if (args.attachmentIds !== undefined && args.attachmentIds !== null) {
      this.attachmentIds = Thrift.copyList(args.attachmentIds, [null]);
    }
  }
};
DocumentService_createDocument_args.prototype = {};
DocumentService_createDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.document = new Document();
        this.document.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.parentDocumentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size892 = 0;
        var _rtmp3896;
        this.users = [];
        var _etype895 = 0;
        _rtmp3896 = input.readListBegin();
        _etype895 = _rtmp3896.etype;
        _size892 = _rtmp3896.size;
        for (var _i897 = 0; _i897 < _size892; ++_i897)
        {
          var elem898 = null;
          elem898 = new UserOrGroup();
          elem898.read(input);
          this.users.push(elem898);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size899 = 0;
        var _rtmp3903;
        this.contentItems = [];
        var _etype902 = 0;
        _rtmp3903 = input.readListBegin();
        _etype902 = _rtmp3903.etype;
        _size899 = _rtmp3903.size;
        for (var _i904 = 0; _i904 < _size899; ++_i904)
        {
          var elem905 = null;
          elem905 = new ContentItem();
          elem905.read(input);
          this.contentItems.push(elem905);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size906 = 0;
        var _rtmp3910;
        this.securityClassificationsId = [];
        var _etype909 = 0;
        _rtmp3910 = input.readSetBegin();
        _etype909 = _rtmp3910.etype;
        _size906 = _rtmp3910.size;
        for (var _i911 = 0; _i911 < _size906; ++_i911)
        {
          var elem912 = null;
          elem912 = input.readString().value;
          this.securityClassificationsId.push(elem912);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.SET) {
        var _size913 = 0;
        var _rtmp3917;
        this.attachmentIds = [];
        var _etype916 = 0;
        _rtmp3917 = input.readSetBegin();
        _etype916 = _rtmp3917.etype;
        _size913 = _rtmp3917.size;
        for (var _i918 = 0; _i918 < _size913; ++_i918)
        {
          var elem919 = null;
          elem919 = input.readString().value;
          this.attachmentIds.push(elem919);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.document !== null && this.document !== undefined) {
    output.writeFieldBegin('document', Thrift.Type.STRUCT, 2);
    this.document.write(output);
    output.writeFieldEnd();
  }
  if (this.parentDocumentId !== null && this.parentDocumentId !== undefined) {
    output.writeFieldBegin('parentDocumentId', Thrift.Type.STRING, 3);
    output.writeString(this.parentDocumentId);
    output.writeFieldEnd();
  }
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
    for (var iter920 in this.users)
    {
      if (this.users.hasOwnProperty(iter920))
      {
        iter920 = this.users[iter920];
        iter920.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.contentItems !== null && this.contentItems !== undefined) {
    output.writeFieldBegin('contentItems', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.contentItems.length);
    for (var iter921 in this.contentItems)
    {
      if (this.contentItems.hasOwnProperty(iter921))
      {
        iter921 = this.contentItems[iter921];
        iter921.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.securityClassificationsId !== null && this.securityClassificationsId !== undefined) {
    output.writeFieldBegin('securityClassificationsId', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.STRING, this.securityClassificationsId.length);
    for (var iter922 in this.securityClassificationsId)
    {
      if (this.securityClassificationsId.hasOwnProperty(iter922))
      {
        iter922 = this.securityClassificationsId[iter922];
        output.writeString(iter922);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.attachmentIds !== null && this.attachmentIds !== undefined) {
    output.writeFieldBegin('attachmentIds', Thrift.Type.SET, 7);
    output.writeSetBegin(Thrift.Type.STRING, this.attachmentIds.length);
    for (var iter923 in this.attachmentIds)
    {
      if (this.attachmentIds.hasOwnProperty(iter923))
      {
        iter923 = this.attachmentIds[iter923];
        output.writeString(iter923);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Document(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_createDocument_result.prototype = {};
DocumentService_createDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Document();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getDocument_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.registryId = null;
  this.decrypt = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.decrypt !== undefined && args.decrypt !== null) {
      this.decrypt = args.decrypt;
    }
  }
};
DocumentService_getDocument_args.prototype = {};
DocumentService_getDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.decrypt = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.decrypt !== null && this.decrypt !== undefined) {
    output.writeFieldBegin('decrypt', Thrift.Type.BOOL, 4);
    output.writeBool(this.decrypt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Document(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getDocument_result.prototype = {};
DocumentService_getDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Document();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocuments_args = function(args) {
  this.token = null;
  this.registryId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentService_getAllDocuments_args.prototype = {};
DocumentService_getAllDocuments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocuments_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocuments_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 2);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocuments_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Document]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getAllDocuments_result.prototype = {};
DocumentService_getAllDocuments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size924 = 0;
        var _rtmp3928;
        this.success = [];
        var _etype927 = 0;
        _rtmp3928 = input.readListBegin();
        _etype927 = _rtmp3928.etype;
        _size924 = _rtmp3928.size;
        for (var _i929 = 0; _i929 < _size924; ++_i929)
        {
          var elem930 = null;
          elem930 = new Document();
          elem930.read(input);
          this.success.push(elem930);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocuments_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocuments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter931 in this.success)
    {
      if (this.success.hasOwnProperty(iter931))
      {
        iter931 = this.success[iter931];
        iter931.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getCountAllDocuments_args = function(args) {
  this.token = null;
  this.registryId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentService_getCountAllDocuments_args.prototype = {};
DocumentService_getCountAllDocuments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getCountAllDocuments_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getCountAllDocuments_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 2);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getCountAllDocuments_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getCountAllDocuments_result.prototype = {};
DocumentService_getCountAllDocuments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getCountAllDocuments_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getCountAllDocuments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_deleteDocument_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_deleteDocument_args.prototype = {};
DocumentService_deleteDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_deleteDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_deleteDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_deleteDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_deleteDocument_result.prototype = {};
DocumentService_deleteDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_deleteDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_deleteDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllPassedStages_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.registryId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentService_getAllPassedStages_args.prototype = {};
DocumentService_getAllPassedStages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllPassedStages_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllPassedStages_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllPassedStages_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [PassedStage]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getAllPassedStages_result.prototype = {};
DocumentService_getAllPassedStages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size932 = 0;
        var _rtmp3936;
        this.success = [];
        var _etype935 = 0;
        _rtmp3936 = input.readListBegin();
        _etype935 = _rtmp3936.etype;
        _size932 = _rtmp3936.size;
        for (var _i937 = 0; _i937 < _size932; ++_i937)
        {
          var elem938 = null;
          elem938 = new PassedStage();
          elem938.read(input);
          this.success.push(elem938);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllPassedStages_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllPassedStages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter939 in this.success)
    {
      if (this.success.hasOwnProperty(iter939))
      {
        iter939 = this.success[iter939];
        iter939.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getExecutionTree_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.registryId = null;
  this.iteration = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.iteration !== undefined && args.iteration !== null) {
      this.iteration = args.iteration;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentService_getExecutionTree_args.prototype = {};
DocumentService_getExecutionTree_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.iteration = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getExecutionTree_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getExecutionTree_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.iteration !== null && this.iteration !== undefined) {
    output.writeFieldBegin('iteration', Thrift.Type.I32, 4);
    output.writeI32(this.iteration);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 5);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getExecutionTree_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ExecutionTree]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getExecutionTree_result.prototype = {};
DocumentService_getExecutionTree_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size940 = 0;
        var _rtmp3944;
        this.success = [];
        var _etype943 = 0;
        _rtmp3944 = input.readListBegin();
        _etype943 = _rtmp3944.etype;
        _size940 = _rtmp3944.size;
        for (var _i945 = 0; _i945 < _size940; ++_i945)
        {
          var elem946 = null;
          elem946 = new ExecutionTree();
          elem946.read(input);
          this.success.push(elem946);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getExecutionTree_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getExecutionTree_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter947 in this.success)
    {
      if (this.success.hasOwnProperty(iter947))
      {
        iter947 = this.success[iter947];
        iter947.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getActiveStages_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_getActiveStages_args.prototype = {};
DocumentService_getActiveStages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getActiveStages_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getActiveStages_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getActiveStages_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStage]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getActiveStages_result.prototype = {};
DocumentService_getActiveStages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size948 = 0;
        var _rtmp3952;
        this.success = [];
        var _etype951 = 0;
        _rtmp3952 = input.readListBegin();
        _etype951 = _rtmp3952.etype;
        _size948 = _rtmp3952.size;
        for (var _i953 = 0; _i953 < _size948; ++_i953)
        {
          var elem954 = null;
          elem954 = new DocumentPatternStage();
          elem954.read(input);
          this.success.push(elem954);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getActiveStages_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getActiveStages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter955 in this.success)
    {
      if (this.success.hasOwnProperty(iter955))
      {
        iter955 = this.success[iter955];
        iter955.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getCountPeoplesWhenRenderedDecision_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.stageId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.stageId !== undefined && args.stageId !== null) {
      this.stageId = args.stageId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_getCountPeoplesWhenRenderedDecision_args.prototype = {};
DocumentService_getCountPeoplesWhenRenderedDecision_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getCountPeoplesWhenRenderedDecision_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getCountPeoplesWhenRenderedDecision_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.stageId !== null && this.stageId !== undefined) {
    output.writeFieldBegin('stageId', Thrift.Type.STRING, 3);
    output.writeString(this.stageId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getCountPeoplesWhenRenderedDecision_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getCountPeoplesWhenRenderedDecision_result.prototype = {};
DocumentService_getCountPeoplesWhenRenderedDecision_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size956 = 0;
        var _rtmp3960;
        this.success = {};
        var _ktype957 = 0;
        var _vtype958 = 0;
        _rtmp3960 = input.readMapBegin();
        _ktype957 = _rtmp3960.ktype;
        _vtype958 = _rtmp3960.vtype;
        _size956 = _rtmp3960.size;
        for (var _i961 = 0; _i961 < _size956; ++_i961)
        {
          if (_i961 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key962 = null;
          var val963 = null;
          key962 = input.readString().value;
          val963 = input.readI32().value;
          this.success[key962] = val963;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getCountPeoplesWhenRenderedDecision_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getCountPeoplesWhenRenderedDecision_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.success));
    for (var kiter964 in this.success)
    {
      if (this.success.hasOwnProperty(kiter964))
      {
        var viter965 = this.success[kiter964];
        output.writeString(kiter964);
        output.writeI32(viter965);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_setDocumentDecision_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.decision = null;
  this.documentComment = null;
  this.force = null;
  this.signature = null;
  this.cardId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.decision !== undefined && args.decision !== null) {
      this.decision = args.decision;
    }
    if (args.documentComment !== undefined && args.documentComment !== null) {
      this.documentComment = args.documentComment;
    }
    if (args.force !== undefined && args.force !== null) {
      this.force = args.force;
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
    if (args.cardId !== undefined && args.cardId !== null) {
      this.cardId = args.cardId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_setDocumentDecision_args.prototype = {};
DocumentService_setDocumentDecision_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.decision = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.documentComment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.force = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.cardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_setDocumentDecision_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_setDocumentDecision_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.decision !== null && this.decision !== undefined) {
    output.writeFieldBegin('decision', Thrift.Type.STRING, 3);
    output.writeString(this.decision);
    output.writeFieldEnd();
  }
  if (this.documentComment !== null && this.documentComment !== undefined) {
    output.writeFieldBegin('documentComment', Thrift.Type.STRING, 4);
    output.writeString(this.documentComment);
    output.writeFieldEnd();
  }
  if (this.force !== null && this.force !== undefined) {
    output.writeFieldBegin('force', Thrift.Type.BOOL, 5);
    output.writeBool(this.force);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 6);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  if (this.cardId !== null && this.cardId !== undefined) {
    output.writeFieldBegin('cardId', Thrift.Type.STRING, 7);
    output.writeString(this.cardId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 8);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_setDocumentDecision_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Document(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_setDocumentDecision_result.prototype = {};
DocumentService_setDocumentDecision_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Document();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_setDocumentDecision_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_setDocumentDecision_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_approveDocumentDecision_args = function(args) {
  this.token = null;
  this.executionId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.executionId !== undefined && args.executionId !== null) {
      this.executionId = args.executionId;
    }
  }
};
DocumentService_approveDocumentDecision_args.prototype = {};
DocumentService_approveDocumentDecision_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.executionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_approveDocumentDecision_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_approveDocumentDecision_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.executionId !== null && this.executionId !== undefined) {
    output.writeFieldBegin('executionId', Thrift.Type.STRING, 2);
    output.writeString(this.executionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_approveDocumentDecision_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_approveDocumentDecision_result.prototype = {};
DocumentService_approveDocumentDecision_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_approveDocumentDecision_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_approveDocumentDecision_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_shareDocument_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.registryId = null;
  this.usersOrGroups = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.usersOrGroups !== undefined && args.usersOrGroups !== null) {
      this.usersOrGroups = Thrift.copyList(args.usersOrGroups, [UserOrGroup]);
    }
  }
};
DocumentService_shareDocument_args.prototype = {};
DocumentService_shareDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size966 = 0;
        var _rtmp3970;
        this.usersOrGroups = [];
        var _etype969 = 0;
        _rtmp3970 = input.readListBegin();
        _etype969 = _rtmp3970.etype;
        _size966 = _rtmp3970.size;
        for (var _i971 = 0; _i971 < _size966; ++_i971)
        {
          var elem972 = null;
          elem972 = new UserOrGroup();
          elem972.read(input);
          this.usersOrGroups.push(elem972);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_shareDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_shareDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.usersOrGroups !== null && this.usersOrGroups !== undefined) {
    output.writeFieldBegin('usersOrGroups', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.usersOrGroups.length);
    for (var iter973 in this.usersOrGroups)
    {
      if (this.usersOrGroups.hasOwnProperty(iter973))
      {
        iter973 = this.usersOrGroups[iter973];
        iter973.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_shareDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentExecution]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_shareDocument_result.prototype = {};
DocumentService_shareDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size974 = 0;
        var _rtmp3978;
        this.success = [];
        var _etype977 = 0;
        _rtmp3978 = input.readListBegin();
        _etype977 = _rtmp3978.etype;
        _size974 = _rtmp3978.size;
        for (var _i979 = 0; _i979 < _size974; ++_i979)
        {
          var elem980 = null;
          elem980 = new DocumentExecution();
          elem980.read(input);
          this.success.push(elem980);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_shareDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_shareDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter981 in this.success)
    {
      if (this.success.hasOwnProperty(iter981))
      {
        iter981 = this.success[iter981];
        iter981.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_revokeDocument_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.usersOrGroups = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.usersOrGroups !== undefined && args.usersOrGroups !== null) {
      this.usersOrGroups = Thrift.copyList(args.usersOrGroups, [UserOrGroup]);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_revokeDocument_args.prototype = {};
DocumentService_revokeDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size982 = 0;
        var _rtmp3986;
        this.usersOrGroups = [];
        var _etype985 = 0;
        _rtmp3986 = input.readListBegin();
        _etype985 = _rtmp3986.etype;
        _size982 = _rtmp3986.size;
        for (var _i987 = 0; _i987 < _size982; ++_i987)
        {
          var elem988 = null;
          elem988 = new UserOrGroup();
          elem988.read(input);
          this.usersOrGroups.push(elem988);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_revokeDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_revokeDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.usersOrGroups !== null && this.usersOrGroups !== undefined) {
    output.writeFieldBegin('usersOrGroups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.usersOrGroups.length);
    for (var iter989 in this.usersOrGroups)
    {
      if (this.usersOrGroups.hasOwnProperty(iter989))
      {
        iter989 = this.usersOrGroups[iter989];
        iter989.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_revokeDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_revokeDocument_result.prototype = {};
DocumentService_revokeDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_revokeDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_revokeDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocumentSharings_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.registryId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentService_getAllDocumentSharings_args.prototype = {};
DocumentService_getAllDocumentSharings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocumentSharings_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocumentSharings_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocumentSharings_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserOrGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getAllDocumentSharings_result.prototype = {};
DocumentService_getAllDocumentSharings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size990 = 0;
        var _rtmp3994;
        this.success = [];
        var _etype993 = 0;
        _rtmp3994 = input.readListBegin();
        _etype993 = _rtmp3994.etype;
        _size990 = _rtmp3994.size;
        for (var _i995 = 0; _i995 < _size990; ++_i995)
        {
          var elem996 = null;
          elem996 = new UserOrGroup();
          elem996.read(input);
          this.success.push(elem996);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocumentSharings_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocumentSharings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter997 in this.success)
    {
      if (this.success.hasOwnProperty(iter997))
      {
        iter997 = this.success[iter997];
        iter997.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocumentReassign_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentService_getAllDocumentReassign_args.prototype = {};
DocumentService_getAllDocumentReassign_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocumentReassign_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocumentReassign_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocumentReassign_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentReassign]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getAllDocumentReassign_result.prototype = {};
DocumentService_getAllDocumentReassign_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size998 = 0;
        var _rtmp31002;
        this.success = [];
        var _etype1001 = 0;
        _rtmp31002 = input.readListBegin();
        _etype1001 = _rtmp31002.etype;
        _size998 = _rtmp31002.size;
        for (var _i1003 = 0; _i1003 < _size998; ++_i1003)
        {
          var elem1004 = null;
          elem1004 = new DocumentReassign();
          elem1004.read(input);
          this.success.push(elem1004);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocumentReassign_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocumentReassign_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1005 in this.success)
    {
      if (this.success.hasOwnProperty(iter1005))
      {
        iter1005 = this.success[iter1005];
        iter1005.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_reassignDocument_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.documentReassign = null;
  this.cardId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.documentReassign !== undefined && args.documentReassign !== null) {
      this.documentReassign = Thrift.copyList(args.documentReassign, [DocumentReassign]);
    }
    if (args.cardId !== undefined && args.cardId !== null) {
      this.cardId = args.cardId;
    }
  }
};
DocumentService_reassignDocument_args.prototype = {};
DocumentService_reassignDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1006 = 0;
        var _rtmp31010;
        this.documentReassign = [];
        var _etype1009 = 0;
        _rtmp31010 = input.readListBegin();
        _etype1009 = _rtmp31010.etype;
        _size1006 = _rtmp31010.size;
        for (var _i1011 = 0; _i1011 < _size1006; ++_i1011)
        {
          var elem1012 = null;
          elem1012 = new DocumentReassign();
          elem1012.read(input);
          this.documentReassign.push(elem1012);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.cardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_reassignDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_reassignDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.documentReassign !== null && this.documentReassign !== undefined) {
    output.writeFieldBegin('documentReassign', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.documentReassign.length);
    for (var iter1013 in this.documentReassign)
    {
      if (this.documentReassign.hasOwnProperty(iter1013))
      {
        iter1013 = this.documentReassign[iter1013];
        iter1013.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cardId !== null && this.cardId !== undefined) {
    output.writeFieldBegin('cardId', Thrift.Type.STRING, 4);
    output.writeString(this.cardId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_reassignDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentExecution]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_reassignDocument_result.prototype = {};
DocumentService_reassignDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1014 = 0;
        var _rtmp31018;
        this.success = [];
        var _etype1017 = 0;
        _rtmp31018 = input.readListBegin();
        _etype1017 = _rtmp31018.etype;
        _size1014 = _rtmp31018.size;
        for (var _i1019 = 0; _i1019 < _size1014; ++_i1019)
        {
          var elem1020 = null;
          elem1020 = new DocumentExecution();
          elem1020.read(input);
          this.success.push(elem1020);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_reassignDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_reassignDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1021 in this.success)
    {
      if (this.success.hasOwnProperty(iter1021))
      {
        iter1021 = this.success[iter1021];
        iter1021.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_revokeChildCards_args = function(args) {
  this.token = null;
  this.cardId = null;
  this.deleteCard = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.cardId !== undefined && args.cardId !== null) {
      this.cardId = args.cardId;
    }
    if (args.deleteCard !== undefined && args.deleteCard !== null) {
      this.deleteCard = args.deleteCard;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_revokeChildCards_args.prototype = {};
DocumentService_revokeChildCards_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteCard = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_revokeChildCards_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_revokeChildCards_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.cardId !== null && this.cardId !== undefined) {
    output.writeFieldBegin('cardId', Thrift.Type.STRING, 2);
    output.writeString(this.cardId);
    output.writeFieldEnd();
  }
  if (this.deleteCard !== null && this.deleteCard !== undefined) {
    output.writeFieldBegin('deleteCard', Thrift.Type.BOOL, 3);
    output.writeBool(this.deleteCard);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_revokeChildCards_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_revokeChildCards_result.prototype = {};
DocumentService_revokeChildCards_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_revokeChildCards_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_revokeChildCards_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createOrUpdateAutomaticDocumentReassign_args = function(args) {
  this.token = null;
  this.documentReassign = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentReassign !== undefined && args.documentReassign !== null) {
      this.documentReassign = new DocumentReassign(args.documentReassign);
    }
  }
};
DocumentService_createOrUpdateAutomaticDocumentReassign_args.prototype = {};
DocumentService_createOrUpdateAutomaticDocumentReassign_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.documentReassign = new DocumentReassign();
        this.documentReassign.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createOrUpdateAutomaticDocumentReassign_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createOrUpdateAutomaticDocumentReassign_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentReassign !== null && this.documentReassign !== undefined) {
    output.writeFieldBegin('documentReassign', Thrift.Type.STRUCT, 2);
    this.documentReassign.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createOrUpdateAutomaticDocumentReassign_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentReassign(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_createOrUpdateAutomaticDocumentReassign_result.prototype = {};
DocumentService_createOrUpdateAutomaticDocumentReassign_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentReassign();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createOrUpdateAutomaticDocumentReassign_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createOrUpdateAutomaticDocumentReassign_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_deleteAutomaticDocumentReassign_args = function(args) {
  this.token = null;
  this.documentReassignId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentReassignId !== undefined && args.documentReassignId !== null) {
      this.documentReassignId = args.documentReassignId;
    }
  }
};
DocumentService_deleteAutomaticDocumentReassign_args.prototype = {};
DocumentService_deleteAutomaticDocumentReassign_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentReassignId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_deleteAutomaticDocumentReassign_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_deleteAutomaticDocumentReassign_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentReassignId !== null && this.documentReassignId !== undefined) {
    output.writeFieldBegin('documentReassignId', Thrift.Type.STRING, 2);
    output.writeString(this.documentReassignId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_deleteAutomaticDocumentReassign_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_deleteAutomaticDocumentReassign_result.prototype = {};
DocumentService_deleteAutomaticDocumentReassign_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_deleteAutomaticDocumentReassign_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_deleteAutomaticDocumentReassign_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_changeReassignControl_args = function(args) {
  this.token = null;
  this.documentExecutionId = null;
  this.userId = null;
  this.reassignType = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentExecutionId !== undefined && args.documentExecutionId !== null) {
      this.documentExecutionId = args.documentExecutionId;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.reassignType !== undefined && args.reassignType !== null) {
      this.reassignType = args.reassignType;
    }
  }
};
DocumentService_changeReassignControl_args.prototype = {};
DocumentService_changeReassignControl_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentExecutionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.reassignType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_changeReassignControl_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_changeReassignControl_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentExecutionId !== null && this.documentExecutionId !== undefined) {
    output.writeFieldBegin('documentExecutionId', Thrift.Type.STRING, 2);
    output.writeString(this.documentExecutionId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 3);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.reassignType !== null && this.reassignType !== undefined) {
    output.writeFieldBegin('reassignType', Thrift.Type.I32, 4);
    output.writeI32(this.reassignType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_changeReassignControl_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentExecution(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_changeReassignControl_result.prototype = {};
DocumentService_changeReassignControl_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentExecution();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_changeReassignControl_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_changeReassignControl_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocumentExecutions_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.stageId = null;
  this.typeLink = null;
  this.filter = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.stageId !== undefined && args.stageId !== null) {
      this.stageId = args.stageId;
    }
    if (args.typeLink !== undefined && args.typeLink !== null) {
      this.typeLink = args.typeLink;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_getAllDocumentExecutions_args.prototype = {};
DocumentService_getAllDocumentExecutions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.typeLink = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocumentExecutions_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocumentExecutions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.stageId !== null && this.stageId !== undefined) {
    output.writeFieldBegin('stageId', Thrift.Type.STRING, 3);
    output.writeString(this.stageId);
    output.writeFieldEnd();
  }
  if (this.typeLink !== null && this.typeLink !== undefined) {
    output.writeFieldBegin('typeLink', Thrift.Type.I32, 4);
    output.writeI32(this.typeLink);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 5);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 6);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocumentExecutions_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentExecution]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getAllDocumentExecutions_result.prototype = {};
DocumentService_getAllDocumentExecutions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1022 = 0;
        var _rtmp31026;
        this.success = [];
        var _etype1025 = 0;
        _rtmp31026 = input.readListBegin();
        _etype1025 = _rtmp31026.etype;
        _size1022 = _rtmp31026.size;
        for (var _i1027 = 0; _i1027 < _size1022; ++_i1027)
        {
          var elem1028 = null;
          elem1028 = new DocumentExecution();
          elem1028.read(input);
          this.success.push(elem1028);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocumentExecutions_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocumentExecutions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1029 in this.success)
    {
      if (this.success.hasOwnProperty(iter1029))
      {
        iter1029 = this.success[iter1029];
        iter1029.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getDocumentExecution_args = function(args) {
  this.token = null;
  this.docExecutionId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docExecutionId !== undefined && args.docExecutionId !== null) {
      this.docExecutionId = args.docExecutionId;
    }
  }
};
DocumentService_getDocumentExecution_args.prototype = {};
DocumentService_getDocumentExecution_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docExecutionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getDocumentExecution_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getDocumentExecution_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docExecutionId !== null && this.docExecutionId !== undefined) {
    output.writeFieldBegin('docExecutionId', Thrift.Type.STRING, 2);
    output.writeString(this.docExecutionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getDocumentExecution_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentExecution(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getDocumentExecution_result.prototype = {};
DocumentService_getDocumentExecution_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentExecution();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getDocumentExecution_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getDocumentExecution_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_changeExecutorsForDocument_args = function(args) {
  this.token = null;
  this.docId = null;
  this.toAdd = null;
  this.toClose = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docId !== undefined && args.docId !== null) {
      this.docId = args.docId;
    }
    if (args.toAdd !== undefined && args.toAdd !== null) {
      this.toAdd = Thrift.copyList(args.toAdd, [DocumentReassign]);
    }
    if (args.toClose !== undefined && args.toClose !== null) {
      this.toClose = Thrift.copyList(args.toClose, [null]);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_changeExecutorsForDocument_args.prototype = {};
DocumentService_changeExecutorsForDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1030 = 0;
        var _rtmp31034;
        this.toAdd = [];
        var _etype1033 = 0;
        _rtmp31034 = input.readListBegin();
        _etype1033 = _rtmp31034.etype;
        _size1030 = _rtmp31034.size;
        for (var _i1035 = 0; _i1035 < _size1030; ++_i1035)
        {
          var elem1036 = null;
          elem1036 = new DocumentReassign();
          elem1036.read(input);
          this.toAdd.push(elem1036);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size1037 = 0;
        var _rtmp31041;
        this.toClose = [];
        var _etype1040 = 0;
        _rtmp31041 = input.readListBegin();
        _etype1040 = _rtmp31041.etype;
        _size1037 = _rtmp31041.size;
        for (var _i1042 = 0; _i1042 < _size1037; ++_i1042)
        {
          var elem1043 = null;
          elem1043 = input.readString().value;
          this.toClose.push(elem1043);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_changeExecutorsForDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_changeExecutorsForDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docId !== null && this.docId !== undefined) {
    output.writeFieldBegin('docId', Thrift.Type.STRING, 2);
    output.writeString(this.docId);
    output.writeFieldEnd();
  }
  if (this.toAdd !== null && this.toAdd !== undefined) {
    output.writeFieldBegin('toAdd', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.toAdd.length);
    for (var iter1044 in this.toAdd)
    {
      if (this.toAdd.hasOwnProperty(iter1044))
      {
        iter1044 = this.toAdd[iter1044];
        iter1044.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.toClose !== null && this.toClose !== undefined) {
    output.writeFieldBegin('toClose', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.toClose.length);
    for (var iter1045 in this.toClose)
    {
      if (this.toClose.hasOwnProperty(iter1045))
      {
        iter1045 = this.toClose[iter1045];
        output.writeString(iter1045);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 5);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_changeExecutorsForDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_changeExecutorsForDocument_result.prototype = {};
DocumentService_changeExecutorsForDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_changeExecutorsForDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_changeExecutorsForDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_forceStartMoveDocumentNextStage_args = function(args) {
  this.token = null;
  this.documentId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
  }
};
DocumentService_forceStartMoveDocumentNextStage_args.prototype = {};
DocumentService_forceStartMoveDocumentNextStage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_forceStartMoveDocumentNextStage_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_forceStartMoveDocumentNextStage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_forceStartMoveDocumentNextStage_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_forceStartMoveDocumentNextStage_result.prototype = {};
DocumentService_forceStartMoveDocumentNextStage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_forceStartMoveDocumentNextStage_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_forceStartMoveDocumentNextStage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createAttachmentFrom_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.cardId = null;
  this.registryId = null;
  this.attCreateInfoList = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.cardId !== undefined && args.cardId !== null) {
      this.cardId = args.cardId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.attCreateInfoList !== undefined && args.attCreateInfoList !== null) {
      this.attCreateInfoList = Thrift.copyList(args.attCreateInfoList, [AttCreateInfo]);
    }
  }
};
DocumentService_createAttachmentFrom_args.prototype = {};
DocumentService_createAttachmentFrom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size1046 = 0;
        var _rtmp31050;
        this.attCreateInfoList = [];
        var _etype1049 = 0;
        _rtmp31050 = input.readListBegin();
        _etype1049 = _rtmp31050.etype;
        _size1046 = _rtmp31050.size;
        for (var _i1051 = 0; _i1051 < _size1046; ++_i1051)
        {
          var elem1052 = null;
          elem1052 = new AttCreateInfo();
          elem1052.read(input);
          this.attCreateInfoList.push(elem1052);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createAttachmentFrom_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createAttachmentFrom_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.cardId !== null && this.cardId !== undefined) {
    output.writeFieldBegin('cardId', Thrift.Type.STRING, 3);
    output.writeString(this.cardId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.attCreateInfoList !== null && this.attCreateInfoList !== undefined) {
    output.writeFieldBegin('attCreateInfoList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.attCreateInfoList.length);
    for (var iter1053 in this.attCreateInfoList)
    {
      if (this.attCreateInfoList.hasOwnProperty(iter1053))
      {
        iter1053 = this.attCreateInfoList[iter1053];
        iter1053.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createAttachmentFrom_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Attachment]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_createAttachmentFrom_result.prototype = {};
DocumentService_createAttachmentFrom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1054 = 0;
        var _rtmp31058;
        this.success = [];
        var _etype1057 = 0;
        _rtmp31058 = input.readListBegin();
        _etype1057 = _rtmp31058.etype;
        _size1054 = _rtmp31058.size;
        for (var _i1059 = 0; _i1059 < _size1054; ++_i1059)
        {
          var elem1060 = null;
          elem1060 = new Attachment();
          elem1060.read(input);
          this.success.push(elem1060);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createAttachmentFrom_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createAttachmentFrom_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1061 in this.success)
    {
      if (this.success.hasOwnProperty(iter1061))
      {
        iter1061 = this.success[iter1061];
        iter1061.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createLoadableAttachment_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.fileName = null;
  this.totalSize = null;
  this.countPortions = null;
  this.cardId = null;
  this.attachmmentId = null;
  this.forDraft = null;
  this.registryId = null;
  this.editMode = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.fileName !== undefined && args.fileName !== null) {
      this.fileName = args.fileName;
    }
    if (args.totalSize !== undefined && args.totalSize !== null) {
      this.totalSize = args.totalSize;
    }
    if (args.countPortions !== undefined && args.countPortions !== null) {
      this.countPortions = args.countPortions;
    }
    if (args.cardId !== undefined && args.cardId !== null) {
      this.cardId = args.cardId;
    }
    if (args.attachmmentId !== undefined && args.attachmmentId !== null) {
      this.attachmmentId = args.attachmmentId;
    }
    if (args.forDraft !== undefined && args.forDraft !== null) {
      this.forDraft = args.forDraft;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.editMode !== undefined && args.editMode !== null) {
      this.editMode = args.editMode;
    }
  }
};
DocumentService_createLoadableAttachment_args.prototype = {};
DocumentService_createLoadableAttachment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.totalSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.countPortions = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.attachmmentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.forDraft = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.editMode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createLoadableAttachment_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createLoadableAttachment_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 3);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.totalSize !== null && this.totalSize !== undefined) {
    output.writeFieldBegin('totalSize', Thrift.Type.I64, 4);
    output.writeI64(this.totalSize);
    output.writeFieldEnd();
  }
  if (this.countPortions !== null && this.countPortions !== undefined) {
    output.writeFieldBegin('countPortions', Thrift.Type.I32, 5);
    output.writeI32(this.countPortions);
    output.writeFieldEnd();
  }
  if (this.cardId !== null && this.cardId !== undefined) {
    output.writeFieldBegin('cardId', Thrift.Type.STRING, 6);
    output.writeString(this.cardId);
    output.writeFieldEnd();
  }
  if (this.attachmmentId !== null && this.attachmmentId !== undefined) {
    output.writeFieldBegin('attachmmentId', Thrift.Type.STRING, 7);
    output.writeString(this.attachmmentId);
    output.writeFieldEnd();
  }
  if (this.forDraft !== null && this.forDraft !== undefined) {
    output.writeFieldBegin('forDraft', Thrift.Type.BOOL, 8);
    output.writeBool(this.forDraft);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 9);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.editMode !== null && this.editMode !== undefined) {
    output.writeFieldBegin('editMode', Thrift.Type.I32, 10);
    output.writeI32(this.editMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createLoadableAttachment_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_createLoadableAttachment_result.prototype = {};
DocumentService_createLoadableAttachment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createLoadableAttachment_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createLoadableAttachment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_uploadDocumentAttachmentPortions_args = function(args) {
  this.token = null;
  this.attachmentId = null;
  this.numberPortion = null;
  this.fileContentBytes = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.attachmentId !== undefined && args.attachmentId !== null) {
      this.attachmentId = args.attachmentId;
    }
    if (args.numberPortion !== undefined && args.numberPortion !== null) {
      this.numberPortion = args.numberPortion;
    }
    if (args.fileContentBytes !== undefined && args.fileContentBytes !== null) {
      this.fileContentBytes = args.fileContentBytes;
    }
  }
};
DocumentService_uploadDocumentAttachmentPortions_args.prototype = {};
DocumentService_uploadDocumentAttachmentPortions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.attachmentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numberPortion = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fileContentBytes = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_uploadDocumentAttachmentPortions_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_uploadDocumentAttachmentPortions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.attachmentId !== null && this.attachmentId !== undefined) {
    output.writeFieldBegin('attachmentId', Thrift.Type.STRING, 2);
    output.writeString(this.attachmentId);
    output.writeFieldEnd();
  }
  if (this.numberPortion !== null && this.numberPortion !== undefined) {
    output.writeFieldBegin('numberPortion', Thrift.Type.I32, 3);
    output.writeI32(this.numberPortion);
    output.writeFieldEnd();
  }
  if (this.fileContentBytes !== null && this.fileContentBytes !== undefined) {
    output.writeFieldBegin('fileContentBytes', Thrift.Type.STRING, 4);
    output.writeBinary(this.fileContentBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_uploadDocumentAttachmentPortions_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Attachment(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_uploadDocumentAttachmentPortions_result.prototype = {};
DocumentService_uploadDocumentAttachmentPortions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Attachment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_uploadDocumentAttachmentPortions_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_uploadDocumentAttachmentPortions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_downloadDocumentAttachment_args = function(args) {
  this.token = null;
  this.attachmentId = null;
  this.attachmentType = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.attachmentId !== undefined && args.attachmentId !== null) {
      this.attachmentId = args.attachmentId;
    }
    if (args.attachmentType !== undefined && args.attachmentType !== null) {
      this.attachmentType = args.attachmentType;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_downloadDocumentAttachment_args.prototype = {};
DocumentService_downloadDocumentAttachment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.attachmentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.attachmentType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_downloadDocumentAttachment_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_downloadDocumentAttachment_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.attachmentId !== null && this.attachmentId !== undefined) {
    output.writeFieldBegin('attachmentId', Thrift.Type.STRING, 2);
    output.writeString(this.attachmentId);
    output.writeFieldEnd();
  }
  if (this.attachmentType !== null && this.attachmentType !== undefined) {
    output.writeFieldBegin('attachmentType', Thrift.Type.I32, 3);
    output.writeI32(this.attachmentType);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_downloadDocumentAttachment_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_downloadDocumentAttachment_result.prototype = {};
DocumentService_downloadDocumentAttachment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_downloadDocumentAttachment_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_downloadDocumentAttachment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_addAttachmentsToDocument_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.attachmentId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.attachmentId !== undefined && args.attachmentId !== null) {
      this.attachmentId = Thrift.copyList(args.attachmentId, [null]);
    }
  }
};
DocumentService_addAttachmentsToDocument_args.prototype = {};
DocumentService_addAttachmentsToDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size1062 = 0;
        var _rtmp31066;
        this.attachmentId = [];
        var _etype1065 = 0;
        _rtmp31066 = input.readSetBegin();
        _etype1065 = _rtmp31066.etype;
        _size1062 = _rtmp31066.size;
        for (var _i1067 = 0; _i1067 < _size1062; ++_i1067)
        {
          var elem1068 = null;
          elem1068 = input.readString().value;
          this.attachmentId.push(elem1068);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_addAttachmentsToDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_addAttachmentsToDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.attachmentId !== null && this.attachmentId !== undefined) {
    output.writeFieldBegin('attachmentId', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.attachmentId.length);
    for (var iter1069 in this.attachmentId)
    {
      if (this.attachmentId.hasOwnProperty(iter1069))
      {
        iter1069 = this.attachmentId[iter1069];
        output.writeString(iter1069);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_addAttachmentsToDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_addAttachmentsToDocument_result.prototype = {};
DocumentService_addAttachmentsToDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_addAttachmentsToDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_addAttachmentsToDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_removeDocumentAttachment_args = function(args) {
  this.token = null;
  this.attachmentId = null;
  this.removeOldVersions = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.attachmentId !== undefined && args.attachmentId !== null) {
      this.attachmentId = args.attachmentId;
    }
    if (args.removeOldVersions !== undefined && args.removeOldVersions !== null) {
      this.removeOldVersions = args.removeOldVersions;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_removeDocumentAttachment_args.prototype = {};
DocumentService_removeDocumentAttachment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.attachmentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.removeOldVersions = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_removeDocumentAttachment_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_removeDocumentAttachment_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.attachmentId !== null && this.attachmentId !== undefined) {
    output.writeFieldBegin('attachmentId', Thrift.Type.STRING, 2);
    output.writeString(this.attachmentId);
    output.writeFieldEnd();
  }
  if (this.removeOldVersions !== null && this.removeOldVersions !== undefined) {
    output.writeFieldBegin('removeOldVersions', Thrift.Type.BOOL, 3);
    output.writeBool(this.removeOldVersions);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_removeDocumentAttachment_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_removeDocumentAttachment_result.prototype = {};
DocumentService_removeDocumentAttachment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_removeDocumentAttachment_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_removeDocumentAttachment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_markAsWaitForPublish_args = function(args) {
  this.token = null;
  this.attachmentId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.attachmentId !== undefined && args.attachmentId !== null) {
      this.attachmentId = args.attachmentId;
    }
  }
};
DocumentService_markAsWaitForPublish_args.prototype = {};
DocumentService_markAsWaitForPublish_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.attachmentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_markAsWaitForPublish_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_markAsWaitForPublish_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.attachmentId !== null && this.attachmentId !== undefined) {
    output.writeFieldBegin('attachmentId', Thrift.Type.STRING, 2);
    output.writeString(this.attachmentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_markAsWaitForPublish_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_markAsWaitForPublish_result.prototype = {};
DocumentService_markAsWaitForPublish_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_markAsWaitForPublish_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_markAsWaitForPublish_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_changeAttachmentEditMode_args = function(args) {
  this.token = null;
  this.attachmentId = null;
  this.editMode = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.attachmentId !== undefined && args.attachmentId !== null) {
      this.attachmentId = args.attachmentId;
    }
    if (args.editMode !== undefined && args.editMode !== null) {
      this.editMode = args.editMode;
    }
  }
};
DocumentService_changeAttachmentEditMode_args.prototype = {};
DocumentService_changeAttachmentEditMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.attachmentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.editMode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_changeAttachmentEditMode_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_changeAttachmentEditMode_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.attachmentId !== null && this.attachmentId !== undefined) {
    output.writeFieldBegin('attachmentId', Thrift.Type.STRING, 2);
    output.writeString(this.attachmentId);
    output.writeFieldEnd();
  }
  if (this.editMode !== null && this.editMode !== undefined) {
    output.writeFieldBegin('editMode', Thrift.Type.I32, 3);
    output.writeI32(this.editMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_changeAttachmentEditMode_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Attachment(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_changeAttachmentEditMode_result.prototype = {};
DocumentService_changeAttachmentEditMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Attachment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_changeAttachmentEditMode_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_changeAttachmentEditMode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getDocumentAttachments_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.latestOnly = null;
  this.filter = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.latestOnly !== undefined && args.latestOnly !== null) {
      this.latestOnly = args.latestOnly;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_getDocumentAttachments_args.prototype = {};
DocumentService_getDocumentAttachments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.latestOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getDocumentAttachments_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getDocumentAttachments_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.latestOnly !== null && this.latestOnly !== undefined) {
    output.writeFieldBegin('latestOnly', Thrift.Type.BOOL, 3);
    output.writeBool(this.latestOnly);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 5);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getDocumentAttachments_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Attachment]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getDocumentAttachments_result.prototype = {};
DocumentService_getDocumentAttachments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1070 = 0;
        var _rtmp31074;
        this.success = [];
        var _etype1073 = 0;
        _rtmp31074 = input.readListBegin();
        _etype1073 = _rtmp31074.etype;
        _size1070 = _rtmp31074.size;
        for (var _i1075 = 0; _i1075 < _size1070; ++_i1075)
        {
          var elem1076 = null;
          elem1076 = new Attachment();
          elem1076.read(input);
          this.success.push(elem1076);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getDocumentAttachments_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getDocumentAttachments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1077 in this.success)
    {
      if (this.success.hasOwnProperty(iter1077))
      {
        iter1077 = this.success[iter1077];
        iter1077.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getDocumentAttachmentById_args = function(args) {
  this.token = null;
  this.attachmentId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.attachmentId !== undefined && args.attachmentId !== null) {
      this.attachmentId = args.attachmentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_getDocumentAttachmentById_args.prototype = {};
DocumentService_getDocumentAttachmentById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.attachmentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getDocumentAttachmentById_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getDocumentAttachmentById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.attachmentId !== null && this.attachmentId !== undefined) {
    output.writeFieldBegin('attachmentId', Thrift.Type.STRING, 2);
    output.writeString(this.attachmentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getDocumentAttachmentById_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Attachment(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getDocumentAttachmentById_result.prototype = {};
DocumentService_getDocumentAttachmentById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Attachment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getDocumentAttachmentById_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getDocumentAttachmentById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocumentAttachmentVersions_args = function(args) {
  this.token = null;
  this.attachmentId = null;
  this.filter = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.attachmentId !== undefined && args.attachmentId !== null) {
      this.attachmentId = args.attachmentId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_getAllDocumentAttachmentVersions_args.prototype = {};
DocumentService_getAllDocumentAttachmentVersions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.attachmentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocumentAttachmentVersions_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocumentAttachmentVersions_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.attachmentId !== null && this.attachmentId !== undefined) {
    output.writeFieldBegin('attachmentId', Thrift.Type.STRING, 2);
    output.writeString(this.attachmentId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocumentAttachmentVersions_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Attachment]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getAllDocumentAttachmentVersions_result.prototype = {};
DocumentService_getAllDocumentAttachmentVersions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1078 = 0;
        var _rtmp31082;
        this.success = [];
        var _etype1081 = 0;
        _rtmp31082 = input.readListBegin();
        _etype1081 = _rtmp31082.etype;
        _size1078 = _rtmp31082.size;
        for (var _i1083 = 0; _i1083 < _size1078; ++_i1083)
        {
          var elem1084 = null;
          elem1084 = new Attachment();
          elem1084.read(input);
          this.success.push(elem1084);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocumentAttachmentVersions_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocumentAttachmentVersions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1085 in this.success)
    {
      if (this.success.hasOwnProperty(iter1085))
      {
        iter1085 = this.success[iter1085];
        iter1085.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createOrUpdateDocumentComment_args = function(args) {
  this.token = null;
  this.documentComment = null;
  this.addToComment = null;
  this.changeType = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentComment !== undefined && args.documentComment !== null) {
      this.documentComment = new DocumentComment(args.documentComment);
    }
    if (args.addToComment !== undefined && args.addToComment !== null) {
      this.addToComment = args.addToComment;
    }
    if (args.changeType !== undefined && args.changeType !== null) {
      this.changeType = args.changeType;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_createOrUpdateDocumentComment_args.prototype = {};
DocumentService_createOrUpdateDocumentComment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.documentComment = new DocumentComment();
        this.documentComment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.addToComment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.changeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createOrUpdateDocumentComment_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createOrUpdateDocumentComment_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentComment !== null && this.documentComment !== undefined) {
    output.writeFieldBegin('documentComment', Thrift.Type.STRUCT, 2);
    this.documentComment.write(output);
    output.writeFieldEnd();
  }
  if (this.addToComment !== null && this.addToComment !== undefined) {
    output.writeFieldBegin('addToComment', Thrift.Type.STRING, 3);
    output.writeString(this.addToComment);
    output.writeFieldEnd();
  }
  if (this.changeType !== null && this.changeType !== undefined) {
    output.writeFieldBegin('changeType', Thrift.Type.I32, 4);
    output.writeI32(this.changeType);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 5);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createOrUpdateDocumentComment_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentComment(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_createOrUpdateDocumentComment_result.prototype = {};
DocumentService_createOrUpdateDocumentComment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentComment();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createOrUpdateDocumentComment_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createOrUpdateDocumentComment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocumentComments_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.filter = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_getAllDocumentComments_args.prototype = {};
DocumentService_getAllDocumentComments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocumentComments_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocumentComments_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocumentComments_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentComment]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getAllDocumentComments_result.prototype = {};
DocumentService_getAllDocumentComments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1086 = 0;
        var _rtmp31090;
        this.success = [];
        var _etype1089 = 0;
        _rtmp31090 = input.readListBegin();
        _etype1089 = _rtmp31090.etype;
        _size1086 = _rtmp31090.size;
        for (var _i1091 = 0; _i1091 < _size1086; ++_i1091)
        {
          var elem1092 = null;
          elem1092 = new DocumentComment();
          elem1092.read(input);
          this.success.push(elem1092);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocumentComments_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocumentComments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1093 in this.success)
    {
      if (this.success.hasOwnProperty(iter1093))
      {
        iter1093 = this.success[iter1093];
        iter1093.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_deleteDocumentComment_args = function(args) {
  this.token = null;
  this.documentCommentId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentCommentId !== undefined && args.documentCommentId !== null) {
      this.documentCommentId = args.documentCommentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_deleteDocumentComment_args.prototype = {};
DocumentService_deleteDocumentComment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentCommentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_deleteDocumentComment_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_deleteDocumentComment_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentCommentId !== null && this.documentCommentId !== undefined) {
    output.writeFieldBegin('documentCommentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentCommentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_deleteDocumentComment_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_deleteDocumentComment_result.prototype = {};
DocumentService_deleteDocumentComment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_deleteDocumentComment_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_deleteDocumentComment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createOrUpdateDocumentContentItems_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.toAddOrUpdate = null;
  this.toRemove = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.toAddOrUpdate !== undefined && args.toAddOrUpdate !== null) {
      this.toAddOrUpdate = Thrift.copyList(args.toAddOrUpdate, [ContentItem]);
    }
    if (args.toRemove !== undefined && args.toRemove !== null) {
      this.toRemove = Thrift.copyList(args.toRemove, [null]);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_createOrUpdateDocumentContentItems_args.prototype = {};
DocumentService_createOrUpdateDocumentContentItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1094 = 0;
        var _rtmp31098;
        this.toAddOrUpdate = [];
        var _etype1097 = 0;
        _rtmp31098 = input.readListBegin();
        _etype1097 = _rtmp31098.etype;
        _size1094 = _rtmp31098.size;
        for (var _i1099 = 0; _i1099 < _size1094; ++_i1099)
        {
          var elem1100 = null;
          elem1100 = new ContentItem();
          elem1100.read(input);
          this.toAddOrUpdate.push(elem1100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size1101 = 0;
        var _rtmp31105;
        this.toRemove = [];
        var _etype1104 = 0;
        _rtmp31105 = input.readListBegin();
        _etype1104 = _rtmp31105.etype;
        _size1101 = _rtmp31105.size;
        for (var _i1106 = 0; _i1106 < _size1101; ++_i1106)
        {
          var elem1107 = null;
          elem1107 = input.readString().value;
          this.toRemove.push(elem1107);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createOrUpdateDocumentContentItems_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createOrUpdateDocumentContentItems_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.toAddOrUpdate !== null && this.toAddOrUpdate !== undefined) {
    output.writeFieldBegin('toAddOrUpdate', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.toAddOrUpdate.length);
    for (var iter1108 in this.toAddOrUpdate)
    {
      if (this.toAddOrUpdate.hasOwnProperty(iter1108))
      {
        iter1108 = this.toAddOrUpdate[iter1108];
        iter1108.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.toRemove !== null && this.toRemove !== undefined) {
    output.writeFieldBegin('toRemove', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.toRemove.length);
    for (var iter1109 in this.toRemove)
    {
      if (this.toRemove.hasOwnProperty(iter1109))
      {
        iter1109 = this.toRemove[iter1109];
        output.writeString(iter1109);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 5);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createOrUpdateDocumentContentItems_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ContentItem]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_createOrUpdateDocumentContentItems_result.prototype = {};
DocumentService_createOrUpdateDocumentContentItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1110 = 0;
        var _rtmp31114;
        this.success = [];
        var _etype1113 = 0;
        _rtmp31114 = input.readListBegin();
        _etype1113 = _rtmp31114.etype;
        _size1110 = _rtmp31114.size;
        for (var _i1115 = 0; _i1115 < _size1110; ++_i1115)
        {
          var elem1116 = null;
          elem1116 = new ContentItem();
          elem1116.read(input);
          this.success.push(elem1116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createOrUpdateDocumentContentItems_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createOrUpdateDocumentContentItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1117 in this.success)
    {
      if (this.success.hasOwnProperty(iter1117))
      {
        iter1117 = this.success[iter1117];
        iter1117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_deleteDocumentContentItem_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.contentItemKey = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.contentItemKey !== undefined && args.contentItemKey !== null) {
      this.contentItemKey = args.contentItemKey;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_deleteDocumentContentItem_args.prototype = {};
DocumentService_deleteDocumentContentItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contentItemKey = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_deleteDocumentContentItem_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_deleteDocumentContentItem_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.contentItemKey !== null && this.contentItemKey !== undefined) {
    output.writeFieldBegin('contentItemKey', Thrift.Type.STRING, 3);
    output.writeString(this.contentItemKey);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_deleteDocumentContentItem_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_deleteDocumentContentItem_result.prototype = {};
DocumentService_deleteDocumentContentItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_deleteDocumentContentItem_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_deleteDocumentContentItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createOrUpdateDocumentContentTab_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.documentContentTab = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.documentContentTab !== undefined && args.documentContentTab !== null) {
      this.documentContentTab = new ContentTab(args.documentContentTab);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_createOrUpdateDocumentContentTab_args.prototype = {};
DocumentService_createOrUpdateDocumentContentTab_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.documentContentTab = new ContentTab();
        this.documentContentTab.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createOrUpdateDocumentContentTab_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createOrUpdateDocumentContentTab_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.documentContentTab !== null && this.documentContentTab !== undefined) {
    output.writeFieldBegin('documentContentTab', Thrift.Type.STRUCT, 3);
    this.documentContentTab.write(output);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createOrUpdateDocumentContentTab_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ContentTab(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_createOrUpdateDocumentContentTab_result.prototype = {};
DocumentService_createOrUpdateDocumentContentTab_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ContentTab();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createOrUpdateDocumentContentTab_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createOrUpdateDocumentContentTab_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getDocumentContentTabsByFilter_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.filter = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_getDocumentContentTabsByFilter_args.prototype = {};
DocumentService_getDocumentContentTabsByFilter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getDocumentContentTabsByFilter_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getDocumentContentTabsByFilter_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getDocumentContentTabsByFilter_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ContentTab]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getDocumentContentTabsByFilter_result.prototype = {};
DocumentService_getDocumentContentTabsByFilter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1118 = 0;
        var _rtmp31122;
        this.success = [];
        var _etype1121 = 0;
        _rtmp31122 = input.readListBegin();
        _etype1121 = _rtmp31122.etype;
        _size1118 = _rtmp31122.size;
        for (var _i1123 = 0; _i1123 < _size1118; ++_i1123)
        {
          var elem1124 = null;
          elem1124 = new ContentTab();
          elem1124.read(input);
          this.success.push(elem1124);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getDocumentContentTabsByFilter_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getDocumentContentTabsByFilter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1125 in this.success)
    {
      if (this.success.hasOwnProperty(iter1125))
      {
        iter1125 = this.success[iter1125];
        iter1125.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_deleteDocumentContentTab_args = function(args) {
  this.token = null;
  this.documentContentTabId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentContentTabId !== undefined && args.documentContentTabId !== null) {
      this.documentContentTabId = args.documentContentTabId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_deleteDocumentContentTab_args.prototype = {};
DocumentService_deleteDocumentContentTab_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentContentTabId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_deleteDocumentContentTab_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_deleteDocumentContentTab_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentContentTabId !== null && this.documentContentTabId !== undefined) {
    output.writeFieldBegin('documentContentTabId', Thrift.Type.STRING, 2);
    output.writeString(this.documentContentTabId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_deleteDocumentContentTab_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_deleteDocumentContentTab_result.prototype = {};
DocumentService_deleteDocumentContentTab_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_deleteDocumentContentTab_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_deleteDocumentContentTab_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_documentToArchive_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_documentToArchive_args.prototype = {};
DocumentService_documentToArchive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_documentToArchive_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_documentToArchive_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_documentToArchive_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_documentToArchive_result.prototype = {};
DocumentService_documentToArchive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_documentToArchive_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_documentToArchive_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllResponsibleForDocument_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.registryId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentService_getAllResponsibleForDocument_args.prototype = {};
DocumentService_getAllResponsibleForDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllResponsibleForDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllResponsibleForDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllResponsibleForDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserOrGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getAllResponsibleForDocument_result.prototype = {};
DocumentService_getAllResponsibleForDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size1126 = 0;
        var _rtmp31130;
        this.success = [];
        var _etype1129 = 0;
        _rtmp31130 = input.readSetBegin();
        _etype1129 = _rtmp31130.etype;
        _size1126 = _rtmp31130.size;
        for (var _i1131 = 0; _i1131 < _size1126; ++_i1131)
        {
          var elem1132 = null;
          elem1132 = new UserOrGroup();
          elem1132.read(input);
          this.success.push(elem1132);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllResponsibleForDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllResponsibleForDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1133 in this.success)
    {
      if (this.success.hasOwnProperty(iter1133))
      {
        iter1133 = this.success[iter1133];
        iter1133.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_addResponsibleForDocument_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.users = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [UserOrGroup]);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_addResponsibleForDocument_args.prototype = {};
DocumentService_addResponsibleForDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1134 = 0;
        var _rtmp31138;
        this.users = [];
        var _etype1137 = 0;
        _rtmp31138 = input.readListBegin();
        _etype1137 = _rtmp31138.etype;
        _size1134 = _rtmp31138.size;
        for (var _i1139 = 0; _i1139 < _size1134; ++_i1139)
        {
          var elem1140 = null;
          elem1140 = new UserOrGroup();
          elem1140.read(input);
          this.users.push(elem1140);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_addResponsibleForDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_addResponsibleForDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
    for (var iter1141 in this.users)
    {
      if (this.users.hasOwnProperty(iter1141))
      {
        iter1141 = this.users[iter1141];
        iter1141.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_addResponsibleForDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_addResponsibleForDocument_result.prototype = {};
DocumentService_addResponsibleForDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_addResponsibleForDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_addResponsibleForDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_removeResponsibleForDocument_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.users = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [UserOrGroup]);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_removeResponsibleForDocument_args.prototype = {};
DocumentService_removeResponsibleForDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1142 = 0;
        var _rtmp31146;
        this.users = [];
        var _etype1145 = 0;
        _rtmp31146 = input.readListBegin();
        _etype1145 = _rtmp31146.etype;
        _size1142 = _rtmp31146.size;
        for (var _i1147 = 0; _i1147 < _size1142; ++_i1147)
        {
          var elem1148 = null;
          elem1148 = new UserOrGroup();
          elem1148.read(input);
          this.users.push(elem1148);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_removeResponsibleForDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_removeResponsibleForDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
    for (var iter1149 in this.users)
    {
      if (this.users.hasOwnProperty(iter1149))
      {
        iter1149 = this.users[iter1149];
        iter1149.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_removeResponsibleForDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_removeResponsibleForDocument_result.prototype = {};
DocumentService_removeResponsibleForDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_removeResponsibleForDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_removeResponsibleForDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getHistory_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.registryId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentService_getHistory_args.prototype = {};
DocumentService_getHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getHistory_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getHistory_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getHistory_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [History]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getHistory_result.prototype = {};
DocumentService_getHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1150 = 0;
        var _rtmp31154;
        this.success = [];
        var _etype1153 = 0;
        _rtmp31154 = input.readListBegin();
        _etype1153 = _rtmp31154.etype;
        _size1150 = _rtmp31154.size;
        for (var _i1155 = 0; _i1155 < _size1150; ++_i1155)
        {
          var elem1156 = null;
          elem1156 = new History();
          elem1156.read(input);
          this.success.push(elem1156);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getHistory_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1157 in this.success)
    {
      if (this.success.hasOwnProperty(iter1157))
      {
        iter1157 = this.success[iter1157];
        iter1157.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getCountHistory_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.registryId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentService_getCountHistory_args.prototype = {};
DocumentService_getCountHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getCountHistory_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getCountHistory_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getCountHistory_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getCountHistory_result.prototype = {};
DocumentService_getCountHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getCountHistory_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getCountHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllNews_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentService_getAllNews_args.prototype = {};
DocumentService_getAllNews_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllNews_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllNews_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllNews_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [News]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getAllNews_result.prototype = {};
DocumentService_getAllNews_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1158 = 0;
        var _rtmp31162;
        this.success = [];
        var _etype1161 = 0;
        _rtmp31162 = input.readListBegin();
        _etype1161 = _rtmp31162.etype;
        _size1158 = _rtmp31162.size;
        for (var _i1163 = 0; _i1163 < _size1158; ++_i1163)
        {
          var elem1164 = null;
          elem1164 = new News();
          elem1164.read(input);
          this.success.push(elem1164);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllNews_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllNews_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1165 in this.success)
    {
      if (this.success.hasOwnProperty(iter1165))
      {
        iter1165 = this.success[iter1165];
        iter1165.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getTasksByDate_args = function(args) {
  this.token = null;
  this.date = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
  }
};
DocumentService_getTasksByDate_args.prototype = {};
DocumentService_getTasksByDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getTasksByDate_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getTasksByDate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 2);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getTasksByDate_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getTasksByDate_result.prototype = {};
DocumentService_getTasksByDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1166 = 0;
        var _rtmp31170;
        this.success = {};
        var _ktype1167 = 0;
        var _vtype1168 = 0;
        _rtmp31170 = input.readMapBegin();
        _ktype1167 = _rtmp31170.ktype;
        _vtype1168 = _rtmp31170.vtype;
        _size1166 = _rtmp31170.size;
        for (var _i1171 = 0; _i1171 < _size1166; ++_i1171)
        {
          if (_i1171 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1172 = null;
          var val1173 = null;
          key1172 = input.readI32().value;
          var _size1174 = 0;
          var _rtmp31178;
          val1173 = [];
          var _etype1177 = 0;
          _rtmp31178 = input.readListBegin();
          _etype1177 = _rtmp31178.etype;
          _size1174 = _rtmp31178.size;
          for (var _i1179 = 0; _i1179 < _size1174; ++_i1179)
          {
            var elem1180 = null;
            elem1180 = input.readString().value;
            val1173.push(elem1180);
          }
          input.readListEnd();
          this.success[key1172] = val1173;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getTasksByDate_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getTasksByDate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter1181 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1181))
      {
        var viter1182 = this.success[kiter1181];
        output.writeI32(kiter1181);
        output.writeListBegin(Thrift.Type.STRING, viter1182.length);
        for (var iter1183 in viter1182)
        {
          if (viter1182.hasOwnProperty(iter1183))
          {
            iter1183 = viter1182[iter1183];
            output.writeString(iter1183);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_generateDocumentNumber_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_generateDocumentNumber_args.prototype = {};
DocumentService_generateDocumentNumber_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_generateDocumentNumber_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_generateDocumentNumber_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 3);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_generateDocumentNumber_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_generateDocumentNumber_result.prototype = {};
DocumentService_generateDocumentNumber_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_generateDocumentNumber_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_generateDocumentNumber_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_setDocumentViewed_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.viewed = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.viewed !== undefined && args.viewed !== null) {
      this.viewed = args.viewed;
    }
  }
};
DocumentService_setDocumentViewed_args.prototype = {};
DocumentService_setDocumentViewed_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.viewed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_setDocumentViewed_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_setDocumentViewed_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.viewed !== null && this.viewed !== undefined) {
    output.writeFieldBegin('viewed', Thrift.Type.BOOL, 3);
    output.writeBool(this.viewed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_setDocumentViewed_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_setDocumentViewed_result.prototype = {};
DocumentService_setDocumentViewed_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_setDocumentViewed_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_setDocumentViewed_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocumentRelations_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.filter = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_getAllDocumentRelations_args.prototype = {};
DocumentService_getAllDocumentRelations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocumentRelations_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocumentRelations_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllDocumentRelations_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentRelation]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getAllDocumentRelations_result.prototype = {};
DocumentService_getAllDocumentRelations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1184 = 0;
        var _rtmp31188;
        this.success = [];
        var _etype1187 = 0;
        _rtmp31188 = input.readListBegin();
        _etype1187 = _rtmp31188.etype;
        _size1184 = _rtmp31188.size;
        for (var _i1189 = 0; _i1189 < _size1184; ++_i1189)
        {
          var elem1190 = null;
          elem1190 = new DocumentRelation();
          elem1190.read(input);
          this.success.push(elem1190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllDocumentRelations_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllDocumentRelations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1191 in this.success)
    {
      if (this.success.hasOwnProperty(iter1191))
      {
        iter1191 = this.success[iter1191];
        iter1191.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createRelations_args = function(args) {
  this.token = null;
  this.firstDocumentId = null;
  this.secondDocumentId = null;
  this.relationType = null;
  this.resolution = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.firstDocumentId !== undefined && args.firstDocumentId !== null) {
      this.firstDocumentId = args.firstDocumentId;
    }
    if (args.secondDocumentId !== undefined && args.secondDocumentId !== null) {
      this.secondDocumentId = args.secondDocumentId;
    }
    if (args.relationType !== undefined && args.relationType !== null) {
      this.relationType = args.relationType;
    }
    if (args.resolution !== undefined && args.resolution !== null) {
      this.resolution = args.resolution;
    }
  }
};
DocumentService_createRelations_args.prototype = {};
DocumentService_createRelations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.firstDocumentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.secondDocumentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.relationType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.resolution = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createRelations_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createRelations_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.firstDocumentId !== null && this.firstDocumentId !== undefined) {
    output.writeFieldBegin('firstDocumentId', Thrift.Type.STRING, 2);
    output.writeString(this.firstDocumentId);
    output.writeFieldEnd();
  }
  if (this.secondDocumentId !== null && this.secondDocumentId !== undefined) {
    output.writeFieldBegin('secondDocumentId', Thrift.Type.STRING, 3);
    output.writeString(this.secondDocumentId);
    output.writeFieldEnd();
  }
  if (this.relationType !== null && this.relationType !== undefined) {
    output.writeFieldBegin('relationType', Thrift.Type.I32, 4);
    output.writeI32(this.relationType);
    output.writeFieldEnd();
  }
  if (this.resolution !== null && this.resolution !== undefined) {
    output.writeFieldBegin('resolution', Thrift.Type.STRING, 5);
    output.writeString(this.resolution);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createRelations_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentRelation]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_createRelations_result.prototype = {};
DocumentService_createRelations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1192 = 0;
        var _rtmp31196;
        this.success = [];
        var _etype1195 = 0;
        _rtmp31196 = input.readListBegin();
        _etype1195 = _rtmp31196.etype;
        _size1192 = _rtmp31196.size;
        for (var _i1197 = 0; _i1197 < _size1192; ++_i1197)
        {
          var elem1198 = null;
          elem1198 = new DocumentRelation();
          elem1198.read(input);
          this.success.push(elem1198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createRelations_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createRelations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1199 in this.success)
    {
      if (this.success.hasOwnProperty(iter1199))
      {
        iter1199 = this.success[iter1199];
        iter1199.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_removeRelations_args = function(args) {
  this.token = null;
  this.firstDocumentId = null;
  this.secondDocumentId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.firstDocumentId !== undefined && args.firstDocumentId !== null) {
      this.firstDocumentId = args.firstDocumentId;
    }
    if (args.secondDocumentId !== undefined && args.secondDocumentId !== null) {
      this.secondDocumentId = args.secondDocumentId;
    }
  }
};
DocumentService_removeRelations_args.prototype = {};
DocumentService_removeRelations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.firstDocumentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.secondDocumentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_removeRelations_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_removeRelations_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.firstDocumentId !== null && this.firstDocumentId !== undefined) {
    output.writeFieldBegin('firstDocumentId', Thrift.Type.STRING, 2);
    output.writeString(this.firstDocumentId);
    output.writeFieldEnd();
  }
  if (this.secondDocumentId !== null && this.secondDocumentId !== undefined) {
    output.writeFieldBegin('secondDocumentId', Thrift.Type.STRING, 3);
    output.writeString(this.secondDocumentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_removeRelations_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_removeRelations_result.prototype = {};
DocumentService_removeRelations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_removeRelations_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_removeRelations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_changeSubStatus_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.subStatus = null;
  this.comment = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.subStatus !== undefined && args.subStatus !== null) {
      this.subStatus = args.subStatus;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_changeSubStatus_args.prototype = {};
DocumentService_changeSubStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.subStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_changeSubStatus_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_changeSubStatus_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.subStatus !== null && this.subStatus !== undefined) {
    output.writeFieldBegin('subStatus', Thrift.Type.I32, 3);
    output.writeI32(this.subStatus);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 5);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_changeSubStatus_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_changeSubStatus_result.prototype = {};
DocumentService_changeSubStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_changeSubStatus_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_changeSubStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_increaseDeadlineForDocumentOrDocumentExecution_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.documentExecution = null;
  this.deadlineTime = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.documentExecution !== undefined && args.documentExecution !== null) {
      this.documentExecution = args.documentExecution;
    }
    if (args.deadlineTime !== undefined && args.deadlineTime !== null) {
      this.deadlineTime = args.deadlineTime;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_increaseDeadlineForDocumentOrDocumentExecution_args.prototype = {};
DocumentService_increaseDeadlineForDocumentOrDocumentExecution_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.documentExecution = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.deadlineTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_increaseDeadlineForDocumentOrDocumentExecution_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_increaseDeadlineForDocumentOrDocumentExecution_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.documentExecution !== null && this.documentExecution !== undefined) {
    output.writeFieldBegin('documentExecution', Thrift.Type.STRING, 3);
    output.writeString(this.documentExecution);
    output.writeFieldEnd();
  }
  if (this.deadlineTime !== null && this.deadlineTime !== undefined) {
    output.writeFieldBegin('deadlineTime', Thrift.Type.I64, 4);
    output.writeI64(this.deadlineTime);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 5);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_increaseDeadlineForDocumentOrDocumentExecution_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_increaseDeadlineForDocumentOrDocumentExecution_result.prototype = {};
DocumentService_increaseDeadlineForDocumentOrDocumentExecution_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_increaseDeadlineForDocumentOrDocumentExecution_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_increaseDeadlineForDocumentOrDocumentExecution_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_runProcessDocumentOnStageWithAutoLinkJob_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
DocumentService_runProcessDocumentOnStageWithAutoLinkJob_args.prototype = {};
DocumentService_runProcessDocumentOnStageWithAutoLinkJob_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_runProcessDocumentOnStageWithAutoLinkJob_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_runProcessDocumentOnStageWithAutoLinkJob_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_runProcessDocumentOnStageWithAutoLinkJob_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_runProcessDocumentOnStageWithAutoLinkJob_result.prototype = {};
DocumentService_runProcessDocumentOnStageWithAutoLinkJob_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_runProcessDocumentOnStageWithAutoLinkJob_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_runProcessDocumentOnStageWithAutoLinkJob_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_addAdditionalConfirmers_args = function(args) {
  this.token = null;
  this.cardId = null;
  this.users = null;
  this.deadlineDate = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.cardId !== undefined && args.cardId !== null) {
      this.cardId = args.cardId;
    }
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [null]);
    }
    if (args.deadlineDate !== undefined && args.deadlineDate !== null) {
      this.deadlineDate = args.deadlineDate;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_addAdditionalConfirmers_args.prototype = {};
DocumentService_addAdditionalConfirmers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1200 = 0;
        var _rtmp31204;
        this.users = [];
        var _etype1203 = 0;
        _rtmp31204 = input.readListBegin();
        _etype1203 = _rtmp31204.etype;
        _size1200 = _rtmp31204.size;
        for (var _i1205 = 0; _i1205 < _size1200; ++_i1205)
        {
          var elem1206 = null;
          elem1206 = input.readString().value;
          this.users.push(elem1206);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.deadlineDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_addAdditionalConfirmers_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_addAdditionalConfirmers_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.cardId !== null && this.cardId !== undefined) {
    output.writeFieldBegin('cardId', Thrift.Type.STRING, 2);
    output.writeString(this.cardId);
    output.writeFieldEnd();
  }
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.users.length);
    for (var iter1207 in this.users)
    {
      if (this.users.hasOwnProperty(iter1207))
      {
        iter1207 = this.users[iter1207];
        output.writeString(iter1207);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deadlineDate !== null && this.deadlineDate !== undefined) {
    output.writeFieldBegin('deadlineDate', Thrift.Type.I64, 4);
    output.writeI64(this.deadlineDate);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 5);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_addAdditionalConfirmers_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_addAdditionalConfirmers_result.prototype = {};
DocumentService_addAdditionalConfirmers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_addAdditionalConfirmers_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_addAdditionalConfirmers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_setAdditionalDecision_args = function(args) {
  this.token = null;
  this.userDecision = null;
  this.cardId = null;
  this.comment = null;
  this.returnToParentStage = null;
  this.signature = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userDecision !== undefined && args.userDecision !== null) {
      this.userDecision = Thrift.copyMap(args.userDecision, [null]);
    }
    if (args.cardId !== undefined && args.cardId !== null) {
      this.cardId = args.cardId;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.returnToParentStage !== undefined && args.returnToParentStage !== null) {
      this.returnToParentStage = args.returnToParentStage;
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
  }
};
DocumentService_setAdditionalDecision_args.prototype = {};
DocumentService_setAdditionalDecision_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size1208 = 0;
        var _rtmp31212;
        this.userDecision = {};
        var _ktype1209 = 0;
        var _vtype1210 = 0;
        _rtmp31212 = input.readMapBegin();
        _ktype1209 = _rtmp31212.ktype;
        _vtype1210 = _rtmp31212.vtype;
        _size1208 = _rtmp31212.size;
        for (var _i1213 = 0; _i1213 < _size1208; ++_i1213)
        {
          if (_i1213 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1214 = null;
          var val1215 = null;
          key1214 = input.readString().value;
          val1215 = input.readString().value;
          this.userDecision[key1214] = val1215;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.returnToParentStage = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_setAdditionalDecision_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_setAdditionalDecision_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userDecision !== null && this.userDecision !== undefined) {
    output.writeFieldBegin('userDecision', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.userDecision));
    for (var kiter1216 in this.userDecision)
    {
      if (this.userDecision.hasOwnProperty(kiter1216))
      {
        var viter1217 = this.userDecision[kiter1216];
        output.writeString(kiter1216);
        output.writeString(viter1217);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.cardId !== null && this.cardId !== undefined) {
    output.writeFieldBegin('cardId', Thrift.Type.STRING, 3);
    output.writeString(this.cardId);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.returnToParentStage !== null && this.returnToParentStage !== undefined) {
    output.writeFieldBegin('returnToParentStage', Thrift.Type.BOOL, 5);
    output.writeBool(this.returnToParentStage);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 6);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_setAdditionalDecision_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Document(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_setAdditionalDecision_result.prototype = {};
DocumentService_setAdditionalDecision_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Document();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_setAdditionalDecision_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_setAdditionalDecision_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_revokeDecision_args = function(args) {
  this.token = null;
  this.documentReassign = null;
  this.cardId = null;
  this.comment = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentReassign !== undefined && args.documentReassign !== null) {
      this.documentReassign = Thrift.copyList(args.documentReassign, [DocumentReassign]);
    }
    if (args.cardId !== undefined && args.cardId !== null) {
      this.cardId = args.cardId;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
DocumentService_revokeDecision_args.prototype = {};
DocumentService_revokeDecision_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1218 = 0;
        var _rtmp31222;
        this.documentReassign = [];
        var _etype1221 = 0;
        _rtmp31222 = input.readListBegin();
        _etype1221 = _rtmp31222.etype;
        _size1218 = _rtmp31222.size;
        for (var _i1223 = 0; _i1223 < _size1218; ++_i1223)
        {
          var elem1224 = null;
          elem1224 = new DocumentReassign();
          elem1224.read(input);
          this.documentReassign.push(elem1224);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cardId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_revokeDecision_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_revokeDecision_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentReassign !== null && this.documentReassign !== undefined) {
    output.writeFieldBegin('documentReassign', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.documentReassign.length);
    for (var iter1225 in this.documentReassign)
    {
      if (this.documentReassign.hasOwnProperty(iter1225))
      {
        iter1225 = this.documentReassign[iter1225];
        iter1225.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cardId !== null && this.cardId !== undefined) {
    output.writeFieldBegin('cardId', Thrift.Type.STRING, 3);
    output.writeString(this.cardId);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_revokeDecision_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Document(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_revokeDecision_result.prototype = {};
DocumentService_revokeDecision_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Document();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_revokeDecision_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_revokeDecision_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllOpenDocumentExecutionsStatistic_args = function(args) {
  this.token = null;
  this.userId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
DocumentService_getAllOpenDocumentExecutionsStatistic_args.prototype = {};
DocumentService_getAllOpenDocumentExecutionsStatistic_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllOpenDocumentExecutionsStatistic_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllOpenDocumentExecutionsStatistic_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getAllOpenDocumentExecutionsStatistic_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getAllOpenDocumentExecutionsStatistic_result.prototype = {};
DocumentService_getAllOpenDocumentExecutionsStatistic_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1226 = 0;
        var _rtmp31230;
        this.success = {};
        var _ktype1227 = 0;
        var _vtype1228 = 0;
        _rtmp31230 = input.readMapBegin();
        _ktype1227 = _rtmp31230.ktype;
        _vtype1228 = _rtmp31230.vtype;
        _size1226 = _rtmp31230.size;
        for (var _i1231 = 0; _i1231 < _size1226; ++_i1231)
        {
          if (_i1231 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1232 = null;
          var val1233 = null;
          key1232 = input.readI32().value;
          val1233 = input.readI32().value;
          this.success[key1232] = val1233;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getAllOpenDocumentExecutionsStatistic_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getAllOpenDocumentExecutionsStatistic_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I32, Thrift.objectLength(this.success));
    for (var kiter1234 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1234))
      {
        var viter1235 = this.success[kiter1234];
        output.writeI32(kiter1234);
        output.writeI32(viter1235);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_changeControlForDocument_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.control = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.control !== undefined && args.control !== null) {
      this.control = args.control;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_changeControlForDocument_args.prototype = {};
DocumentService_changeControlForDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.control = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_changeControlForDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_changeControlForDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.control !== null && this.control !== undefined) {
    output.writeFieldBegin('control', Thrift.Type.BOOL, 3);
    output.writeBool(this.control);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_changeControlForDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_changeControlForDocument_result.prototype = {};
DocumentService_changeControlForDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_changeControlForDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_changeControlForDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_addTagsToDocument_args = function(args) {
  this.token = null;
  this.docId = null;
  this.tags = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docId !== undefined && args.docId !== null) {
      this.docId = args.docId;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [null]);
    }
  }
};
DocumentService_addTagsToDocument_args.prototype = {};
DocumentService_addTagsToDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size1236 = 0;
        var _rtmp31240;
        this.tags = [];
        var _etype1239 = 0;
        _rtmp31240 = input.readSetBegin();
        _etype1239 = _rtmp31240.etype;
        _size1236 = _rtmp31240.size;
        for (var _i1241 = 0; _i1241 < _size1236; ++_i1241)
        {
          var elem1242 = null;
          elem1242 = input.readString().value;
          this.tags.push(elem1242);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_addTagsToDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_addTagsToDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docId !== null && this.docId !== undefined) {
    output.writeFieldBegin('docId', Thrift.Type.STRING, 2);
    output.writeString(this.docId);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter1243 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter1243))
      {
        iter1243 = this.tags[iter1243];
        output.writeString(iter1243);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_addTagsToDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_addTagsToDocument_result.prototype = {};
DocumentService_addTagsToDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_addTagsToDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_addTagsToDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_removeTagsToDocument_args = function(args) {
  this.token = null;
  this.docId = null;
  this.tags = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docId !== undefined && args.docId !== null) {
      this.docId = args.docId;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [null]);
    }
  }
};
DocumentService_removeTagsToDocument_args.prototype = {};
DocumentService_removeTagsToDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size1244 = 0;
        var _rtmp31248;
        this.tags = [];
        var _etype1247 = 0;
        _rtmp31248 = input.readSetBegin();
        _etype1247 = _rtmp31248.etype;
        _size1244 = _rtmp31248.size;
        for (var _i1249 = 0; _i1249 < _size1244; ++_i1249)
        {
          var elem1250 = null;
          elem1250 = input.readString().value;
          this.tags.push(elem1250);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_removeTagsToDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_removeTagsToDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docId !== null && this.docId !== undefined) {
    output.writeFieldBegin('docId', Thrift.Type.STRING, 2);
    output.writeString(this.docId);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter1251 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter1251))
      {
        iter1251 = this.tags[iter1251];
        output.writeString(iter1251);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_removeTagsToDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_removeTagsToDocument_result.prototype = {};
DocumentService_removeTagsToDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_removeTagsToDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_removeTagsToDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_addExecutorsToStage_args = function(args) {
  this.token = null;
  this.docId = null;
  this.documentReassign = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docId !== undefined && args.docId !== null) {
      this.docId = args.docId;
    }
    if (args.documentReassign !== undefined && args.documentReassign !== null) {
      this.documentReassign = Thrift.copyList(args.documentReassign, [DocumentReassign]);
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_addExecutorsToStage_args.prototype = {};
DocumentService_addExecutorsToStage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1252 = 0;
        var _rtmp31256;
        this.documentReassign = [];
        var _etype1255 = 0;
        _rtmp31256 = input.readListBegin();
        _etype1255 = _rtmp31256.etype;
        _size1252 = _rtmp31256.size;
        for (var _i1257 = 0; _i1257 < _size1252; ++_i1257)
        {
          var elem1258 = null;
          elem1258 = new DocumentReassign();
          elem1258.read(input);
          this.documentReassign.push(elem1258);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_addExecutorsToStage_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_addExecutorsToStage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docId !== null && this.docId !== undefined) {
    output.writeFieldBegin('docId', Thrift.Type.STRING, 2);
    output.writeString(this.docId);
    output.writeFieldEnd();
  }
  if (this.documentReassign !== null && this.documentReassign !== undefined) {
    output.writeFieldBegin('documentReassign', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.documentReassign.length);
    for (var iter1259 in this.documentReassign)
    {
      if (this.documentReassign.hasOwnProperty(iter1259))
      {
        iter1259 = this.documentReassign[iter1259];
        iter1259.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 4);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_addExecutorsToStage_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentExecution]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_addExecutorsToStage_result.prototype = {};
DocumentService_addExecutorsToStage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1260 = 0;
        var _rtmp31264;
        this.success = [];
        var _etype1263 = 0;
        _rtmp31264 = input.readListBegin();
        _etype1263 = _rtmp31264.etype;
        _size1260 = _rtmp31264.size;
        for (var _i1265 = 0; _i1265 < _size1260; ++_i1265)
        {
          var elem1266 = null;
          elem1266 = new DocumentExecution();
          elem1266.read(input);
          this.success.push(elem1266);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_addExecutorsToStage_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_addExecutorsToStage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1267 in this.success)
    {
      if (this.success.hasOwnProperty(iter1267))
      {
        iter1267 = this.success[iter1267];
        iter1267.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getCountDocsByFilterNoPermission_args = function(args) {
  this.token = null;
  this.patternGroupId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.patternGroupId !== undefined && args.patternGroupId !== null) {
      this.patternGroupId = args.patternGroupId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentService_getCountDocsByFilterNoPermission_args.prototype = {};
DocumentService_getCountDocsByFilterNoPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.patternGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getCountDocsByFilterNoPermission_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getCountDocsByFilterNoPermission_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.patternGroupId !== null && this.patternGroupId !== undefined) {
    output.writeFieldBegin('patternGroupId', Thrift.Type.STRING, 2);
    output.writeString(this.patternGroupId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getCountDocsByFilterNoPermission_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getCountDocsByFilterNoPermission_result.prototype = {};
DocumentService_getCountDocsByFilterNoPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getCountDocsByFilterNoPermission_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getCountDocsByFilterNoPermission_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getTinyDocsByFilterNoPermission_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
DocumentService_getTinyDocsByFilterNoPermission_args.prototype = {};
DocumentService_getTinyDocsByFilterNoPermission_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getTinyDocsByFilterNoPermission_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getTinyDocsByFilterNoPermission_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_getTinyDocsByFilterNoPermission_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Document]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_getTinyDocsByFilterNoPermission_result.prototype = {};
DocumentService_getTinyDocsByFilterNoPermission_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1268 = 0;
        var _rtmp31272;
        this.success = [];
        var _etype1271 = 0;
        _rtmp31272 = input.readListBegin();
        _etype1271 = _rtmp31272.etype;
        _size1268 = _rtmp31272.size;
        for (var _i1273 = 0; _i1273 < _size1268; ++_i1273)
        {
          var elem1274 = null;
          elem1274 = new Document();
          elem1274.read(input);
          this.success.push(elem1274);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_getTinyDocsByFilterNoPermission_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_getTinyDocsByFilterNoPermission_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1275 in this.success)
    {
      if (this.success.hasOwnProperty(iter1275))
      {
        iter1275 = this.success[iter1275];
        iter1275.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_changeRegistrationInfoForDocument_args = function(args) {
  this.token = null;
  this.documentId = null;
  this.newRegistrationDate = null;
  this.newRegistrationNumber = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
    if (args.newRegistrationDate !== undefined && args.newRegistrationDate !== null) {
      this.newRegistrationDate = args.newRegistrationDate;
    }
    if (args.newRegistrationNumber !== undefined && args.newRegistrationNumber !== null) {
      this.newRegistrationNumber = args.newRegistrationNumber;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
DocumentService_changeRegistrationInfoForDocument_args.prototype = {};
DocumentService_changeRegistrationInfoForDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.newRegistrationDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.newRegistrationNumber = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_changeRegistrationInfoForDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_changeRegistrationInfoForDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  if (this.newRegistrationDate !== null && this.newRegistrationDate !== undefined) {
    output.writeFieldBegin('newRegistrationDate', Thrift.Type.I64, 3);
    output.writeI64(this.newRegistrationDate);
    output.writeFieldEnd();
  }
  if (this.newRegistrationNumber !== null && this.newRegistrationNumber !== undefined) {
    output.writeFieldBegin('newRegistrationNumber', Thrift.Type.STRING, 4);
    output.writeString(this.newRegistrationNumber);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 5);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_changeRegistrationInfoForDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_changeRegistrationInfoForDocument_result.prototype = {};
DocumentService_changeRegistrationInfoForDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_changeRegistrationInfoForDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_changeRegistrationInfoForDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createChatForDocument_args = function(args) {
  this.token = null;
  this.documentId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.documentId !== undefined && args.documentId !== null) {
      this.documentId = args.documentId;
    }
  }
};
DocumentService_createChatForDocument_args.prototype = {};
DocumentService_createChatForDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.documentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createChatForDocument_args.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createChatForDocument_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.documentId !== null && this.documentId !== undefined) {
    output.writeFieldBegin('documentId', Thrift.Type.STRING, 2);
    output.writeString(this.documentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentService_createChatForDocument_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
DocumentService_createChatForDocument_result.prototype = {};
DocumentService_createChatForDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DocumentService_createChatForDocument_result.prototype.write = function(output) {
  output.writeStructBegin('DocumentService_createChatForDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DocumentServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
DocumentServiceClient.prototype = {};
DocumentServiceClient.prototype.calculatePermissions = function(token, documentId, registryId, callback) {
  if (callback === undefined) {
    this.send_calculatePermissions(token, documentId, registryId);
    return this.recv_calculatePermissions();
  } else {
    var postData = this.send_calculatePermissions(token, documentId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_calculatePermissions);
  }
};

DocumentServiceClient.prototype.send_calculatePermissions = function(token, documentId, registryId, callback) {
  this.output.writeMessageBegin('calculatePermissions', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    registryId: registryId
  };
  var args = new DocumentService_calculatePermissions_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_calculatePermissions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_calculatePermissions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'calculatePermissions failed: unknown result';
};
DocumentServiceClient.prototype.createOrUpdateDocument = function(token, document, registryId, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateDocument(token, document, registryId);
    return this.recv_createOrUpdateDocument();
  } else {
    var postData = this.send_createOrUpdateDocument(token, document, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateDocument);
  }
};

DocumentServiceClient.prototype.send_createOrUpdateDocument = function(token, document, registryId, callback) {
  this.output.writeMessageBegin('createOrUpdateDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    document: document,
    registryId: registryId
  };
  var args = new DocumentService_createOrUpdateDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_createOrUpdateDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_createOrUpdateDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateDocument failed: unknown result';
};
DocumentServiceClient.prototype.updateDocument = function(token, document, registryId, addedResponsibles, removedResponsibles, addedSecurityClassificationIds, removedSecurityClassificationIds, callback) {
  if (callback === undefined) {
    this.send_updateDocument(token, document, registryId, addedResponsibles, removedResponsibles, addedSecurityClassificationIds, removedSecurityClassificationIds);
    return this.recv_updateDocument();
  } else {
    var postData = this.send_updateDocument(token, document, registryId, addedResponsibles, removedResponsibles, addedSecurityClassificationIds, removedSecurityClassificationIds, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateDocument);
  }
};

DocumentServiceClient.prototype.send_updateDocument = function(token, document, registryId, addedResponsibles, removedResponsibles, addedSecurityClassificationIds, removedSecurityClassificationIds, callback) {
  this.output.writeMessageBegin('updateDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    document: document,
    registryId: registryId,
    addedResponsibles: addedResponsibles,
    removedResponsibles: removedResponsibles,
    addedSecurityClassificationIds: addedSecurityClassificationIds,
    removedSecurityClassificationIds: removedSecurityClassificationIds
  };
  var args = new DocumentService_updateDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_updateDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_updateDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateDocument failed: unknown result';
};
DocumentServiceClient.prototype.createDocument = function(token, document, parentDocumentId, users, contentItems, securityClassificationsId, attachmentIds, callback) {
  if (callback === undefined) {
    this.send_createDocument(token, document, parentDocumentId, users, contentItems, securityClassificationsId, attachmentIds);
    return this.recv_createDocument();
  } else {
    var postData = this.send_createDocument(token, document, parentDocumentId, users, contentItems, securityClassificationsId, attachmentIds, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createDocument);
  }
};

DocumentServiceClient.prototype.send_createDocument = function(token, document, parentDocumentId, users, contentItems, securityClassificationsId, attachmentIds, callback) {
  this.output.writeMessageBegin('createDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    document: document,
    parentDocumentId: parentDocumentId,
    users: users,
    contentItems: contentItems,
    securityClassificationsId: securityClassificationsId,
    attachmentIds: attachmentIds
  };
  var args = new DocumentService_createDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_createDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_createDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createDocument failed: unknown result';
};
DocumentServiceClient.prototype.getDocument = function(token, documentId, registryId, decrypt, callback) {
  if (callback === undefined) {
    this.send_getDocument(token, documentId, registryId, decrypt);
    return this.recv_getDocument();
  } else {
    var postData = this.send_getDocument(token, documentId, registryId, decrypt, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDocument);
  }
};

DocumentServiceClient.prototype.send_getDocument = function(token, documentId, registryId, decrypt, callback) {
  this.output.writeMessageBegin('getDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    registryId: registryId,
    decrypt: decrypt
  };
  var args = new DocumentService_getDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDocument failed: unknown result';
};
DocumentServiceClient.prototype.getAllDocuments = function(token, registryId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllDocuments(token, registryId, filter);
    return this.recv_getAllDocuments();
  } else {
    var postData = this.send_getAllDocuments(token, registryId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocuments);
  }
};

DocumentServiceClient.prototype.send_getAllDocuments = function(token, registryId, filter, callback) {
  this.output.writeMessageBegin('getAllDocuments', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    registryId: registryId,
    filter: filter
  };
  var args = new DocumentService_getAllDocuments_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getAllDocuments = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getAllDocuments_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocuments failed: unknown result';
};
DocumentServiceClient.prototype.getCountAllDocuments = function(token, registryId, filter, callback) {
  if (callback === undefined) {
    this.send_getCountAllDocuments(token, registryId, filter);
    return this.recv_getCountAllDocuments();
  } else {
    var postData = this.send_getCountAllDocuments(token, registryId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCountAllDocuments);
  }
};

DocumentServiceClient.prototype.send_getCountAllDocuments = function(token, registryId, filter, callback) {
  this.output.writeMessageBegin('getCountAllDocuments', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    registryId: registryId,
    filter: filter
  };
  var args = new DocumentService_getCountAllDocuments_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getCountAllDocuments = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getCountAllDocuments_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAllDocuments failed: unknown result';
};
DocumentServiceClient.prototype.deleteDocument = function(token, documentId, registryId, callback) {
  if (callback === undefined) {
    this.send_deleteDocument(token, documentId, registryId);
    return this.recv_deleteDocument();
  } else {
    var postData = this.send_deleteDocument(token, documentId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteDocument);
  }
};

DocumentServiceClient.prototype.send_deleteDocument = function(token, documentId, registryId, callback) {
  this.output.writeMessageBegin('deleteDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    registryId: registryId
  };
  var args = new DocumentService_deleteDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_deleteDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_deleteDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteDocument failed: unknown result';
};
DocumentServiceClient.prototype.getAllPassedStages = function(token, documentId, registryId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllPassedStages(token, documentId, registryId, filter);
    return this.recv_getAllPassedStages();
  } else {
    var postData = this.send_getAllPassedStages(token, documentId, registryId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllPassedStages);
  }
};

DocumentServiceClient.prototype.send_getAllPassedStages = function(token, documentId, registryId, filter, callback) {
  this.output.writeMessageBegin('getAllPassedStages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    registryId: registryId,
    filter: filter
  };
  var args = new DocumentService_getAllPassedStages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getAllPassedStages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getAllPassedStages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllPassedStages failed: unknown result';
};
DocumentServiceClient.prototype.getExecutionTree = function(token, documentId, registryId, iteration, filter, callback) {
  if (callback === undefined) {
    this.send_getExecutionTree(token, documentId, registryId, iteration, filter);
    return this.recv_getExecutionTree();
  } else {
    var postData = this.send_getExecutionTree(token, documentId, registryId, iteration, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getExecutionTree);
  }
};

DocumentServiceClient.prototype.send_getExecutionTree = function(token, documentId, registryId, iteration, filter, callback) {
  this.output.writeMessageBegin('getExecutionTree', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    registryId: registryId,
    iteration: iteration,
    filter: filter
  };
  var args = new DocumentService_getExecutionTree_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getExecutionTree = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getExecutionTree_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getExecutionTree failed: unknown result';
};
DocumentServiceClient.prototype.getActiveStages = function(token, documentId, registryId, callback) {
  if (callback === undefined) {
    this.send_getActiveStages(token, documentId, registryId);
    return this.recv_getActiveStages();
  } else {
    var postData = this.send_getActiveStages(token, documentId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getActiveStages);
  }
};

DocumentServiceClient.prototype.send_getActiveStages = function(token, documentId, registryId, callback) {
  this.output.writeMessageBegin('getActiveStages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    registryId: registryId
  };
  var args = new DocumentService_getActiveStages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getActiveStages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getActiveStages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getActiveStages failed: unknown result';
};
DocumentServiceClient.prototype.getCountPeoplesWhenRenderedDecision = function(token, documentId, stageId, registryId, callback) {
  if (callback === undefined) {
    this.send_getCountPeoplesWhenRenderedDecision(token, documentId, stageId, registryId);
    return this.recv_getCountPeoplesWhenRenderedDecision();
  } else {
    var postData = this.send_getCountPeoplesWhenRenderedDecision(token, documentId, stageId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCountPeoplesWhenRenderedDecision);
  }
};

DocumentServiceClient.prototype.send_getCountPeoplesWhenRenderedDecision = function(token, documentId, stageId, registryId, callback) {
  this.output.writeMessageBegin('getCountPeoplesWhenRenderedDecision', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    stageId: stageId,
    registryId: registryId
  };
  var args = new DocumentService_getCountPeoplesWhenRenderedDecision_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getCountPeoplesWhenRenderedDecision = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getCountPeoplesWhenRenderedDecision_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountPeoplesWhenRenderedDecision failed: unknown result';
};
DocumentServiceClient.prototype.setDocumentDecision = function(token, documentId, decision, documentComment, force, signature, cardId, registryId, callback) {
  if (callback === undefined) {
    this.send_setDocumentDecision(token, documentId, decision, documentComment, force, signature, cardId, registryId);
    return this.recv_setDocumentDecision();
  } else {
    var postData = this.send_setDocumentDecision(token, documentId, decision, documentComment, force, signature, cardId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setDocumentDecision);
  }
};

DocumentServiceClient.prototype.send_setDocumentDecision = function(token, documentId, decision, documentComment, force, signature, cardId, registryId, callback) {
  this.output.writeMessageBegin('setDocumentDecision', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    decision: decision,
    documentComment: documentComment,
    force: force,
    signature: signature,
    cardId: cardId,
    registryId: registryId
  };
  var args = new DocumentService_setDocumentDecision_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_setDocumentDecision = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_setDocumentDecision_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setDocumentDecision failed: unknown result';
};
DocumentServiceClient.prototype.approveDocumentDecision = function(token, executionId, callback) {
  if (callback === undefined) {
    this.send_approveDocumentDecision(token, executionId);
    return this.recv_approveDocumentDecision();
  } else {
    var postData = this.send_approveDocumentDecision(token, executionId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_approveDocumentDecision);
  }
};

DocumentServiceClient.prototype.send_approveDocumentDecision = function(token, executionId, callback) {
  this.output.writeMessageBegin('approveDocumentDecision', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    executionId: executionId
  };
  var args = new DocumentService_approveDocumentDecision_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_approveDocumentDecision = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_approveDocumentDecision_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'approveDocumentDecision failed: unknown result';
};
DocumentServiceClient.prototype.shareDocument = function(token, documentId, registryId, usersOrGroups, callback) {
  if (callback === undefined) {
    this.send_shareDocument(token, documentId, registryId, usersOrGroups);
    return this.recv_shareDocument();
  } else {
    var postData = this.send_shareDocument(token, documentId, registryId, usersOrGroups, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_shareDocument);
  }
};

DocumentServiceClient.prototype.send_shareDocument = function(token, documentId, registryId, usersOrGroups, callback) {
  this.output.writeMessageBegin('shareDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    registryId: registryId,
    usersOrGroups: usersOrGroups
  };
  var args = new DocumentService_shareDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_shareDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_shareDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shareDocument failed: unknown result';
};
DocumentServiceClient.prototype.revokeDocument = function(token, documentId, usersOrGroups, registryId, callback) {
  if (callback === undefined) {
    this.send_revokeDocument(token, documentId, usersOrGroups, registryId);
    return this.recv_revokeDocument();
  } else {
    var postData = this.send_revokeDocument(token, documentId, usersOrGroups, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_revokeDocument);
  }
};

DocumentServiceClient.prototype.send_revokeDocument = function(token, documentId, usersOrGroups, registryId, callback) {
  this.output.writeMessageBegin('revokeDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    usersOrGroups: usersOrGroups,
    registryId: registryId
  };
  var args = new DocumentService_revokeDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_revokeDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_revokeDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'revokeDocument failed: unknown result';
};
DocumentServiceClient.prototype.getAllDocumentSharings = function(token, documentId, registryId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllDocumentSharings(token, documentId, registryId, filter);
    return this.recv_getAllDocumentSharings();
  } else {
    var postData = this.send_getAllDocumentSharings(token, documentId, registryId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocumentSharings);
  }
};

DocumentServiceClient.prototype.send_getAllDocumentSharings = function(token, documentId, registryId, filter, callback) {
  this.output.writeMessageBegin('getAllDocumentSharings', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    registryId: registryId,
    filter: filter
  };
  var args = new DocumentService_getAllDocumentSharings_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getAllDocumentSharings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getAllDocumentSharings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocumentSharings failed: unknown result';
};
DocumentServiceClient.prototype.getAllDocumentReassign = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllDocumentReassign(token, filter);
    return this.recv_getAllDocumentReassign();
  } else {
    var postData = this.send_getAllDocumentReassign(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocumentReassign);
  }
};

DocumentServiceClient.prototype.send_getAllDocumentReassign = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllDocumentReassign', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new DocumentService_getAllDocumentReassign_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getAllDocumentReassign = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getAllDocumentReassign_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocumentReassign failed: unknown result';
};
DocumentServiceClient.prototype.reassignDocument = function(token, documentId, documentReassign, cardId, callback) {
  if (callback === undefined) {
    this.send_reassignDocument(token, documentId, documentReassign, cardId);
    return this.recv_reassignDocument();
  } else {
    var postData = this.send_reassignDocument(token, documentId, documentReassign, cardId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_reassignDocument);
  }
};

DocumentServiceClient.prototype.send_reassignDocument = function(token, documentId, documentReassign, cardId, callback) {
  this.output.writeMessageBegin('reassignDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    documentReassign: documentReassign,
    cardId: cardId
  };
  var args = new DocumentService_reassignDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_reassignDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_reassignDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reassignDocument failed: unknown result';
};
DocumentServiceClient.prototype.revokeChildCards = function(token, cardId, deleteCard, registryId, callback) {
  if (callback === undefined) {
    this.send_revokeChildCards(token, cardId, deleteCard, registryId);
    return this.recv_revokeChildCards();
  } else {
    var postData = this.send_revokeChildCards(token, cardId, deleteCard, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_revokeChildCards);
  }
};

DocumentServiceClient.prototype.send_revokeChildCards = function(token, cardId, deleteCard, registryId, callback) {
  this.output.writeMessageBegin('revokeChildCards', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    cardId: cardId,
    deleteCard: deleteCard,
    registryId: registryId
  };
  var args = new DocumentService_revokeChildCards_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_revokeChildCards = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_revokeChildCards_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'revokeChildCards failed: unknown result';
};
DocumentServiceClient.prototype.createOrUpdateAutomaticDocumentReassign = function(token, documentReassign, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateAutomaticDocumentReassign(token, documentReassign);
    return this.recv_createOrUpdateAutomaticDocumentReassign();
  } else {
    var postData = this.send_createOrUpdateAutomaticDocumentReassign(token, documentReassign, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateAutomaticDocumentReassign);
  }
};

DocumentServiceClient.prototype.send_createOrUpdateAutomaticDocumentReassign = function(token, documentReassign, callback) {
  this.output.writeMessageBegin('createOrUpdateAutomaticDocumentReassign', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentReassign: documentReassign
  };
  var args = new DocumentService_createOrUpdateAutomaticDocumentReassign_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_createOrUpdateAutomaticDocumentReassign = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_createOrUpdateAutomaticDocumentReassign_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateAutomaticDocumentReassign failed: unknown result';
};
DocumentServiceClient.prototype.deleteAutomaticDocumentReassign = function(token, documentReassignId, callback) {
  if (callback === undefined) {
    this.send_deleteAutomaticDocumentReassign(token, documentReassignId);
    return this.recv_deleteAutomaticDocumentReassign();
  } else {
    var postData = this.send_deleteAutomaticDocumentReassign(token, documentReassignId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteAutomaticDocumentReassign);
  }
};

DocumentServiceClient.prototype.send_deleteAutomaticDocumentReassign = function(token, documentReassignId, callback) {
  this.output.writeMessageBegin('deleteAutomaticDocumentReassign', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentReassignId: documentReassignId
  };
  var args = new DocumentService_deleteAutomaticDocumentReassign_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_deleteAutomaticDocumentReassign = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_deleteAutomaticDocumentReassign_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteAutomaticDocumentReassign failed: unknown result';
};
DocumentServiceClient.prototype.changeReassignControl = function(token, documentExecutionId, userId, reassignType, callback) {
  if (callback === undefined) {
    this.send_changeReassignControl(token, documentExecutionId, userId, reassignType);
    return this.recv_changeReassignControl();
  } else {
    var postData = this.send_changeReassignControl(token, documentExecutionId, userId, reassignType, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeReassignControl);
  }
};

DocumentServiceClient.prototype.send_changeReassignControl = function(token, documentExecutionId, userId, reassignType, callback) {
  this.output.writeMessageBegin('changeReassignControl', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentExecutionId: documentExecutionId,
    userId: userId,
    reassignType: reassignType
  };
  var args = new DocumentService_changeReassignControl_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_changeReassignControl = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_changeReassignControl_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeReassignControl failed: unknown result';
};
DocumentServiceClient.prototype.getAllDocumentExecutions = function(token, documentId, stageId, typeLink, filter, registryId, callback) {
  if (callback === undefined) {
    this.send_getAllDocumentExecutions(token, documentId, stageId, typeLink, filter, registryId);
    return this.recv_getAllDocumentExecutions();
  } else {
    var postData = this.send_getAllDocumentExecutions(token, documentId, stageId, typeLink, filter, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocumentExecutions);
  }
};

DocumentServiceClient.prototype.send_getAllDocumentExecutions = function(token, documentId, stageId, typeLink, filter, registryId, callback) {
  this.output.writeMessageBegin('getAllDocumentExecutions', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    stageId: stageId,
    typeLink: typeLink,
    filter: filter,
    registryId: registryId
  };
  var args = new DocumentService_getAllDocumentExecutions_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getAllDocumentExecutions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getAllDocumentExecutions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocumentExecutions failed: unknown result';
};
DocumentServiceClient.prototype.getDocumentExecution = function(token, docExecutionId, callback) {
  if (callback === undefined) {
    this.send_getDocumentExecution(token, docExecutionId);
    return this.recv_getDocumentExecution();
  } else {
    var postData = this.send_getDocumentExecution(token, docExecutionId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDocumentExecution);
  }
};

DocumentServiceClient.prototype.send_getDocumentExecution = function(token, docExecutionId, callback) {
  this.output.writeMessageBegin('getDocumentExecution', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docExecutionId: docExecutionId
  };
  var args = new DocumentService_getDocumentExecution_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getDocumentExecution = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getDocumentExecution_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDocumentExecution failed: unknown result';
};
DocumentServiceClient.prototype.changeExecutorsForDocument = function(token, docId, toAdd, toClose, registryId, callback) {
  if (callback === undefined) {
    this.send_changeExecutorsForDocument(token, docId, toAdd, toClose, registryId);
    return this.recv_changeExecutorsForDocument();
  } else {
    var postData = this.send_changeExecutorsForDocument(token, docId, toAdd, toClose, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeExecutorsForDocument);
  }
};

DocumentServiceClient.prototype.send_changeExecutorsForDocument = function(token, docId, toAdd, toClose, registryId, callback) {
  this.output.writeMessageBegin('changeExecutorsForDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docId: docId,
    toAdd: toAdd,
    toClose: toClose,
    registryId: registryId
  };
  var args = new DocumentService_changeExecutorsForDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_changeExecutorsForDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_changeExecutorsForDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeExecutorsForDocument failed: unknown result';
};
DocumentServiceClient.prototype.forceStartMoveDocumentNextStage = function(token, documentId, callback) {
  if (callback === undefined) {
    this.send_forceStartMoveDocumentNextStage(token, documentId);
    return this.recv_forceStartMoveDocumentNextStage();
  } else {
    var postData = this.send_forceStartMoveDocumentNextStage(token, documentId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_forceStartMoveDocumentNextStage);
  }
};

DocumentServiceClient.prototype.send_forceStartMoveDocumentNextStage = function(token, documentId, callback) {
  this.output.writeMessageBegin('forceStartMoveDocumentNextStage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId
  };
  var args = new DocumentService_forceStartMoveDocumentNextStage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_forceStartMoveDocumentNextStage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_forceStartMoveDocumentNextStage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'forceStartMoveDocumentNextStage failed: unknown result';
};
DocumentServiceClient.prototype.createAttachmentFrom = function(token, documentId, cardId, registryId, attCreateInfoList, callback) {
  if (callback === undefined) {
    this.send_createAttachmentFrom(token, documentId, cardId, registryId, attCreateInfoList);
    return this.recv_createAttachmentFrom();
  } else {
    var postData = this.send_createAttachmentFrom(token, documentId, cardId, registryId, attCreateInfoList, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createAttachmentFrom);
  }
};

DocumentServiceClient.prototype.send_createAttachmentFrom = function(token, documentId, cardId, registryId, attCreateInfoList, callback) {
  this.output.writeMessageBegin('createAttachmentFrom', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    cardId: cardId,
    registryId: registryId,
    attCreateInfoList: attCreateInfoList
  };
  var args = new DocumentService_createAttachmentFrom_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_createAttachmentFrom = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_createAttachmentFrom_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createAttachmentFrom failed: unknown result';
};
DocumentServiceClient.prototype.createLoadableAttachment = function(token, documentId, fileName, totalSize, countPortions, cardId, attachmmentId, forDraft, registryId, editMode, callback) {
  if (callback === undefined) {
    this.send_createLoadableAttachment(token, documentId, fileName, totalSize, countPortions, cardId, attachmmentId, forDraft, registryId, editMode);
    return this.recv_createLoadableAttachment();
  } else {
    var postData = this.send_createLoadableAttachment(token, documentId, fileName, totalSize, countPortions, cardId, attachmmentId, forDraft, registryId, editMode, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createLoadableAttachment);
  }
};

DocumentServiceClient.prototype.send_createLoadableAttachment = function(token, documentId, fileName, totalSize, countPortions, cardId, attachmmentId, forDraft, registryId, editMode, callback) {
  this.output.writeMessageBegin('createLoadableAttachment', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    fileName: fileName,
    totalSize: totalSize,
    countPortions: countPortions,
    cardId: cardId,
    attachmmentId: attachmmentId,
    forDraft: forDraft,
    registryId: registryId,
    editMode: editMode
  };
  var args = new DocumentService_createLoadableAttachment_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_createLoadableAttachment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_createLoadableAttachment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createLoadableAttachment failed: unknown result';
};
DocumentServiceClient.prototype.uploadDocumentAttachmentPortions = function(token, attachmentId, numberPortion, fileContentBytes, callback) {
  if (callback === undefined) {
    this.send_uploadDocumentAttachmentPortions(token, attachmentId, numberPortion, fileContentBytes);
    return this.recv_uploadDocumentAttachmentPortions();
  } else {
    var postData = this.send_uploadDocumentAttachmentPortions(token, attachmentId, numberPortion, fileContentBytes, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_uploadDocumentAttachmentPortions);
  }
};

DocumentServiceClient.prototype.send_uploadDocumentAttachmentPortions = function(token, attachmentId, numberPortion, fileContentBytes, callback) {
  this.output.writeMessageBegin('uploadDocumentAttachmentPortions', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    attachmentId: attachmentId,
    numberPortion: numberPortion,
    fileContentBytes: fileContentBytes
  };
  var args = new DocumentService_uploadDocumentAttachmentPortions_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_uploadDocumentAttachmentPortions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_uploadDocumentAttachmentPortions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'uploadDocumentAttachmentPortions failed: unknown result';
};
DocumentServiceClient.prototype.downloadDocumentAttachment = function(token, attachmentId, attachmentType, registryId, callback) {
  if (callback === undefined) {
    this.send_downloadDocumentAttachment(token, attachmentId, attachmentType, registryId);
    return this.recv_downloadDocumentAttachment();
  } else {
    var postData = this.send_downloadDocumentAttachment(token, attachmentId, attachmentType, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_downloadDocumentAttachment);
  }
};

DocumentServiceClient.prototype.send_downloadDocumentAttachment = function(token, attachmentId, attachmentType, registryId, callback) {
  this.output.writeMessageBegin('downloadDocumentAttachment', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    attachmentId: attachmentId,
    attachmentType: attachmentType,
    registryId: registryId
  };
  var args = new DocumentService_downloadDocumentAttachment_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_downloadDocumentAttachment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_downloadDocumentAttachment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'downloadDocumentAttachment failed: unknown result';
};
DocumentServiceClient.prototype.addAttachmentsToDocument = function(token, documentId, attachmentId, callback) {
  if (callback === undefined) {
    this.send_addAttachmentsToDocument(token, documentId, attachmentId);
    return this.recv_addAttachmentsToDocument();
  } else {
    var postData = this.send_addAttachmentsToDocument(token, documentId, attachmentId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addAttachmentsToDocument);
  }
};

DocumentServiceClient.prototype.send_addAttachmentsToDocument = function(token, documentId, attachmentId, callback) {
  this.output.writeMessageBegin('addAttachmentsToDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    attachmentId: attachmentId
  };
  var args = new DocumentService_addAttachmentsToDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_addAttachmentsToDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_addAttachmentsToDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addAttachmentsToDocument failed: unknown result';
};
DocumentServiceClient.prototype.removeDocumentAttachment = function(token, attachmentId, removeOldVersions, registryId, callback) {
  if (callback === undefined) {
    this.send_removeDocumentAttachment(token, attachmentId, removeOldVersions, registryId);
    return this.recv_removeDocumentAttachment();
  } else {
    var postData = this.send_removeDocumentAttachment(token, attachmentId, removeOldVersions, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeDocumentAttachment);
  }
};

DocumentServiceClient.prototype.send_removeDocumentAttachment = function(token, attachmentId, removeOldVersions, registryId, callback) {
  this.output.writeMessageBegin('removeDocumentAttachment', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    attachmentId: attachmentId,
    removeOldVersions: removeOldVersions,
    registryId: registryId
  };
  var args = new DocumentService_removeDocumentAttachment_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_removeDocumentAttachment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_removeDocumentAttachment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeDocumentAttachment failed: unknown result';
};
DocumentServiceClient.prototype.markAsWaitForPublish = function(token, attachmentId, callback) {
  if (callback === undefined) {
    this.send_markAsWaitForPublish(token, attachmentId);
    return this.recv_markAsWaitForPublish();
  } else {
    var postData = this.send_markAsWaitForPublish(token, attachmentId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_markAsWaitForPublish);
  }
};

DocumentServiceClient.prototype.send_markAsWaitForPublish = function(token, attachmentId, callback) {
  this.output.writeMessageBegin('markAsWaitForPublish', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    attachmentId: attachmentId
  };
  var args = new DocumentService_markAsWaitForPublish_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_markAsWaitForPublish = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_markAsWaitForPublish_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'markAsWaitForPublish failed: unknown result';
};
DocumentServiceClient.prototype.changeAttachmentEditMode = function(token, attachmentId, editMode, callback) {
  if (callback === undefined) {
    this.send_changeAttachmentEditMode(token, attachmentId, editMode);
    return this.recv_changeAttachmentEditMode();
  } else {
    var postData = this.send_changeAttachmentEditMode(token, attachmentId, editMode, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeAttachmentEditMode);
  }
};

DocumentServiceClient.prototype.send_changeAttachmentEditMode = function(token, attachmentId, editMode, callback) {
  this.output.writeMessageBegin('changeAttachmentEditMode', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    attachmentId: attachmentId,
    editMode: editMode
  };
  var args = new DocumentService_changeAttachmentEditMode_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_changeAttachmentEditMode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_changeAttachmentEditMode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeAttachmentEditMode failed: unknown result';
};
DocumentServiceClient.prototype.getDocumentAttachments = function(token, documentId, latestOnly, filter, registryId, callback) {
  if (callback === undefined) {
    this.send_getDocumentAttachments(token, documentId, latestOnly, filter, registryId);
    return this.recv_getDocumentAttachments();
  } else {
    var postData = this.send_getDocumentAttachments(token, documentId, latestOnly, filter, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDocumentAttachments);
  }
};

DocumentServiceClient.prototype.send_getDocumentAttachments = function(token, documentId, latestOnly, filter, registryId, callback) {
  this.output.writeMessageBegin('getDocumentAttachments', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    latestOnly: latestOnly,
    filter: filter,
    registryId: registryId
  };
  var args = new DocumentService_getDocumentAttachments_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getDocumentAttachments = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getDocumentAttachments_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDocumentAttachments failed: unknown result';
};
DocumentServiceClient.prototype.getDocumentAttachmentById = function(token, attachmentId, registryId, callback) {
  if (callback === undefined) {
    this.send_getDocumentAttachmentById(token, attachmentId, registryId);
    return this.recv_getDocumentAttachmentById();
  } else {
    var postData = this.send_getDocumentAttachmentById(token, attachmentId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDocumentAttachmentById);
  }
};

DocumentServiceClient.prototype.send_getDocumentAttachmentById = function(token, attachmentId, registryId, callback) {
  this.output.writeMessageBegin('getDocumentAttachmentById', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    attachmentId: attachmentId,
    registryId: registryId
  };
  var args = new DocumentService_getDocumentAttachmentById_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getDocumentAttachmentById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getDocumentAttachmentById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDocumentAttachmentById failed: unknown result';
};
DocumentServiceClient.prototype.getAllDocumentAttachmentVersions = function(token, attachmentId, filter, registryId, callback) {
  if (callback === undefined) {
    this.send_getAllDocumentAttachmentVersions(token, attachmentId, filter, registryId);
    return this.recv_getAllDocumentAttachmentVersions();
  } else {
    var postData = this.send_getAllDocumentAttachmentVersions(token, attachmentId, filter, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocumentAttachmentVersions);
  }
};

DocumentServiceClient.prototype.send_getAllDocumentAttachmentVersions = function(token, attachmentId, filter, registryId, callback) {
  this.output.writeMessageBegin('getAllDocumentAttachmentVersions', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    attachmentId: attachmentId,
    filter: filter,
    registryId: registryId
  };
  var args = new DocumentService_getAllDocumentAttachmentVersions_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getAllDocumentAttachmentVersions = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getAllDocumentAttachmentVersions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocumentAttachmentVersions failed: unknown result';
};
DocumentServiceClient.prototype.createOrUpdateDocumentComment = function(token, documentComment, addToComment, changeType, registryId, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateDocumentComment(token, documentComment, addToComment, changeType, registryId);
    return this.recv_createOrUpdateDocumentComment();
  } else {
    var postData = this.send_createOrUpdateDocumentComment(token, documentComment, addToComment, changeType, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateDocumentComment);
  }
};

DocumentServiceClient.prototype.send_createOrUpdateDocumentComment = function(token, documentComment, addToComment, changeType, registryId, callback) {
  this.output.writeMessageBegin('createOrUpdateDocumentComment', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentComment: documentComment,
    addToComment: addToComment,
    changeType: changeType,
    registryId: registryId
  };
  var args = new DocumentService_createOrUpdateDocumentComment_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_createOrUpdateDocumentComment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_createOrUpdateDocumentComment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateDocumentComment failed: unknown result';
};
DocumentServiceClient.prototype.getAllDocumentComments = function(token, documentId, filter, registryId, callback) {
  if (callback === undefined) {
    this.send_getAllDocumentComments(token, documentId, filter, registryId);
    return this.recv_getAllDocumentComments();
  } else {
    var postData = this.send_getAllDocumentComments(token, documentId, filter, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocumentComments);
  }
};

DocumentServiceClient.prototype.send_getAllDocumentComments = function(token, documentId, filter, registryId, callback) {
  this.output.writeMessageBegin('getAllDocumentComments', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    filter: filter,
    registryId: registryId
  };
  var args = new DocumentService_getAllDocumentComments_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getAllDocumentComments = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getAllDocumentComments_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocumentComments failed: unknown result';
};
DocumentServiceClient.prototype.deleteDocumentComment = function(token, documentCommentId, registryId, callback) {
  if (callback === undefined) {
    this.send_deleteDocumentComment(token, documentCommentId, registryId);
    return this.recv_deleteDocumentComment();
  } else {
    var postData = this.send_deleteDocumentComment(token, documentCommentId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteDocumentComment);
  }
};

DocumentServiceClient.prototype.send_deleteDocumentComment = function(token, documentCommentId, registryId, callback) {
  this.output.writeMessageBegin('deleteDocumentComment', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentCommentId: documentCommentId,
    registryId: registryId
  };
  var args = new DocumentService_deleteDocumentComment_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_deleteDocumentComment = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_deleteDocumentComment_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteDocumentComment failed: unknown result';
};
DocumentServiceClient.prototype.createOrUpdateDocumentContentItems = function(token, documentId, toAddOrUpdate, toRemove, registryId, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateDocumentContentItems(token, documentId, toAddOrUpdate, toRemove, registryId);
    return this.recv_createOrUpdateDocumentContentItems();
  } else {
    var postData = this.send_createOrUpdateDocumentContentItems(token, documentId, toAddOrUpdate, toRemove, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateDocumentContentItems);
  }
};

DocumentServiceClient.prototype.send_createOrUpdateDocumentContentItems = function(token, documentId, toAddOrUpdate, toRemove, registryId, callback) {
  this.output.writeMessageBegin('createOrUpdateDocumentContentItems', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    toAddOrUpdate: toAddOrUpdate,
    toRemove: toRemove,
    registryId: registryId
  };
  var args = new DocumentService_createOrUpdateDocumentContentItems_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_createOrUpdateDocumentContentItems = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_createOrUpdateDocumentContentItems_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateDocumentContentItems failed: unknown result';
};
DocumentServiceClient.prototype.deleteDocumentContentItem = function(token, documentId, contentItemKey, registryId, callback) {
  if (callback === undefined) {
    this.send_deleteDocumentContentItem(token, documentId, contentItemKey, registryId);
    return this.recv_deleteDocumentContentItem();
  } else {
    var postData = this.send_deleteDocumentContentItem(token, documentId, contentItemKey, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteDocumentContentItem);
  }
};

DocumentServiceClient.prototype.send_deleteDocumentContentItem = function(token, documentId, contentItemKey, registryId, callback) {
  this.output.writeMessageBegin('deleteDocumentContentItem', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    contentItemKey: contentItemKey,
    registryId: registryId
  };
  var args = new DocumentService_deleteDocumentContentItem_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_deleteDocumentContentItem = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_deleteDocumentContentItem_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteDocumentContentItem failed: unknown result';
};
DocumentServiceClient.prototype.createOrUpdateDocumentContentTab = function(token, documentId, documentContentTab, registryId, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateDocumentContentTab(token, documentId, documentContentTab, registryId);
    return this.recv_createOrUpdateDocumentContentTab();
  } else {
    var postData = this.send_createOrUpdateDocumentContentTab(token, documentId, documentContentTab, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateDocumentContentTab);
  }
};

DocumentServiceClient.prototype.send_createOrUpdateDocumentContentTab = function(token, documentId, documentContentTab, registryId, callback) {
  this.output.writeMessageBegin('createOrUpdateDocumentContentTab', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    documentContentTab: documentContentTab,
    registryId: registryId
  };
  var args = new DocumentService_createOrUpdateDocumentContentTab_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_createOrUpdateDocumentContentTab = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_createOrUpdateDocumentContentTab_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateDocumentContentTab failed: unknown result';
};
DocumentServiceClient.prototype.getDocumentContentTabsByFilter = function(token, documentId, filter, registryId, callback) {
  if (callback === undefined) {
    this.send_getDocumentContentTabsByFilter(token, documentId, filter, registryId);
    return this.recv_getDocumentContentTabsByFilter();
  } else {
    var postData = this.send_getDocumentContentTabsByFilter(token, documentId, filter, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDocumentContentTabsByFilter);
  }
};

DocumentServiceClient.prototype.send_getDocumentContentTabsByFilter = function(token, documentId, filter, registryId, callback) {
  this.output.writeMessageBegin('getDocumentContentTabsByFilter', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    filter: filter,
    registryId: registryId
  };
  var args = new DocumentService_getDocumentContentTabsByFilter_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getDocumentContentTabsByFilter = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getDocumentContentTabsByFilter_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getDocumentContentTabsByFilter failed: unknown result';
};
DocumentServiceClient.prototype.deleteDocumentContentTab = function(token, documentContentTabId, registryId, callback) {
  if (callback === undefined) {
    this.send_deleteDocumentContentTab(token, documentContentTabId, registryId);
    return this.recv_deleteDocumentContentTab();
  } else {
    var postData = this.send_deleteDocumentContentTab(token, documentContentTabId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteDocumentContentTab);
  }
};

DocumentServiceClient.prototype.send_deleteDocumentContentTab = function(token, documentContentTabId, registryId, callback) {
  this.output.writeMessageBegin('deleteDocumentContentTab', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentContentTabId: documentContentTabId,
    registryId: registryId
  };
  var args = new DocumentService_deleteDocumentContentTab_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_deleteDocumentContentTab = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_deleteDocumentContentTab_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteDocumentContentTab failed: unknown result';
};
DocumentServiceClient.prototype.documentToArchive = function(token, documentId, registryId, callback) {
  if (callback === undefined) {
    this.send_documentToArchive(token, documentId, registryId);
    return this.recv_documentToArchive();
  } else {
    var postData = this.send_documentToArchive(token, documentId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_documentToArchive);
  }
};

DocumentServiceClient.prototype.send_documentToArchive = function(token, documentId, registryId, callback) {
  this.output.writeMessageBegin('documentToArchive', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    registryId: registryId
  };
  var args = new DocumentService_documentToArchive_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_documentToArchive = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_documentToArchive_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'documentToArchive failed: unknown result';
};
DocumentServiceClient.prototype.getAllResponsibleForDocument = function(token, documentId, registryId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllResponsibleForDocument(token, documentId, registryId, filter);
    return this.recv_getAllResponsibleForDocument();
  } else {
    var postData = this.send_getAllResponsibleForDocument(token, documentId, registryId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllResponsibleForDocument);
  }
};

DocumentServiceClient.prototype.send_getAllResponsibleForDocument = function(token, documentId, registryId, filter, callback) {
  this.output.writeMessageBegin('getAllResponsibleForDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    registryId: registryId,
    filter: filter
  };
  var args = new DocumentService_getAllResponsibleForDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getAllResponsibleForDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getAllResponsibleForDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllResponsibleForDocument failed: unknown result';
};
DocumentServiceClient.prototype.addResponsibleForDocument = function(token, documentId, users, registryId, callback) {
  if (callback === undefined) {
    this.send_addResponsibleForDocument(token, documentId, users, registryId);
    return this.recv_addResponsibleForDocument();
  } else {
    var postData = this.send_addResponsibleForDocument(token, documentId, users, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addResponsibleForDocument);
  }
};

DocumentServiceClient.prototype.send_addResponsibleForDocument = function(token, documentId, users, registryId, callback) {
  this.output.writeMessageBegin('addResponsibleForDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    users: users,
    registryId: registryId
  };
  var args = new DocumentService_addResponsibleForDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_addResponsibleForDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_addResponsibleForDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addResponsibleForDocument failed: unknown result';
};
DocumentServiceClient.prototype.removeResponsibleForDocument = function(token, documentId, users, registryId, callback) {
  if (callback === undefined) {
    this.send_removeResponsibleForDocument(token, documentId, users, registryId);
    return this.recv_removeResponsibleForDocument();
  } else {
    var postData = this.send_removeResponsibleForDocument(token, documentId, users, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeResponsibleForDocument);
  }
};

DocumentServiceClient.prototype.send_removeResponsibleForDocument = function(token, documentId, users, registryId, callback) {
  this.output.writeMessageBegin('removeResponsibleForDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    users: users,
    registryId: registryId
  };
  var args = new DocumentService_removeResponsibleForDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_removeResponsibleForDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_removeResponsibleForDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeResponsibleForDocument failed: unknown result';
};
DocumentServiceClient.prototype.getHistory = function(token, documentId, registryId, filter, callback) {
  if (callback === undefined) {
    this.send_getHistory(token, documentId, registryId, filter);
    return this.recv_getHistory();
  } else {
    var postData = this.send_getHistory(token, documentId, registryId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getHistory);
  }
};

DocumentServiceClient.prototype.send_getHistory = function(token, documentId, registryId, filter, callback) {
  this.output.writeMessageBegin('getHistory', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    registryId: registryId,
    filter: filter
  };
  var args = new DocumentService_getHistory_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getHistory = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getHistory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getHistory failed: unknown result';
};
DocumentServiceClient.prototype.getCountHistory = function(token, documentId, registryId, filter, callback) {
  if (callback === undefined) {
    this.send_getCountHistory(token, documentId, registryId, filter);
    return this.recv_getCountHistory();
  } else {
    var postData = this.send_getCountHistory(token, documentId, registryId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCountHistory);
  }
};

DocumentServiceClient.prototype.send_getCountHistory = function(token, documentId, registryId, filter, callback) {
  this.output.writeMessageBegin('getCountHistory', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    registryId: registryId,
    filter: filter
  };
  var args = new DocumentService_getCountHistory_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getCountHistory = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getCountHistory_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountHistory failed: unknown result';
};
DocumentServiceClient.prototype.getAllNews = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllNews(token, filter);
    return this.recv_getAllNews();
  } else {
    var postData = this.send_getAllNews(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllNews);
  }
};

DocumentServiceClient.prototype.send_getAllNews = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllNews', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new DocumentService_getAllNews_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getAllNews = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getAllNews_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllNews failed: unknown result';
};
DocumentServiceClient.prototype.getTasksByDate = function(token, date, callback) {
  if (callback === undefined) {
    this.send_getTasksByDate(token, date);
    return this.recv_getTasksByDate();
  } else {
    var postData = this.send_getTasksByDate(token, date, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTasksByDate);
  }
};

DocumentServiceClient.prototype.send_getTasksByDate = function(token, date, callback) {
  this.output.writeMessageBegin('getTasksByDate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    date: date
  };
  var args = new DocumentService_getTasksByDate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getTasksByDate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getTasksByDate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getTasksByDate failed: unknown result';
};
DocumentServiceClient.prototype.generateDocumentNumber = function(token, documentId, registryId, callback) {
  if (callback === undefined) {
    this.send_generateDocumentNumber(token, documentId, registryId);
    return this.recv_generateDocumentNumber();
  } else {
    var postData = this.send_generateDocumentNumber(token, documentId, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_generateDocumentNumber);
  }
};

DocumentServiceClient.prototype.send_generateDocumentNumber = function(token, documentId, registryId, callback) {
  this.output.writeMessageBegin('generateDocumentNumber', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    registryId: registryId
  };
  var args = new DocumentService_generateDocumentNumber_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_generateDocumentNumber = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_generateDocumentNumber_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'generateDocumentNumber failed: unknown result';
};
DocumentServiceClient.prototype.setDocumentViewed = function(token, documentId, viewed, callback) {
  if (callback === undefined) {
    this.send_setDocumentViewed(token, documentId, viewed);
    return this.recv_setDocumentViewed();
  } else {
    var postData = this.send_setDocumentViewed(token, documentId, viewed, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setDocumentViewed);
  }
};

DocumentServiceClient.prototype.send_setDocumentViewed = function(token, documentId, viewed, callback) {
  this.output.writeMessageBegin('setDocumentViewed', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    viewed: viewed
  };
  var args = new DocumentService_setDocumentViewed_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_setDocumentViewed = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_setDocumentViewed_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setDocumentViewed failed: unknown result';
};
DocumentServiceClient.prototype.getAllDocumentRelations = function(token, documentId, filter, registryId, callback) {
  if (callback === undefined) {
    this.send_getAllDocumentRelations(token, documentId, filter, registryId);
    return this.recv_getAllDocumentRelations();
  } else {
    var postData = this.send_getAllDocumentRelations(token, documentId, filter, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocumentRelations);
  }
};

DocumentServiceClient.prototype.send_getAllDocumentRelations = function(token, documentId, filter, registryId, callback) {
  this.output.writeMessageBegin('getAllDocumentRelations', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    filter: filter,
    registryId: registryId
  };
  var args = new DocumentService_getAllDocumentRelations_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getAllDocumentRelations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getAllDocumentRelations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocumentRelations failed: unknown result';
};
DocumentServiceClient.prototype.createRelations = function(token, firstDocumentId, secondDocumentId, relationType, resolution, callback) {
  if (callback === undefined) {
    this.send_createRelations(token, firstDocumentId, secondDocumentId, relationType, resolution);
    return this.recv_createRelations();
  } else {
    var postData = this.send_createRelations(token, firstDocumentId, secondDocumentId, relationType, resolution, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createRelations);
  }
};

DocumentServiceClient.prototype.send_createRelations = function(token, firstDocumentId, secondDocumentId, relationType, resolution, callback) {
  this.output.writeMessageBegin('createRelations', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    firstDocumentId: firstDocumentId,
    secondDocumentId: secondDocumentId,
    relationType: relationType,
    resolution: resolution
  };
  var args = new DocumentService_createRelations_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_createRelations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_createRelations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createRelations failed: unknown result';
};
DocumentServiceClient.prototype.removeRelations = function(token, firstDocumentId, secondDocumentId, callback) {
  if (callback === undefined) {
    this.send_removeRelations(token, firstDocumentId, secondDocumentId);
    return this.recv_removeRelations();
  } else {
    var postData = this.send_removeRelations(token, firstDocumentId, secondDocumentId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeRelations);
  }
};

DocumentServiceClient.prototype.send_removeRelations = function(token, firstDocumentId, secondDocumentId, callback) {
  this.output.writeMessageBegin('removeRelations', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    firstDocumentId: firstDocumentId,
    secondDocumentId: secondDocumentId
  };
  var args = new DocumentService_removeRelations_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_removeRelations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_removeRelations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeRelations failed: unknown result';
};
DocumentServiceClient.prototype.changeSubStatus = function(token, documentId, subStatus, comment, registryId, callback) {
  if (callback === undefined) {
    this.send_changeSubStatus(token, documentId, subStatus, comment, registryId);
    return this.recv_changeSubStatus();
  } else {
    var postData = this.send_changeSubStatus(token, documentId, subStatus, comment, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeSubStatus);
  }
};

DocumentServiceClient.prototype.send_changeSubStatus = function(token, documentId, subStatus, comment, registryId, callback) {
  this.output.writeMessageBegin('changeSubStatus', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    subStatus: subStatus,
    comment: comment,
    registryId: registryId
  };
  var args = new DocumentService_changeSubStatus_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_changeSubStatus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_changeSubStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeSubStatus failed: unknown result';
};
DocumentServiceClient.prototype.increaseDeadlineForDocumentOrDocumentExecution = function(token, documentId, documentExecution, deadlineTime, registryId, callback) {
  if (callback === undefined) {
    this.send_increaseDeadlineForDocumentOrDocumentExecution(token, documentId, documentExecution, deadlineTime, registryId);
    return this.recv_increaseDeadlineForDocumentOrDocumentExecution();
  } else {
    var postData = this.send_increaseDeadlineForDocumentOrDocumentExecution(token, documentId, documentExecution, deadlineTime, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_increaseDeadlineForDocumentOrDocumentExecution);
  }
};

DocumentServiceClient.prototype.send_increaseDeadlineForDocumentOrDocumentExecution = function(token, documentId, documentExecution, deadlineTime, registryId, callback) {
  this.output.writeMessageBegin('increaseDeadlineForDocumentOrDocumentExecution', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    documentExecution: documentExecution,
    deadlineTime: deadlineTime,
    registryId: registryId
  };
  var args = new DocumentService_increaseDeadlineForDocumentOrDocumentExecution_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_increaseDeadlineForDocumentOrDocumentExecution = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_increaseDeadlineForDocumentOrDocumentExecution_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'increaseDeadlineForDocumentOrDocumentExecution failed: unknown result';
};
DocumentServiceClient.prototype.runProcessDocumentOnStageWithAutoLinkJob = function(token, callback) {
  if (callback === undefined) {
    this.send_runProcessDocumentOnStageWithAutoLinkJob(token);
    return this.recv_runProcessDocumentOnStageWithAutoLinkJob();
  } else {
    var postData = this.send_runProcessDocumentOnStageWithAutoLinkJob(token, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_runProcessDocumentOnStageWithAutoLinkJob);
  }
};

DocumentServiceClient.prototype.send_runProcessDocumentOnStageWithAutoLinkJob = function(token, callback) {
  this.output.writeMessageBegin('runProcessDocumentOnStageWithAutoLinkJob', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token
  };
  var args = new DocumentService_runProcessDocumentOnStageWithAutoLinkJob_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_runProcessDocumentOnStageWithAutoLinkJob = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_runProcessDocumentOnStageWithAutoLinkJob_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'runProcessDocumentOnStageWithAutoLinkJob failed: unknown result';
};
DocumentServiceClient.prototype.addAdditionalConfirmers = function(token, cardId, users, deadlineDate, registryId, callback) {
  if (callback === undefined) {
    this.send_addAdditionalConfirmers(token, cardId, users, deadlineDate, registryId);
    return this.recv_addAdditionalConfirmers();
  } else {
    var postData = this.send_addAdditionalConfirmers(token, cardId, users, deadlineDate, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addAdditionalConfirmers);
  }
};

DocumentServiceClient.prototype.send_addAdditionalConfirmers = function(token, cardId, users, deadlineDate, registryId, callback) {
  this.output.writeMessageBegin('addAdditionalConfirmers', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    cardId: cardId,
    users: users,
    deadlineDate: deadlineDate,
    registryId: registryId
  };
  var args = new DocumentService_addAdditionalConfirmers_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_addAdditionalConfirmers = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_addAdditionalConfirmers_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addAdditionalConfirmers failed: unknown result';
};
DocumentServiceClient.prototype.setAdditionalDecision = function(token, userDecision, cardId, comment, returnToParentStage, signature, callback) {
  if (callback === undefined) {
    this.send_setAdditionalDecision(token, userDecision, cardId, comment, returnToParentStage, signature);
    return this.recv_setAdditionalDecision();
  } else {
    var postData = this.send_setAdditionalDecision(token, userDecision, cardId, comment, returnToParentStage, signature, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setAdditionalDecision);
  }
};

DocumentServiceClient.prototype.send_setAdditionalDecision = function(token, userDecision, cardId, comment, returnToParentStage, signature, callback) {
  this.output.writeMessageBegin('setAdditionalDecision', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userDecision: userDecision,
    cardId: cardId,
    comment: comment,
    returnToParentStage: returnToParentStage,
    signature: signature
  };
  var args = new DocumentService_setAdditionalDecision_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_setAdditionalDecision = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_setAdditionalDecision_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setAdditionalDecision failed: unknown result';
};
DocumentServiceClient.prototype.revokeDecision = function(token, documentReassign, cardId, comment, callback) {
  if (callback === undefined) {
    this.send_revokeDecision(token, documentReassign, cardId, comment);
    return this.recv_revokeDecision();
  } else {
    var postData = this.send_revokeDecision(token, documentReassign, cardId, comment, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_revokeDecision);
  }
};

DocumentServiceClient.prototype.send_revokeDecision = function(token, documentReassign, cardId, comment, callback) {
  this.output.writeMessageBegin('revokeDecision', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentReassign: documentReassign,
    cardId: cardId,
    comment: comment
  };
  var args = new DocumentService_revokeDecision_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_revokeDecision = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_revokeDecision_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'revokeDecision failed: unknown result';
};
DocumentServiceClient.prototype.getAllOpenDocumentExecutionsStatistic = function(token, userId, callback) {
  if (callback === undefined) {
    this.send_getAllOpenDocumentExecutionsStatistic(token, userId);
    return this.recv_getAllOpenDocumentExecutionsStatistic();
  } else {
    var postData = this.send_getAllOpenDocumentExecutionsStatistic(token, userId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllOpenDocumentExecutionsStatistic);
  }
};

DocumentServiceClient.prototype.send_getAllOpenDocumentExecutionsStatistic = function(token, userId, callback) {
  this.output.writeMessageBegin('getAllOpenDocumentExecutionsStatistic', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userId: userId
  };
  var args = new DocumentService_getAllOpenDocumentExecutionsStatistic_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getAllOpenDocumentExecutionsStatistic = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getAllOpenDocumentExecutionsStatistic_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllOpenDocumentExecutionsStatistic failed: unknown result';
};
DocumentServiceClient.prototype.changeControlForDocument = function(token, documentId, control, registryId, callback) {
  if (callback === undefined) {
    this.send_changeControlForDocument(token, documentId, control, registryId);
    return this.recv_changeControlForDocument();
  } else {
    var postData = this.send_changeControlForDocument(token, documentId, control, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeControlForDocument);
  }
};

DocumentServiceClient.prototype.send_changeControlForDocument = function(token, documentId, control, registryId, callback) {
  this.output.writeMessageBegin('changeControlForDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    control: control,
    registryId: registryId
  };
  var args = new DocumentService_changeControlForDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_changeControlForDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_changeControlForDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeControlForDocument failed: unknown result';
};
DocumentServiceClient.prototype.addTagsToDocument = function(token, docId, tags, callback) {
  if (callback === undefined) {
    this.send_addTagsToDocument(token, docId, tags);
    return this.recv_addTagsToDocument();
  } else {
    var postData = this.send_addTagsToDocument(token, docId, tags, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addTagsToDocument);
  }
};

DocumentServiceClient.prototype.send_addTagsToDocument = function(token, docId, tags, callback) {
  this.output.writeMessageBegin('addTagsToDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docId: docId,
    tags: tags
  };
  var args = new DocumentService_addTagsToDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_addTagsToDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_addTagsToDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addTagsToDocument failed: unknown result';
};
DocumentServiceClient.prototype.removeTagsToDocument = function(token, docId, tags, callback) {
  if (callback === undefined) {
    this.send_removeTagsToDocument(token, docId, tags);
    return this.recv_removeTagsToDocument();
  } else {
    var postData = this.send_removeTagsToDocument(token, docId, tags, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeTagsToDocument);
  }
};

DocumentServiceClient.prototype.send_removeTagsToDocument = function(token, docId, tags, callback) {
  this.output.writeMessageBegin('removeTagsToDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docId: docId,
    tags: tags
  };
  var args = new DocumentService_removeTagsToDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_removeTagsToDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_removeTagsToDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeTagsToDocument failed: unknown result';
};
DocumentServiceClient.prototype.addExecutorsToStage = function(token, docId, documentReassign, registryId, callback) {
  if (callback === undefined) {
    this.send_addExecutorsToStage(token, docId, documentReassign, registryId);
    return this.recv_addExecutorsToStage();
  } else {
    var postData = this.send_addExecutorsToStage(token, docId, documentReassign, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addExecutorsToStage);
  }
};

DocumentServiceClient.prototype.send_addExecutorsToStage = function(token, docId, documentReassign, registryId, callback) {
  this.output.writeMessageBegin('addExecutorsToStage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docId: docId,
    documentReassign: documentReassign,
    registryId: registryId
  };
  var args = new DocumentService_addExecutorsToStage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_addExecutorsToStage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_addExecutorsToStage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addExecutorsToStage failed: unknown result';
};
DocumentServiceClient.prototype.getCountDocsByFilterNoPermission = function(token, patternGroupId, filter, callback) {
  if (callback === undefined) {
    this.send_getCountDocsByFilterNoPermission(token, patternGroupId, filter);
    return this.recv_getCountDocsByFilterNoPermission();
  } else {
    var postData = this.send_getCountDocsByFilterNoPermission(token, patternGroupId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCountDocsByFilterNoPermission);
  }
};

DocumentServiceClient.prototype.send_getCountDocsByFilterNoPermission = function(token, patternGroupId, filter, callback) {
  this.output.writeMessageBegin('getCountDocsByFilterNoPermission', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    patternGroupId: patternGroupId,
    filter: filter
  };
  var args = new DocumentService_getCountDocsByFilterNoPermission_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getCountDocsByFilterNoPermission = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getCountDocsByFilterNoPermission_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountDocsByFilterNoPermission failed: unknown result';
};
DocumentServiceClient.prototype.getTinyDocsByFilterNoPermission = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getTinyDocsByFilterNoPermission(token, filter);
    return this.recv_getTinyDocsByFilterNoPermission();
  } else {
    var postData = this.send_getTinyDocsByFilterNoPermission(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getTinyDocsByFilterNoPermission);
  }
};

DocumentServiceClient.prototype.send_getTinyDocsByFilterNoPermission = function(token, filter, callback) {
  this.output.writeMessageBegin('getTinyDocsByFilterNoPermission', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new DocumentService_getTinyDocsByFilterNoPermission_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_getTinyDocsByFilterNoPermission = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_getTinyDocsByFilterNoPermission_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getTinyDocsByFilterNoPermission failed: unknown result';
};
DocumentServiceClient.prototype.changeRegistrationInfoForDocument = function(token, documentId, newRegistrationDate, newRegistrationNumber, registryId, callback) {
  if (callback === undefined) {
    this.send_changeRegistrationInfoForDocument(token, documentId, newRegistrationDate, newRegistrationNumber, registryId);
    return this.recv_changeRegistrationInfoForDocument();
  } else {
    var postData = this.send_changeRegistrationInfoForDocument(token, documentId, newRegistrationDate, newRegistrationNumber, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeRegistrationInfoForDocument);
  }
};

DocumentServiceClient.prototype.send_changeRegistrationInfoForDocument = function(token, documentId, newRegistrationDate, newRegistrationNumber, registryId, callback) {
  this.output.writeMessageBegin('changeRegistrationInfoForDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId,
    newRegistrationDate: newRegistrationDate,
    newRegistrationNumber: newRegistrationNumber,
    registryId: registryId
  };
  var args = new DocumentService_changeRegistrationInfoForDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_changeRegistrationInfoForDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_changeRegistrationInfoForDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeRegistrationInfoForDocument failed: unknown result';
};
DocumentServiceClient.prototype.createChatForDocument = function(token, documentId, callback) {
  if (callback === undefined) {
    this.send_createChatForDocument(token, documentId);
    return this.recv_createChatForDocument();
  } else {
    var postData = this.send_createChatForDocument(token, documentId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createChatForDocument);
  }
};

DocumentServiceClient.prototype.send_createChatForDocument = function(token, documentId, callback) {
  this.output.writeMessageBegin('createChatForDocument', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    documentId: documentId
  };
  var args = new DocumentService_createChatForDocument_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

DocumentServiceClient.prototype.recv_createChatForDocument = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DocumentService_createChatForDocument_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createChatForDocument failed: unknown result';
};
