//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

CalendarService_getAllEvents_args = function(args) {
  this.token = null;
  this.beginDate = null;
  this.endDate = null;
  this.usersOrGroups = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.beginDate !== undefined && args.beginDate !== null) {
      this.beginDate = args.beginDate;
    }
    if (args.endDate !== undefined && args.endDate !== null) {
      this.endDate = args.endDate;
    }
    if (args.usersOrGroups !== undefined && args.usersOrGroups !== null) {
      this.usersOrGroups = Thrift.copyList(args.usersOrGroups, [UserOrGroup]);
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_getAllEvents_args.prototype = {};
CalendarService_getAllEvents_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.beginDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.endDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size1638 = 0;
        var _rtmp31642;
        this.usersOrGroups = [];
        var _etype1641 = 0;
        _rtmp31642 = input.readListBegin();
        _etype1641 = _rtmp31642.etype;
        _size1638 = _rtmp31642.size;
        for (var _i1643 = 0; _i1643 < _size1638; ++_i1643)
        {
          var elem1644 = null;
          elem1644 = new UserOrGroup();
          elem1644.read(input);
          this.usersOrGroups.push(elem1644);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllEvents_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllEvents_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.beginDate !== null && this.beginDate !== undefined) {
    output.writeFieldBegin('beginDate', Thrift.Type.I64, 2);
    output.writeI64(this.beginDate);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.I64, 3);
    output.writeI64(this.endDate);
    output.writeFieldEnd();
  }
  if (this.usersOrGroups !== null && this.usersOrGroups !== undefined) {
    output.writeFieldBegin('usersOrGroups', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.usersOrGroups.length);
    for (var iter1645 in this.usersOrGroups)
    {
      if (this.usersOrGroups.hasOwnProperty(iter1645))
      {
        iter1645 = this.usersOrGroups[iter1645];
        iter1645.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 5);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllEvents_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [CalendarEvent]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getAllEvents_result.prototype = {};
CalendarService_getAllEvents_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1646 = 0;
        var _rtmp31650;
        this.success = [];
        var _etype1649 = 0;
        _rtmp31650 = input.readListBegin();
        _etype1649 = _rtmp31650.etype;
        _size1646 = _rtmp31650.size;
        for (var _i1651 = 0; _i1651 < _size1646; ++_i1651)
        {
          var elem1652 = null;
          elem1652 = new CalendarEvent();
          elem1652.read(input);
          this.success.push(elem1652);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllEvents_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllEvents_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1653 in this.success)
    {
      if (this.success.hasOwnProperty(iter1653))
      {
        iter1653 = this.success[iter1653];
        iter1653.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_deleteEvent_args = function(args) {
  this.token = null;
  this.eventId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    }
  }
};
CalendarService_deleteEvent_args.prototype = {};
CalendarService_deleteEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.eventId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_deleteEvent_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_deleteEvent_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.STRING, 2);
    output.writeString(this.eventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_deleteEvent_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_deleteEvent_result.prototype = {};
CalendarService_deleteEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_deleteEvent_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_deleteEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createOrUpdateEvent_args = function(args) {
  this.token = null;
  this.event = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.event !== undefined && args.event !== null) {
      this.event = new CalendarEvent(args.event);
    }
  }
};
CalendarService_createOrUpdateEvent_args.prototype = {};
CalendarService_createOrUpdateEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.event = new CalendarEvent();
        this.event.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createOrUpdateEvent_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createOrUpdateEvent_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.event !== null && this.event !== undefined) {
    output.writeFieldBegin('event', Thrift.Type.STRUCT, 2);
    this.event.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createOrUpdateEvent_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new CalendarEvent(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_createOrUpdateEvent_result.prototype = {};
CalendarService_createOrUpdateEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CalendarEvent();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createOrUpdateEvent_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createOrUpdateEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllDeadlines_args = function(args) {
  this.token = null;
  this.beginDate = null;
  this.endDate = null;
  this.usersOrGroups = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.beginDate !== undefined && args.beginDate !== null) {
      this.beginDate = args.beginDate;
    }
    if (args.endDate !== undefined && args.endDate !== null) {
      this.endDate = args.endDate;
    }
    if (args.usersOrGroups !== undefined && args.usersOrGroups !== null) {
      this.usersOrGroups = Thrift.copyList(args.usersOrGroups, [UserOrGroup]);
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_getAllDeadlines_args.prototype = {};
CalendarService_getAllDeadlines_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.beginDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.endDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size1654 = 0;
        var _rtmp31658;
        this.usersOrGroups = [];
        var _etype1657 = 0;
        _rtmp31658 = input.readListBegin();
        _etype1657 = _rtmp31658.etype;
        _size1654 = _rtmp31658.size;
        for (var _i1659 = 0; _i1659 < _size1654; ++_i1659)
        {
          var elem1660 = null;
          elem1660 = new UserOrGroup();
          elem1660.read(input);
          this.usersOrGroups.push(elem1660);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllDeadlines_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllDeadlines_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.beginDate !== null && this.beginDate !== undefined) {
    output.writeFieldBegin('beginDate', Thrift.Type.I64, 2);
    output.writeI64(this.beginDate);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.I64, 3);
    output.writeI64(this.endDate);
    output.writeFieldEnd();
  }
  if (this.usersOrGroups !== null && this.usersOrGroups !== undefined) {
    output.writeFieldBegin('usersOrGroups', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.usersOrGroups.length);
    for (var iter1661 in this.usersOrGroups)
    {
      if (this.usersOrGroups.hasOwnProperty(iter1661))
      {
        iter1661 = this.usersOrGroups[iter1661];
        iter1661.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 5);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllDeadlines_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Deadline]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getAllDeadlines_result.prototype = {};
CalendarService_getAllDeadlines_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1662 = 0;
        var _rtmp31666;
        this.success = [];
        var _etype1665 = 0;
        _rtmp31666 = input.readListBegin();
        _etype1665 = _rtmp31666.etype;
        _size1662 = _rtmp31666.size;
        for (var _i1667 = 0; _i1667 < _size1662; ++_i1667)
        {
          var elem1668 = null;
          elem1668 = new Deadline();
          elem1668.read(input);
          this.success.push(elem1668);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllDeadlines_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllDeadlines_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1669 in this.success)
    {
      if (this.success.hasOwnProperty(iter1669))
      {
        iter1669 = this.success[iter1669];
        iter1669.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllGroupedDeadlines_args = function(args) {
  this.token = null;
  this.beginDate = null;
  this.endDate = null;
  this.usersOrGroups = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.beginDate !== undefined && args.beginDate !== null) {
      this.beginDate = args.beginDate;
    }
    if (args.endDate !== undefined && args.endDate !== null) {
      this.endDate = args.endDate;
    }
    if (args.usersOrGroups !== undefined && args.usersOrGroups !== null) {
      this.usersOrGroups = Thrift.copyList(args.usersOrGroups, [UserOrGroup]);
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_getAllGroupedDeadlines_args.prototype = {};
CalendarService_getAllGroupedDeadlines_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.beginDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.endDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size1670 = 0;
        var _rtmp31674;
        this.usersOrGroups = [];
        var _etype1673 = 0;
        _rtmp31674 = input.readListBegin();
        _etype1673 = _rtmp31674.etype;
        _size1670 = _rtmp31674.size;
        for (var _i1675 = 0; _i1675 < _size1670; ++_i1675)
        {
          var elem1676 = null;
          elem1676 = new UserOrGroup();
          elem1676.read(input);
          this.usersOrGroups.push(elem1676);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllGroupedDeadlines_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllGroupedDeadlines_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.beginDate !== null && this.beginDate !== undefined) {
    output.writeFieldBegin('beginDate', Thrift.Type.I64, 2);
    output.writeI64(this.beginDate);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.I64, 3);
    output.writeI64(this.endDate);
    output.writeFieldEnd();
  }
  if (this.usersOrGroups !== null && this.usersOrGroups !== undefined) {
    output.writeFieldBegin('usersOrGroups', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.usersOrGroups.length);
    for (var iter1677 in this.usersOrGroups)
    {
      if (this.usersOrGroups.hasOwnProperty(iter1677))
      {
        iter1677 = this.usersOrGroups[iter1677];
        iter1677.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 5);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllGroupedDeadlines_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getAllGroupedDeadlines_result.prototype = {};
CalendarService_getAllGroupedDeadlines_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1678 = 0;
        var _rtmp31682;
        this.success = {};
        var _ktype1679 = 0;
        var _vtype1680 = 0;
        _rtmp31682 = input.readMapBegin();
        _ktype1679 = _rtmp31682.ktype;
        _vtype1680 = _rtmp31682.vtype;
        _size1678 = _rtmp31682.size;
        for (var _i1683 = 0; _i1683 < _size1678; ++_i1683)
        {
          if (_i1683 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1684 = null;
          var val1685 = null;
          key1684 = input.readI64().value;
          val1685 = input.readI64().value;
          this.success[key1684] = val1685;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllGroupedDeadlines_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllGroupedDeadlines_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter1686 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1686))
      {
        var viter1687 = this.success[kiter1686];
        output.writeI64(kiter1686);
        output.writeI64(viter1687);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllAreas_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_getAllAreas_args.prototype = {};
CalendarService_getAllAreas_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllAreas_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllAreas_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllAreas_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Area]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getAllAreas_result.prototype = {};
CalendarService_getAllAreas_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1688 = 0;
        var _rtmp31692;
        this.success = [];
        var _etype1691 = 0;
        _rtmp31692 = input.readListBegin();
        _etype1691 = _rtmp31692.etype;
        _size1688 = _rtmp31692.size;
        for (var _i1693 = 0; _i1693 < _size1688; ++_i1693)
        {
          var elem1694 = null;
          elem1694 = new Area();
          elem1694.read(input);
          this.success.push(elem1694);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllAreas_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllAreas_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1695 in this.success)
    {
      if (this.success.hasOwnProperty(iter1695))
      {
        iter1695 = this.success[iter1695];
        iter1695.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getCountAllAreas_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_getCountAllAreas_args.prototype = {};
CalendarService_getCountAllAreas_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getCountAllAreas_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getCountAllAreas_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getCountAllAreas_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getCountAllAreas_result.prototype = {};
CalendarService_getCountAllAreas_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getCountAllAreas_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getCountAllAreas_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createOrUpdateArea_args = function(args) {
  this.token = null;
  this.area = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.area !== undefined && args.area !== null) {
      this.area = new Area(args.area);
    }
  }
};
CalendarService_createOrUpdateArea_args.prototype = {};
CalendarService_createOrUpdateArea_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.area = new Area();
        this.area.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createOrUpdateArea_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createOrUpdateArea_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.area !== null && this.area !== undefined) {
    output.writeFieldBegin('area', Thrift.Type.STRUCT, 2);
    this.area.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createOrUpdateArea_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Area(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_createOrUpdateArea_result.prototype = {};
CalendarService_createOrUpdateArea_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Area();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createOrUpdateArea_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createOrUpdateArea_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_deleteArea_args = function(args) {
  this.token = null;
  this.areaId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.areaId !== undefined && args.areaId !== null) {
      this.areaId = args.areaId;
    }
  }
};
CalendarService_deleteArea_args.prototype = {};
CalendarService_deleteArea_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.areaId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_deleteArea_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_deleteArea_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.areaId !== null && this.areaId !== undefined) {
    output.writeFieldBegin('areaId', Thrift.Type.STRING, 2);
    output.writeString(this.areaId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_deleteArea_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_deleteArea_result.prototype = {};
CalendarService_deleteArea_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_deleteArea_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_deleteArea_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllReassignments_args = function(args) {
  this.token = null;
  this.beginDate = null;
  this.endDate = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.beginDate !== undefined && args.beginDate !== null) {
      this.beginDate = args.beginDate;
    }
    if (args.endDate !== undefined && args.endDate !== null) {
      this.endDate = args.endDate;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_getAllReassignments_args.prototype = {};
CalendarService_getAllReassignments_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.beginDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.endDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllReassignments_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllReassignments_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.beginDate !== null && this.beginDate !== undefined) {
    output.writeFieldBegin('beginDate', Thrift.Type.I64, 2);
    output.writeI64(this.beginDate);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.I64, 3);
    output.writeI64(this.endDate);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllReassignments_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentReassign]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getAllReassignments_result.prototype = {};
CalendarService_getAllReassignments_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1696 = 0;
        var _rtmp31700;
        this.success = [];
        var _etype1699 = 0;
        _rtmp31700 = input.readListBegin();
        _etype1699 = _rtmp31700.etype;
        _size1696 = _rtmp31700.size;
        for (var _i1701 = 0; _i1701 < _size1696; ++_i1701)
        {
          var elem1702 = null;
          elem1702 = new DocumentReassign();
          elem1702.read(input);
          this.success.push(elem1702);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllReassignments_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllReassignments_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1703 in this.success)
    {
      if (this.success.hasOwnProperty(iter1703))
      {
        iter1703 = this.success[iter1703];
        iter1703.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllMaterialResources_args = function(args) {
  this.token = null;
  this.areaId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.areaId !== undefined && args.areaId !== null) {
      this.areaId = args.areaId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_getAllMaterialResources_args.prototype = {};
CalendarService_getAllMaterialResources_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.areaId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllMaterialResources_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllMaterialResources_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.areaId !== null && this.areaId !== undefined) {
    output.writeFieldBegin('areaId', Thrift.Type.STRING, 2);
    output.writeString(this.areaId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllMaterialResources_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [MaterialResource]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getAllMaterialResources_result.prototype = {};
CalendarService_getAllMaterialResources_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1704 = 0;
        var _rtmp31708;
        this.success = [];
        var _etype1707 = 0;
        _rtmp31708 = input.readListBegin();
        _etype1707 = _rtmp31708.etype;
        _size1704 = _rtmp31708.size;
        for (var _i1709 = 0; _i1709 < _size1704; ++_i1709)
        {
          var elem1710 = null;
          elem1710 = new MaterialResource();
          elem1710.read(input);
          this.success.push(elem1710);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllMaterialResources_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllMaterialResources_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1711 in this.success)
    {
      if (this.success.hasOwnProperty(iter1711))
      {
        iter1711 = this.success[iter1711];
        iter1711.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getCountAllMaterialResources_args = function(args) {
  this.token = null;
  this.areaId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.areaId !== undefined && args.areaId !== null) {
      this.areaId = args.areaId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_getCountAllMaterialResources_args.prototype = {};
CalendarService_getCountAllMaterialResources_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.areaId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getCountAllMaterialResources_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getCountAllMaterialResources_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.areaId !== null && this.areaId !== undefined) {
    output.writeFieldBegin('areaId', Thrift.Type.STRING, 2);
    output.writeString(this.areaId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getCountAllMaterialResources_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getCountAllMaterialResources_result.prototype = {};
CalendarService_getCountAllMaterialResources_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getCountAllMaterialResources_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getCountAllMaterialResources_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createOrUpdateMaterialResource_args = function(args) {
  this.token = null;
  this.materialResource = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.materialResource !== undefined && args.materialResource !== null) {
      this.materialResource = new MaterialResource(args.materialResource);
    }
  }
};
CalendarService_createOrUpdateMaterialResource_args.prototype = {};
CalendarService_createOrUpdateMaterialResource_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.materialResource = new MaterialResource();
        this.materialResource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createOrUpdateMaterialResource_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createOrUpdateMaterialResource_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.materialResource !== null && this.materialResource !== undefined) {
    output.writeFieldBegin('materialResource', Thrift.Type.STRUCT, 2);
    this.materialResource.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createOrUpdateMaterialResource_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new MaterialResource(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_createOrUpdateMaterialResource_result.prototype = {};
CalendarService_createOrUpdateMaterialResource_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MaterialResource();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createOrUpdateMaterialResource_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createOrUpdateMaterialResource_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_deleteMaterialResource_args = function(args) {
  this.token = null;
  this.materialResourceId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.materialResourceId !== undefined && args.materialResourceId !== null) {
      this.materialResourceId = args.materialResourceId;
    }
  }
};
CalendarService_deleteMaterialResource_args.prototype = {};
CalendarService_deleteMaterialResource_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.materialResourceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_deleteMaterialResource_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_deleteMaterialResource_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.materialResourceId !== null && this.materialResourceId !== undefined) {
    output.writeFieldBegin('materialResourceId', Thrift.Type.STRING, 2);
    output.writeString(this.materialResourceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_deleteMaterialResource_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_deleteMaterialResource_result.prototype = {};
CalendarService_deleteMaterialResource_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_deleteMaterialResource_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_deleteMaterialResource_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_moveMaterialResource_args = function(args) {
  this.token = null;
  this.resourceId = null;
  this.areaId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.resourceId !== undefined && args.resourceId !== null) {
      this.resourceId = args.resourceId;
    }
    if (args.areaId !== undefined && args.areaId !== null) {
      this.areaId = args.areaId;
    }
  }
};
CalendarService_moveMaterialResource_args.prototype = {};
CalendarService_moveMaterialResource_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.resourceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.areaId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_moveMaterialResource_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_moveMaterialResource_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.resourceId !== null && this.resourceId !== undefined) {
    output.writeFieldBegin('resourceId', Thrift.Type.STRING, 2);
    output.writeString(this.resourceId);
    output.writeFieldEnd();
  }
  if (this.areaId !== null && this.areaId !== undefined) {
    output.writeFieldBegin('areaId', Thrift.Type.STRING, 3);
    output.writeString(this.areaId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_moveMaterialResource_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new MaterialResource(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_moveMaterialResource_result.prototype = {};
CalendarService_moveMaterialResource_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new MaterialResource();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_moveMaterialResource_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_moveMaterialResource_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllMeetings_args = function(args) {
  this.token = null;
  this.beginDate = null;
  this.endDate = null;
  this.usersOrGroups = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.beginDate !== undefined && args.beginDate !== null) {
      this.beginDate = args.beginDate;
    }
    if (args.endDate !== undefined && args.endDate !== null) {
      this.endDate = args.endDate;
    }
    if (args.usersOrGroups !== undefined && args.usersOrGroups !== null) {
      this.usersOrGroups = Thrift.copyList(args.usersOrGroups, [UserOrGroup]);
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_getAllMeetings_args.prototype = {};
CalendarService_getAllMeetings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.beginDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.endDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size1712 = 0;
        var _rtmp31716;
        this.usersOrGroups = [];
        var _etype1715 = 0;
        _rtmp31716 = input.readListBegin();
        _etype1715 = _rtmp31716.etype;
        _size1712 = _rtmp31716.size;
        for (var _i1717 = 0; _i1717 < _size1712; ++_i1717)
        {
          var elem1718 = null;
          elem1718 = new UserOrGroup();
          elem1718.read(input);
          this.usersOrGroups.push(elem1718);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllMeetings_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllMeetings_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.beginDate !== null && this.beginDate !== undefined) {
    output.writeFieldBegin('beginDate', Thrift.Type.I64, 2);
    output.writeI64(this.beginDate);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.I64, 3);
    output.writeI64(this.endDate);
    output.writeFieldEnd();
  }
  if (this.usersOrGroups !== null && this.usersOrGroups !== undefined) {
    output.writeFieldBegin('usersOrGroups', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.usersOrGroups.length);
    for (var iter1719 in this.usersOrGroups)
    {
      if (this.usersOrGroups.hasOwnProperty(iter1719))
      {
        iter1719 = this.usersOrGroups[iter1719];
        iter1719.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 5);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllMeetings_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Meeting]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getAllMeetings_result.prototype = {};
CalendarService_getAllMeetings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1720 = 0;
        var _rtmp31724;
        this.success = [];
        var _etype1723 = 0;
        _rtmp31724 = input.readListBegin();
        _etype1723 = _rtmp31724.etype;
        _size1720 = _rtmp31724.size;
        for (var _i1725 = 0; _i1725 < _size1720; ++_i1725)
        {
          var elem1726 = null;
          elem1726 = new Meeting();
          elem1726.read(input);
          this.success.push(elem1726);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllMeetings_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllMeetings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1727 in this.success)
    {
      if (this.success.hasOwnProperty(iter1727))
      {
        iter1727 = this.success[iter1727];
        iter1727.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createOrUpdateMeeting_args = function(args) {
  this.token = null;
  this.meeting = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.meeting !== undefined && args.meeting !== null) {
      this.meeting = new Meeting(args.meeting);
    }
  }
};
CalendarService_createOrUpdateMeeting_args.prototype = {};
CalendarService_createOrUpdateMeeting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.meeting = new Meeting();
        this.meeting.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createOrUpdateMeeting_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createOrUpdateMeeting_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.meeting !== null && this.meeting !== undefined) {
    output.writeFieldBegin('meeting', Thrift.Type.STRUCT, 2);
    this.meeting.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createOrUpdateMeeting_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Meeting(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_createOrUpdateMeeting_result.prototype = {};
CalendarService_createOrUpdateMeeting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Meeting();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createOrUpdateMeeting_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createOrUpdateMeeting_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getMeetingById_args = function(args) {
  this.token = null;
  this.meetingId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.meetingId !== undefined && args.meetingId !== null) {
      this.meetingId = args.meetingId;
    }
  }
};
CalendarService_getMeetingById_args.prototype = {};
CalendarService_getMeetingById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.meetingId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getMeetingById_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getMeetingById_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.meetingId !== null && this.meetingId !== undefined) {
    output.writeFieldBegin('meetingId', Thrift.Type.STRING, 2);
    output.writeString(this.meetingId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getMeetingById_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Meeting(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getMeetingById_result.prototype = {};
CalendarService_getMeetingById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Meeting();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getMeetingById_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getMeetingById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_deleteMeeting_args = function(args) {
  this.token = null;
  this.meetingId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.meetingId !== undefined && args.meetingId !== null) {
      this.meetingId = args.meetingId;
    }
  }
};
CalendarService_deleteMeeting_args.prototype = {};
CalendarService_deleteMeeting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.meetingId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_deleteMeeting_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_deleteMeeting_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.meetingId !== null && this.meetingId !== undefined) {
    output.writeFieldBegin('meetingId', Thrift.Type.STRING, 2);
    output.writeString(this.meetingId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_deleteMeeting_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_deleteMeeting_result.prototype = {};
CalendarService_deleteMeeting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_deleteMeeting_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_deleteMeeting_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_setMeetingViewed_args = function(args) {
  this.token = null;
  this.meetingId = null;
  this.viewed = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.meetingId !== undefined && args.meetingId !== null) {
      this.meetingId = args.meetingId;
    }
    if (args.viewed !== undefined && args.viewed !== null) {
      this.viewed = args.viewed;
    }
  }
};
CalendarService_setMeetingViewed_args.prototype = {};
CalendarService_setMeetingViewed_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.meetingId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.viewed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_setMeetingViewed_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_setMeetingViewed_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.meetingId !== null && this.meetingId !== undefined) {
    output.writeFieldBegin('meetingId', Thrift.Type.STRING, 2);
    output.writeString(this.meetingId);
    output.writeFieldEnd();
  }
  if (this.viewed !== null && this.viewed !== undefined) {
    output.writeFieldBegin('viewed', Thrift.Type.BOOL, 3);
    output.writeBool(this.viewed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_setMeetingViewed_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_setMeetingViewed_result.prototype = {};
CalendarService_setMeetingViewed_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_setMeetingViewed_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_setMeetingViewed_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_searchForMaterialResources_args = function(args) {
  this.token = null;
  this.areaId = null;
  this.beginDate = null;
  this.endDate = null;
  this.resourceType = null;
  this.personsCount = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.areaId !== undefined && args.areaId !== null) {
      this.areaId = args.areaId;
    }
    if (args.beginDate !== undefined && args.beginDate !== null) {
      this.beginDate = args.beginDate;
    }
    if (args.endDate !== undefined && args.endDate !== null) {
      this.endDate = args.endDate;
    }
    if (args.resourceType !== undefined && args.resourceType !== null) {
      this.resourceType = args.resourceType;
    }
    if (args.personsCount !== undefined && args.personsCount !== null) {
      this.personsCount = args.personsCount;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_searchForMaterialResources_args.prototype = {};
CalendarService_searchForMaterialResources_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.areaId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.beginDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.endDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.resourceType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.personsCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_searchForMaterialResources_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_searchForMaterialResources_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.areaId !== null && this.areaId !== undefined) {
    output.writeFieldBegin('areaId', Thrift.Type.STRING, 2);
    output.writeString(this.areaId);
    output.writeFieldEnd();
  }
  if (this.beginDate !== null && this.beginDate !== undefined) {
    output.writeFieldBegin('beginDate', Thrift.Type.I64, 3);
    output.writeI64(this.beginDate);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.I64, 4);
    output.writeI64(this.endDate);
    output.writeFieldEnd();
  }
  if (this.resourceType !== null && this.resourceType !== undefined) {
    output.writeFieldBegin('resourceType', Thrift.Type.I32, 5);
    output.writeI32(this.resourceType);
    output.writeFieldEnd();
  }
  if (this.personsCount !== null && this.personsCount !== undefined) {
    output.writeFieldBegin('personsCount', Thrift.Type.I64, 6);
    output.writeI64(this.personsCount);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 7);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_searchForMaterialResources_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [MaterialResource]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_searchForMaterialResources_result.prototype = {};
CalendarService_searchForMaterialResources_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1728 = 0;
        var _rtmp31732;
        this.success = [];
        var _etype1731 = 0;
        _rtmp31732 = input.readListBegin();
        _etype1731 = _rtmp31732.etype;
        _size1728 = _rtmp31732.size;
        for (var _i1733 = 0; _i1733 < _size1728; ++_i1733)
        {
          var elem1734 = null;
          elem1734 = new MaterialResource();
          elem1734.read(input);
          this.success.push(elem1734);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_searchForMaterialResources_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_searchForMaterialResources_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1735 in this.success)
    {
      if (this.success.hasOwnProperty(iter1735))
      {
        iter1735 = this.success[iter1735];
        iter1735.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAvailabilityCalendar_args = function(args) {
  this.token = null;
  this.meetingId = null;
  this.beginDate = null;
  this.endDate = null;
  this.userIds = null;
  this.resourceIds = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.meetingId !== undefined && args.meetingId !== null) {
      this.meetingId = args.meetingId;
    }
    if (args.beginDate !== undefined && args.beginDate !== null) {
      this.beginDate = args.beginDate;
    }
    if (args.endDate !== undefined && args.endDate !== null) {
      this.endDate = args.endDate;
    }
    if (args.userIds !== undefined && args.userIds !== null) {
      this.userIds = Thrift.copyList(args.userIds, [null]);
    }
    if (args.resourceIds !== undefined && args.resourceIds !== null) {
      this.resourceIds = Thrift.copyList(args.resourceIds, [null]);
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_getAvailabilityCalendar_args.prototype = {};
CalendarService_getAvailabilityCalendar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.meetingId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.beginDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.endDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size1736 = 0;
        var _rtmp31740;
        this.userIds = [];
        var _etype1739 = 0;
        _rtmp31740 = input.readListBegin();
        _etype1739 = _rtmp31740.etype;
        _size1736 = _rtmp31740.size;
        for (var _i1741 = 0; _i1741 < _size1736; ++_i1741)
        {
          var elem1742 = null;
          elem1742 = input.readString().value;
          this.userIds.push(elem1742);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size1743 = 0;
        var _rtmp31747;
        this.resourceIds = [];
        var _etype1746 = 0;
        _rtmp31747 = input.readListBegin();
        _etype1746 = _rtmp31747.etype;
        _size1743 = _rtmp31747.size;
        for (var _i1748 = 0; _i1748 < _size1743; ++_i1748)
        {
          var elem1749 = null;
          elem1749 = input.readString().value;
          this.resourceIds.push(elem1749);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAvailabilityCalendar_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAvailabilityCalendar_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.meetingId !== null && this.meetingId !== undefined) {
    output.writeFieldBegin('meetingId', Thrift.Type.STRING, 2);
    output.writeString(this.meetingId);
    output.writeFieldEnd();
  }
  if (this.beginDate !== null && this.beginDate !== undefined) {
    output.writeFieldBegin('beginDate', Thrift.Type.I64, 3);
    output.writeI64(this.beginDate);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.I64, 4);
    output.writeI64(this.endDate);
    output.writeFieldEnd();
  }
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.userIds.length);
    for (var iter1750 in this.userIds)
    {
      if (this.userIds.hasOwnProperty(iter1750))
      {
        iter1750 = this.userIds[iter1750];
        output.writeString(iter1750);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resourceIds !== null && this.resourceIds !== undefined) {
    output.writeFieldBegin('resourceIds', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.resourceIds.length);
    for (var iter1751 in this.resourceIds)
    {
      if (this.resourceIds.hasOwnProperty(iter1751))
      {
        iter1751 = this.resourceIds[iter1751];
        output.writeString(iter1751);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 7);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAvailabilityCalendar_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [CalendarBusinessEvent]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getAvailabilityCalendar_result.prototype = {};
CalendarService_getAvailabilityCalendar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1752 = 0;
        var _rtmp31756;
        this.success = [];
        var _etype1755 = 0;
        _rtmp31756 = input.readListBegin();
        _etype1755 = _rtmp31756.etype;
        _size1752 = _rtmp31756.size;
        for (var _i1757 = 0; _i1757 < _size1752; ++_i1757)
        {
          var elem1758 = null;
          elem1758 = new CalendarBusinessEvent();
          elem1758.read(input);
          this.success.push(elem1758);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAvailabilityCalendar_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAvailabilityCalendar_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1759 in this.success)
    {
      if (this.success.hasOwnProperty(iter1759))
      {
        iter1759 = this.success[iter1759];
        iter1759.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_confirmMeeting_args = function(args) {
  this.token = null;
  this.meetingId = null;
  this.decision = null;
  this.newDateBegin = null;
  this.newDateEnd = null;
  this.userId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.meetingId !== undefined && args.meetingId !== null) {
      this.meetingId = args.meetingId;
    }
    if (args.decision !== undefined && args.decision !== null) {
      this.decision = args.decision;
    }
    if (args.newDateBegin !== undefined && args.newDateBegin !== null) {
      this.newDateBegin = args.newDateBegin;
    }
    if (args.newDateEnd !== undefined && args.newDateEnd !== null) {
      this.newDateEnd = args.newDateEnd;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
CalendarService_confirmMeeting_args.prototype = {};
CalendarService_confirmMeeting_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.meetingId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.decision = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.newDateBegin = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.newDateEnd = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_confirmMeeting_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_confirmMeeting_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.meetingId !== null && this.meetingId !== undefined) {
    output.writeFieldBegin('meetingId', Thrift.Type.STRING, 2);
    output.writeString(this.meetingId);
    output.writeFieldEnd();
  }
  if (this.decision !== null && this.decision !== undefined) {
    output.writeFieldBegin('decision', Thrift.Type.I32, 3);
    output.writeI32(this.decision);
    output.writeFieldEnd();
  }
  if (this.newDateBegin !== null && this.newDateBegin !== undefined) {
    output.writeFieldBegin('newDateBegin', Thrift.Type.I64, 4);
    output.writeI64(this.newDateBegin);
    output.writeFieldEnd();
  }
  if (this.newDateEnd !== null && this.newDateEnd !== undefined) {
    output.writeFieldBegin('newDateEnd', Thrift.Type.I64, 5);
    output.writeI64(this.newDateEnd);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 6);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_confirmMeeting_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_confirmMeeting_result.prototype = {};
CalendarService_confirmMeeting_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_confirmMeeting_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_confirmMeeting_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_confirmMeetingAlternativeTime_args = function(args) {
  this.token = null;
  this.meetingId = null;
  this.userId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.meetingId !== undefined && args.meetingId !== null) {
      this.meetingId = args.meetingId;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
CalendarService_confirmMeetingAlternativeTime_args.prototype = {};
CalendarService_confirmMeetingAlternativeTime_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.meetingId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_confirmMeetingAlternativeTime_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_confirmMeetingAlternativeTime_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.meetingId !== null && this.meetingId !== undefined) {
    output.writeFieldBegin('meetingId', Thrift.Type.STRING, 2);
    output.writeString(this.meetingId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 3);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_confirmMeetingAlternativeTime_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_confirmMeetingAlternativeTime_result.prototype = {};
CalendarService_confirmMeetingAlternativeTime_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_confirmMeetingAlternativeTime_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_confirmMeetingAlternativeTime_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createMeetingProtocol_args = function(args) {
  this.token = null;
  this.meetingId = null;
  this.patternId = null;
  this.stageForConfirmationId = null;
  this.onlyConfirmedUsers = null;
  this.documentDeadlineDate = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.meetingId !== undefined && args.meetingId !== null) {
      this.meetingId = args.meetingId;
    }
    if (args.patternId !== undefined && args.patternId !== null) {
      this.patternId = args.patternId;
    }
    if (args.stageForConfirmationId !== undefined && args.stageForConfirmationId !== null) {
      this.stageForConfirmationId = args.stageForConfirmationId;
    }
    if (args.onlyConfirmedUsers !== undefined && args.onlyConfirmedUsers !== null) {
      this.onlyConfirmedUsers = args.onlyConfirmedUsers;
    }
    if (args.documentDeadlineDate !== undefined && args.documentDeadlineDate !== null) {
      this.documentDeadlineDate = args.documentDeadlineDate;
    }
  }
};
CalendarService_createMeetingProtocol_args.prototype = {};
CalendarService_createMeetingProtocol_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.meetingId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.patternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stageForConfirmationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.onlyConfirmedUsers = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.documentDeadlineDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createMeetingProtocol_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createMeetingProtocol_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.meetingId !== null && this.meetingId !== undefined) {
    output.writeFieldBegin('meetingId', Thrift.Type.STRING, 2);
    output.writeString(this.meetingId);
    output.writeFieldEnd();
  }
  if (this.patternId !== null && this.patternId !== undefined) {
    output.writeFieldBegin('patternId', Thrift.Type.STRING, 3);
    output.writeString(this.patternId);
    output.writeFieldEnd();
  }
  if (this.stageForConfirmationId !== null && this.stageForConfirmationId !== undefined) {
    output.writeFieldBegin('stageForConfirmationId', Thrift.Type.STRING, 4);
    output.writeString(this.stageForConfirmationId);
    output.writeFieldEnd();
  }
  if (this.onlyConfirmedUsers !== null && this.onlyConfirmedUsers !== undefined) {
    output.writeFieldBegin('onlyConfirmedUsers', Thrift.Type.BOOL, 5);
    output.writeBool(this.onlyConfirmedUsers);
    output.writeFieldEnd();
  }
  if (this.documentDeadlineDate !== null && this.documentDeadlineDate !== undefined) {
    output.writeFieldBegin('documentDeadlineDate', Thrift.Type.I64, 6);
    output.writeI64(this.documentDeadlineDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createMeetingProtocol_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Document(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_createMeetingProtocol_result.prototype = {};
CalendarService_createMeetingProtocol_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Document();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createMeetingProtocol_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createMeetingProtocol_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllCalendarSharings_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_getAllCalendarSharings_args.prototype = {};
CalendarService_getAllCalendarSharings_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllCalendarSharings_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllCalendarSharings_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllCalendarSharings_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [CalendarSharing]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getAllCalendarSharings_result.prototype = {};
CalendarService_getAllCalendarSharings_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1760 = 0;
        var _rtmp31764;
        this.success = [];
        var _etype1763 = 0;
        _rtmp31764 = input.readListBegin();
        _etype1763 = _rtmp31764.etype;
        _size1760 = _rtmp31764.size;
        for (var _i1765 = 0; _i1765 < _size1760; ++_i1765)
        {
          var elem1766 = null;
          elem1766 = new CalendarSharing();
          elem1766.read(input);
          this.success.push(elem1766);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllCalendarSharings_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllCalendarSharings_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1767 in this.success)
    {
      if (this.success.hasOwnProperty(iter1767))
      {
        iter1767 = this.success[iter1767];
        iter1767.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllCalendarSharingsToMe_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_getAllCalendarSharingsToMe_args.prototype = {};
CalendarService_getAllCalendarSharingsToMe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllCalendarSharingsToMe_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllCalendarSharingsToMe_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllCalendarSharingsToMe_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [CalendarSharing]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getAllCalendarSharingsToMe_result.prototype = {};
CalendarService_getAllCalendarSharingsToMe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1768 = 0;
        var _rtmp31772;
        this.success = [];
        var _etype1771 = 0;
        _rtmp31772 = input.readListBegin();
        _etype1771 = _rtmp31772.etype;
        _size1768 = _rtmp31772.size;
        for (var _i1773 = 0; _i1773 < _size1768; ++_i1773)
        {
          var elem1774 = null;
          elem1774 = new CalendarSharing();
          elem1774.read(input);
          this.success.push(elem1774);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllCalendarSharingsToMe_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllCalendarSharingsToMe_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1775 in this.success)
    {
      if (this.success.hasOwnProperty(iter1775))
      {
        iter1775 = this.success[iter1775];
        iter1775.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createOrUpdateCalendarSharing_args = function(args) {
  this.token = null;
  this.userOrGroups = null;
  this.sharingMode = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userOrGroups !== undefined && args.userOrGroups !== null) {
      this.userOrGroups = Thrift.copyList(args.userOrGroups, [UserOrGroup]);
    }
    if (args.sharingMode !== undefined && args.sharingMode !== null) {
      this.sharingMode = args.sharingMode;
    }
  }
};
CalendarService_createOrUpdateCalendarSharing_args.prototype = {};
CalendarService_createOrUpdateCalendarSharing_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1776 = 0;
        var _rtmp31780;
        this.userOrGroups = [];
        var _etype1779 = 0;
        _rtmp31780 = input.readListBegin();
        _etype1779 = _rtmp31780.etype;
        _size1776 = _rtmp31780.size;
        for (var _i1781 = 0; _i1781 < _size1776; ++_i1781)
        {
          var elem1782 = null;
          elem1782 = new UserOrGroup();
          elem1782.read(input);
          this.userOrGroups.push(elem1782);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sharingMode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createOrUpdateCalendarSharing_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createOrUpdateCalendarSharing_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userOrGroups !== null && this.userOrGroups !== undefined) {
    output.writeFieldBegin('userOrGroups', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroups.length);
    for (var iter1783 in this.userOrGroups)
    {
      if (this.userOrGroups.hasOwnProperty(iter1783))
      {
        iter1783 = this.userOrGroups[iter1783];
        iter1783.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sharingMode !== null && this.sharingMode !== undefined) {
    output.writeFieldBegin('sharingMode', Thrift.Type.I32, 3);
    output.writeI32(this.sharingMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createOrUpdateCalendarSharing_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [CalendarSharing]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_createOrUpdateCalendarSharing_result.prototype = {};
CalendarService_createOrUpdateCalendarSharing_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1784 = 0;
        var _rtmp31788;
        this.success = [];
        var _etype1787 = 0;
        _rtmp31788 = input.readListBegin();
        _etype1787 = _rtmp31788.etype;
        _size1784 = _rtmp31788.size;
        for (var _i1789 = 0; _i1789 < _size1784; ++_i1789)
        {
          var elem1790 = null;
          elem1790 = new CalendarSharing();
          elem1790.read(input);
          this.success.push(elem1790);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createOrUpdateCalendarSharing_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createOrUpdateCalendarSharing_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1791 in this.success)
    {
      if (this.success.hasOwnProperty(iter1791))
      {
        iter1791 = this.success[iter1791];
        iter1791.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_removeCalendarSharing_args = function(args) {
  this.token = null;
  this.sharingIds = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.sharingIds !== undefined && args.sharingIds !== null) {
      this.sharingIds = Thrift.copyList(args.sharingIds, [null]);
    }
  }
};
CalendarService_removeCalendarSharing_args.prototype = {};
CalendarService_removeCalendarSharing_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1792 = 0;
        var _rtmp31796;
        this.sharingIds = [];
        var _etype1795 = 0;
        _rtmp31796 = input.readListBegin();
        _etype1795 = _rtmp31796.etype;
        _size1792 = _rtmp31796.size;
        for (var _i1797 = 0; _i1797 < _size1792; ++_i1797)
        {
          var elem1798 = null;
          elem1798 = input.readString().value;
          this.sharingIds.push(elem1798);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_removeCalendarSharing_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_removeCalendarSharing_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.sharingIds !== null && this.sharingIds !== undefined) {
    output.writeFieldBegin('sharingIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.sharingIds.length);
    for (var iter1799 in this.sharingIds)
    {
      if (this.sharingIds.hasOwnProperty(iter1799))
      {
        iter1799 = this.sharingIds[iter1799];
        output.writeString(iter1799);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_removeCalendarSharing_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_removeCalendarSharing_result.prototype = {};
CalendarService_removeCalendarSharing_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_removeCalendarSharing_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_removeCalendarSharing_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllWeekendDictionaries_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
CalendarService_getAllWeekendDictionaries_args.prototype = {};
CalendarService_getAllWeekendDictionaries_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllWeekendDictionaries_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllWeekendDictionaries_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_getAllWeekendDictionaries_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [WeekendDictionary]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_getAllWeekendDictionaries_result.prototype = {};
CalendarService_getAllWeekendDictionaries_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1800 = 0;
        var _rtmp31804;
        this.success = [];
        var _etype1803 = 0;
        _rtmp31804 = input.readListBegin();
        _etype1803 = _rtmp31804.etype;
        _size1800 = _rtmp31804.size;
        for (var _i1805 = 0; _i1805 < _size1800; ++_i1805)
        {
          var elem1806 = null;
          elem1806 = new WeekendDictionary();
          elem1806.read(input);
          this.success.push(elem1806);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_getAllWeekendDictionaries_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_getAllWeekendDictionaries_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1807 in this.success)
    {
      if (this.success.hasOwnProperty(iter1807))
      {
        iter1807 = this.success[iter1807];
        iter1807.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createWeekendDictionaries_args = function(args) {
  this.token = null;
  this.weekendDay = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.weekendDay !== undefined && args.weekendDay !== null) {
      this.weekendDay = Thrift.copyList(args.weekendDay, [null]);
    }
  }
};
CalendarService_createWeekendDictionaries_args.prototype = {};
CalendarService_createWeekendDictionaries_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size1808 = 0;
        var _rtmp31812;
        this.weekendDay = [];
        var _etype1811 = 0;
        _rtmp31812 = input.readListBegin();
        _etype1811 = _rtmp31812.etype;
        _size1808 = _rtmp31812.size;
        for (var _i1813 = 0; _i1813 < _size1808; ++_i1813)
        {
          var elem1814 = null;
          elem1814 = input.readI64().value;
          this.weekendDay.push(elem1814);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createWeekendDictionaries_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createWeekendDictionaries_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.weekendDay !== null && this.weekendDay !== undefined) {
    output.writeFieldBegin('weekendDay', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.weekendDay.length);
    for (var iter1815 in this.weekendDay)
    {
      if (this.weekendDay.hasOwnProperty(iter1815))
      {
        iter1815 = this.weekendDay[iter1815];
        output.writeI64(iter1815);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_createWeekendDictionaries_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_createWeekendDictionaries_result.prototype = {};
CalendarService_createWeekendDictionaries_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_createWeekendDictionaries_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_createWeekendDictionaries_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_populateWeekends_args = function(args) {
  this.token = null;
  this.weekendDay = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.weekendDay !== undefined && args.weekendDay !== null) {
      this.weekendDay = args.weekendDay;
    }
  }
};
CalendarService_populateWeekends_args.prototype = {};
CalendarService_populateWeekends_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.weekendDay = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_populateWeekends_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_populateWeekends_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.weekendDay !== null && this.weekendDay !== undefined) {
    output.writeFieldBegin('weekendDay', Thrift.Type.I64, 2);
    output.writeI64(this.weekendDay);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_populateWeekends_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_populateWeekends_result.prototype = {};
CalendarService_populateWeekends_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_populateWeekends_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_populateWeekends_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_removeWeekendDictionary_args = function(args) {
  this.token = null;
  this.weekendDictionaryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.weekendDictionaryId !== undefined && args.weekendDictionaryId !== null) {
      this.weekendDictionaryId = args.weekendDictionaryId;
    }
  }
};
CalendarService_removeWeekendDictionary_args.prototype = {};
CalendarService_removeWeekendDictionary_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.weekendDictionaryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_removeWeekendDictionary_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_removeWeekendDictionary_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.weekendDictionaryId !== null && this.weekendDictionaryId !== undefined) {
    output.writeFieldBegin('weekendDictionaryId', Thrift.Type.STRING, 2);
    output.writeString(this.weekendDictionaryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_removeWeekendDictionary_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_removeWeekendDictionary_result.prototype = {};
CalendarService_removeWeekendDictionary_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_removeWeekendDictionary_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_removeWeekendDictionary_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_convertJiraTimeToDate_args = function(args) {
  this.token = null;
  this.userId = null;
  this.jiraPeriod = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.jiraPeriod !== undefined && args.jiraPeriod !== null) {
      this.jiraPeriod = args.jiraPeriod;
    }
  }
};
CalendarService_convertJiraTimeToDate_args.prototype = {};
CalendarService_convertJiraTimeToDate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.jiraPeriod = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_convertJiraTimeToDate_args.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_convertJiraTimeToDate_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.jiraPeriod !== null && this.jiraPeriod !== undefined) {
    output.writeFieldBegin('jiraPeriod', Thrift.Type.STRING, 3);
    output.writeString(this.jiraPeriod);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarService_convertJiraTimeToDate_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
CalendarService_convertJiraTimeToDate_result.prototype = {};
CalendarService_convertJiraTimeToDate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CalendarService_convertJiraTimeToDate_result.prototype.write = function(output) {
  output.writeStructBegin('CalendarService_convertJiraTimeToDate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CalendarServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
CalendarServiceClient.prototype = {};
CalendarServiceClient.prototype.getAllEvents = function(token, beginDate, endDate, usersOrGroups, filter, callback) {
  if (callback === undefined) {
    this.send_getAllEvents(token, beginDate, endDate, usersOrGroups, filter);
    return this.recv_getAllEvents();
  } else {
    var postData = this.send_getAllEvents(token, beginDate, endDate, usersOrGroups, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllEvents);
  }
};

CalendarServiceClient.prototype.send_getAllEvents = function(token, beginDate, endDate, usersOrGroups, filter, callback) {
  this.output.writeMessageBegin('getAllEvents', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    beginDate: beginDate,
    endDate: endDate,
    usersOrGroups: usersOrGroups,
    filter: filter
  };
  var args = new CalendarService_getAllEvents_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getAllEvents = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getAllEvents_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllEvents failed: unknown result';
};
CalendarServiceClient.prototype.deleteEvent = function(token, eventId, callback) {
  if (callback === undefined) {
    this.send_deleteEvent(token, eventId);
    return this.recv_deleteEvent();
  } else {
    var postData = this.send_deleteEvent(token, eventId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteEvent);
  }
};

CalendarServiceClient.prototype.send_deleteEvent = function(token, eventId, callback) {
  this.output.writeMessageBegin('deleteEvent', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    eventId: eventId
  };
  var args = new CalendarService_deleteEvent_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_deleteEvent = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_deleteEvent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteEvent failed: unknown result';
};
CalendarServiceClient.prototype.createOrUpdateEvent = function(token, event, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateEvent(token, event);
    return this.recv_createOrUpdateEvent();
  } else {
    var postData = this.send_createOrUpdateEvent(token, event, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateEvent);
  }
};

CalendarServiceClient.prototype.send_createOrUpdateEvent = function(token, event, callback) {
  this.output.writeMessageBegin('createOrUpdateEvent', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    event: event
  };
  var args = new CalendarService_createOrUpdateEvent_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_createOrUpdateEvent = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_createOrUpdateEvent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateEvent failed: unknown result';
};
CalendarServiceClient.prototype.getAllDeadlines = function(token, beginDate, endDate, usersOrGroups, filter, callback) {
  if (callback === undefined) {
    this.send_getAllDeadlines(token, beginDate, endDate, usersOrGroups, filter);
    return this.recv_getAllDeadlines();
  } else {
    var postData = this.send_getAllDeadlines(token, beginDate, endDate, usersOrGroups, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDeadlines);
  }
};

CalendarServiceClient.prototype.send_getAllDeadlines = function(token, beginDate, endDate, usersOrGroups, filter, callback) {
  this.output.writeMessageBegin('getAllDeadlines', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    beginDate: beginDate,
    endDate: endDate,
    usersOrGroups: usersOrGroups,
    filter: filter
  };
  var args = new CalendarService_getAllDeadlines_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getAllDeadlines = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getAllDeadlines_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDeadlines failed: unknown result';
};
CalendarServiceClient.prototype.getAllGroupedDeadlines = function(token, beginDate, endDate, usersOrGroups, filter, callback) {
  if (callback === undefined) {
    this.send_getAllGroupedDeadlines(token, beginDate, endDate, usersOrGroups, filter);
    return this.recv_getAllGroupedDeadlines();
  } else {
    var postData = this.send_getAllGroupedDeadlines(token, beginDate, endDate, usersOrGroups, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllGroupedDeadlines);
  }
};

CalendarServiceClient.prototype.send_getAllGroupedDeadlines = function(token, beginDate, endDate, usersOrGroups, filter, callback) {
  this.output.writeMessageBegin('getAllGroupedDeadlines', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    beginDate: beginDate,
    endDate: endDate,
    usersOrGroups: usersOrGroups,
    filter: filter
  };
  var args = new CalendarService_getAllGroupedDeadlines_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getAllGroupedDeadlines = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getAllGroupedDeadlines_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllGroupedDeadlines failed: unknown result';
};
CalendarServiceClient.prototype.getAllAreas = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllAreas(token, filter);
    return this.recv_getAllAreas();
  } else {
    var postData = this.send_getAllAreas(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllAreas);
  }
};

CalendarServiceClient.prototype.send_getAllAreas = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllAreas', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new CalendarService_getAllAreas_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getAllAreas = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getAllAreas_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllAreas failed: unknown result';
};
CalendarServiceClient.prototype.getCountAllAreas = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getCountAllAreas(token, filter);
    return this.recv_getCountAllAreas();
  } else {
    var postData = this.send_getCountAllAreas(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCountAllAreas);
  }
};

CalendarServiceClient.prototype.send_getCountAllAreas = function(token, filter, callback) {
  this.output.writeMessageBegin('getCountAllAreas', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new CalendarService_getCountAllAreas_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getCountAllAreas = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getCountAllAreas_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAllAreas failed: unknown result';
};
CalendarServiceClient.prototype.createOrUpdateArea = function(token, area, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateArea(token, area);
    return this.recv_createOrUpdateArea();
  } else {
    var postData = this.send_createOrUpdateArea(token, area, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateArea);
  }
};

CalendarServiceClient.prototype.send_createOrUpdateArea = function(token, area, callback) {
  this.output.writeMessageBegin('createOrUpdateArea', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    area: area
  };
  var args = new CalendarService_createOrUpdateArea_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_createOrUpdateArea = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_createOrUpdateArea_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateArea failed: unknown result';
};
CalendarServiceClient.prototype.deleteArea = function(token, areaId, callback) {
  if (callback === undefined) {
    this.send_deleteArea(token, areaId);
    return this.recv_deleteArea();
  } else {
    var postData = this.send_deleteArea(token, areaId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteArea);
  }
};

CalendarServiceClient.prototype.send_deleteArea = function(token, areaId, callback) {
  this.output.writeMessageBegin('deleteArea', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    areaId: areaId
  };
  var args = new CalendarService_deleteArea_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_deleteArea = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_deleteArea_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteArea failed: unknown result';
};
CalendarServiceClient.prototype.getAllReassignments = function(token, beginDate, endDate, filter, callback) {
  if (callback === undefined) {
    this.send_getAllReassignments(token, beginDate, endDate, filter);
    return this.recv_getAllReassignments();
  } else {
    var postData = this.send_getAllReassignments(token, beginDate, endDate, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllReassignments);
  }
};

CalendarServiceClient.prototype.send_getAllReassignments = function(token, beginDate, endDate, filter, callback) {
  this.output.writeMessageBegin('getAllReassignments', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    beginDate: beginDate,
    endDate: endDate,
    filter: filter
  };
  var args = new CalendarService_getAllReassignments_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getAllReassignments = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getAllReassignments_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllReassignments failed: unknown result';
};
CalendarServiceClient.prototype.getAllMaterialResources = function(token, areaId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllMaterialResources(token, areaId, filter);
    return this.recv_getAllMaterialResources();
  } else {
    var postData = this.send_getAllMaterialResources(token, areaId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllMaterialResources);
  }
};

CalendarServiceClient.prototype.send_getAllMaterialResources = function(token, areaId, filter, callback) {
  this.output.writeMessageBegin('getAllMaterialResources', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    areaId: areaId,
    filter: filter
  };
  var args = new CalendarService_getAllMaterialResources_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getAllMaterialResources = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getAllMaterialResources_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllMaterialResources failed: unknown result';
};
CalendarServiceClient.prototype.getCountAllMaterialResources = function(token, areaId, filter, callback) {
  if (callback === undefined) {
    this.send_getCountAllMaterialResources(token, areaId, filter);
    return this.recv_getCountAllMaterialResources();
  } else {
    var postData = this.send_getCountAllMaterialResources(token, areaId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCountAllMaterialResources);
  }
};

CalendarServiceClient.prototype.send_getCountAllMaterialResources = function(token, areaId, filter, callback) {
  this.output.writeMessageBegin('getCountAllMaterialResources', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    areaId: areaId,
    filter: filter
  };
  var args = new CalendarService_getCountAllMaterialResources_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getCountAllMaterialResources = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getCountAllMaterialResources_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCountAllMaterialResources failed: unknown result';
};
CalendarServiceClient.prototype.createOrUpdateMaterialResource = function(token, materialResource, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateMaterialResource(token, materialResource);
    return this.recv_createOrUpdateMaterialResource();
  } else {
    var postData = this.send_createOrUpdateMaterialResource(token, materialResource, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateMaterialResource);
  }
};

CalendarServiceClient.prototype.send_createOrUpdateMaterialResource = function(token, materialResource, callback) {
  this.output.writeMessageBegin('createOrUpdateMaterialResource', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    materialResource: materialResource
  };
  var args = new CalendarService_createOrUpdateMaterialResource_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_createOrUpdateMaterialResource = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_createOrUpdateMaterialResource_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateMaterialResource failed: unknown result';
};
CalendarServiceClient.prototype.deleteMaterialResource = function(token, materialResourceId, callback) {
  if (callback === undefined) {
    this.send_deleteMaterialResource(token, materialResourceId);
    return this.recv_deleteMaterialResource();
  } else {
    var postData = this.send_deleteMaterialResource(token, materialResourceId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteMaterialResource);
  }
};

CalendarServiceClient.prototype.send_deleteMaterialResource = function(token, materialResourceId, callback) {
  this.output.writeMessageBegin('deleteMaterialResource', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    materialResourceId: materialResourceId
  };
  var args = new CalendarService_deleteMaterialResource_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_deleteMaterialResource = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_deleteMaterialResource_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteMaterialResource failed: unknown result';
};
CalendarServiceClient.prototype.moveMaterialResource = function(token, resourceId, areaId, callback) {
  if (callback === undefined) {
    this.send_moveMaterialResource(token, resourceId, areaId);
    return this.recv_moveMaterialResource();
  } else {
    var postData = this.send_moveMaterialResource(token, resourceId, areaId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_moveMaterialResource);
  }
};

CalendarServiceClient.prototype.send_moveMaterialResource = function(token, resourceId, areaId, callback) {
  this.output.writeMessageBegin('moveMaterialResource', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    resourceId: resourceId,
    areaId: areaId
  };
  var args = new CalendarService_moveMaterialResource_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_moveMaterialResource = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_moveMaterialResource_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'moveMaterialResource failed: unknown result';
};
CalendarServiceClient.prototype.getAllMeetings = function(token, beginDate, endDate, usersOrGroups, filter, callback) {
  if (callback === undefined) {
    this.send_getAllMeetings(token, beginDate, endDate, usersOrGroups, filter);
    return this.recv_getAllMeetings();
  } else {
    var postData = this.send_getAllMeetings(token, beginDate, endDate, usersOrGroups, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllMeetings);
  }
};

CalendarServiceClient.prototype.send_getAllMeetings = function(token, beginDate, endDate, usersOrGroups, filter, callback) {
  this.output.writeMessageBegin('getAllMeetings', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    beginDate: beginDate,
    endDate: endDate,
    usersOrGroups: usersOrGroups,
    filter: filter
  };
  var args = new CalendarService_getAllMeetings_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getAllMeetings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getAllMeetings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllMeetings failed: unknown result';
};
CalendarServiceClient.prototype.createOrUpdateMeeting = function(token, meeting, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateMeeting(token, meeting);
    return this.recv_createOrUpdateMeeting();
  } else {
    var postData = this.send_createOrUpdateMeeting(token, meeting, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateMeeting);
  }
};

CalendarServiceClient.prototype.send_createOrUpdateMeeting = function(token, meeting, callback) {
  this.output.writeMessageBegin('createOrUpdateMeeting', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    meeting: meeting
  };
  var args = new CalendarService_createOrUpdateMeeting_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_createOrUpdateMeeting = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_createOrUpdateMeeting_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateMeeting failed: unknown result';
};
CalendarServiceClient.prototype.getMeetingById = function(token, meetingId, callback) {
  if (callback === undefined) {
    this.send_getMeetingById(token, meetingId);
    return this.recv_getMeetingById();
  } else {
    var postData = this.send_getMeetingById(token, meetingId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getMeetingById);
  }
};

CalendarServiceClient.prototype.send_getMeetingById = function(token, meetingId, callback) {
  this.output.writeMessageBegin('getMeetingById', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    meetingId: meetingId
  };
  var args = new CalendarService_getMeetingById_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getMeetingById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getMeetingById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getMeetingById failed: unknown result';
};
CalendarServiceClient.prototype.deleteMeeting = function(token, meetingId, callback) {
  if (callback === undefined) {
    this.send_deleteMeeting(token, meetingId);
    return this.recv_deleteMeeting();
  } else {
    var postData = this.send_deleteMeeting(token, meetingId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteMeeting);
  }
};

CalendarServiceClient.prototype.send_deleteMeeting = function(token, meetingId, callback) {
  this.output.writeMessageBegin('deleteMeeting', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    meetingId: meetingId
  };
  var args = new CalendarService_deleteMeeting_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_deleteMeeting = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_deleteMeeting_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteMeeting failed: unknown result';
};
CalendarServiceClient.prototype.setMeetingViewed = function(token, meetingId, viewed, callback) {
  if (callback === undefined) {
    this.send_setMeetingViewed(token, meetingId, viewed);
    return this.recv_setMeetingViewed();
  } else {
    var postData = this.send_setMeetingViewed(token, meetingId, viewed, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setMeetingViewed);
  }
};

CalendarServiceClient.prototype.send_setMeetingViewed = function(token, meetingId, viewed, callback) {
  this.output.writeMessageBegin('setMeetingViewed', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    meetingId: meetingId,
    viewed: viewed
  };
  var args = new CalendarService_setMeetingViewed_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_setMeetingViewed = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_setMeetingViewed_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'setMeetingViewed failed: unknown result';
};
CalendarServiceClient.prototype.searchForMaterialResources = function(token, areaId, beginDate, endDate, resourceType, personsCount, filter, callback) {
  if (callback === undefined) {
    this.send_searchForMaterialResources(token, areaId, beginDate, endDate, resourceType, personsCount, filter);
    return this.recv_searchForMaterialResources();
  } else {
    var postData = this.send_searchForMaterialResources(token, areaId, beginDate, endDate, resourceType, personsCount, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_searchForMaterialResources);
  }
};

CalendarServiceClient.prototype.send_searchForMaterialResources = function(token, areaId, beginDate, endDate, resourceType, personsCount, filter, callback) {
  this.output.writeMessageBegin('searchForMaterialResources', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    areaId: areaId,
    beginDate: beginDate,
    endDate: endDate,
    resourceType: resourceType,
    personsCount: personsCount,
    filter: filter
  };
  var args = new CalendarService_searchForMaterialResources_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_searchForMaterialResources = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_searchForMaterialResources_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'searchForMaterialResources failed: unknown result';
};
CalendarServiceClient.prototype.getAvailabilityCalendar = function(token, meetingId, beginDate, endDate, userIds, resourceIds, filter, callback) {
  if (callback === undefined) {
    this.send_getAvailabilityCalendar(token, meetingId, beginDate, endDate, userIds, resourceIds, filter);
    return this.recv_getAvailabilityCalendar();
  } else {
    var postData = this.send_getAvailabilityCalendar(token, meetingId, beginDate, endDate, userIds, resourceIds, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAvailabilityCalendar);
  }
};

CalendarServiceClient.prototype.send_getAvailabilityCalendar = function(token, meetingId, beginDate, endDate, userIds, resourceIds, filter, callback) {
  this.output.writeMessageBegin('getAvailabilityCalendar', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    meetingId: meetingId,
    beginDate: beginDate,
    endDate: endDate,
    userIds: userIds,
    resourceIds: resourceIds,
    filter: filter
  };
  var args = new CalendarService_getAvailabilityCalendar_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getAvailabilityCalendar = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getAvailabilityCalendar_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAvailabilityCalendar failed: unknown result';
};
CalendarServiceClient.prototype.confirmMeeting = function(token, meetingId, decision, newDateBegin, newDateEnd, userId, callback) {
  if (callback === undefined) {
    this.send_confirmMeeting(token, meetingId, decision, newDateBegin, newDateEnd, userId);
    return this.recv_confirmMeeting();
  } else {
    var postData = this.send_confirmMeeting(token, meetingId, decision, newDateBegin, newDateEnd, userId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_confirmMeeting);
  }
};

CalendarServiceClient.prototype.send_confirmMeeting = function(token, meetingId, decision, newDateBegin, newDateEnd, userId, callback) {
  this.output.writeMessageBegin('confirmMeeting', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    meetingId: meetingId,
    decision: decision,
    newDateBegin: newDateBegin,
    newDateEnd: newDateEnd,
    userId: userId
  };
  var args = new CalendarService_confirmMeeting_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_confirmMeeting = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_confirmMeeting_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'confirmMeeting failed: unknown result';
};
CalendarServiceClient.prototype.confirmMeetingAlternativeTime = function(token, meetingId, userId, callback) {
  if (callback === undefined) {
    this.send_confirmMeetingAlternativeTime(token, meetingId, userId);
    return this.recv_confirmMeetingAlternativeTime();
  } else {
    var postData = this.send_confirmMeetingAlternativeTime(token, meetingId, userId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_confirmMeetingAlternativeTime);
  }
};

CalendarServiceClient.prototype.send_confirmMeetingAlternativeTime = function(token, meetingId, userId, callback) {
  this.output.writeMessageBegin('confirmMeetingAlternativeTime', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    meetingId: meetingId,
    userId: userId
  };
  var args = new CalendarService_confirmMeetingAlternativeTime_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_confirmMeetingAlternativeTime = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_confirmMeetingAlternativeTime_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'confirmMeetingAlternativeTime failed: unknown result';
};
CalendarServiceClient.prototype.createMeetingProtocol = function(token, meetingId, patternId, stageForConfirmationId, onlyConfirmedUsers, documentDeadlineDate, callback) {
  if (callback === undefined) {
    this.send_createMeetingProtocol(token, meetingId, patternId, stageForConfirmationId, onlyConfirmedUsers, documentDeadlineDate);
    return this.recv_createMeetingProtocol();
  } else {
    var postData = this.send_createMeetingProtocol(token, meetingId, patternId, stageForConfirmationId, onlyConfirmedUsers, documentDeadlineDate, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createMeetingProtocol);
  }
};

CalendarServiceClient.prototype.send_createMeetingProtocol = function(token, meetingId, patternId, stageForConfirmationId, onlyConfirmedUsers, documentDeadlineDate, callback) {
  this.output.writeMessageBegin('createMeetingProtocol', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    meetingId: meetingId,
    patternId: patternId,
    stageForConfirmationId: stageForConfirmationId,
    onlyConfirmedUsers: onlyConfirmedUsers,
    documentDeadlineDate: documentDeadlineDate
  };
  var args = new CalendarService_createMeetingProtocol_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_createMeetingProtocol = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_createMeetingProtocol_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createMeetingProtocol failed: unknown result';
};
CalendarServiceClient.prototype.getAllCalendarSharings = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllCalendarSharings(token, filter);
    return this.recv_getAllCalendarSharings();
  } else {
    var postData = this.send_getAllCalendarSharings(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllCalendarSharings);
  }
};

CalendarServiceClient.prototype.send_getAllCalendarSharings = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllCalendarSharings', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new CalendarService_getAllCalendarSharings_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getAllCalendarSharings = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getAllCalendarSharings_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllCalendarSharings failed: unknown result';
};
CalendarServiceClient.prototype.getAllCalendarSharingsToMe = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllCalendarSharingsToMe(token, filter);
    return this.recv_getAllCalendarSharingsToMe();
  } else {
    var postData = this.send_getAllCalendarSharingsToMe(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllCalendarSharingsToMe);
  }
};

CalendarServiceClient.prototype.send_getAllCalendarSharingsToMe = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllCalendarSharingsToMe', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new CalendarService_getAllCalendarSharingsToMe_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getAllCalendarSharingsToMe = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getAllCalendarSharingsToMe_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllCalendarSharingsToMe failed: unknown result';
};
CalendarServiceClient.prototype.createOrUpdateCalendarSharing = function(token, userOrGroups, sharingMode, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateCalendarSharing(token, userOrGroups, sharingMode);
    return this.recv_createOrUpdateCalendarSharing();
  } else {
    var postData = this.send_createOrUpdateCalendarSharing(token, userOrGroups, sharingMode, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateCalendarSharing);
  }
};

CalendarServiceClient.prototype.send_createOrUpdateCalendarSharing = function(token, userOrGroups, sharingMode, callback) {
  this.output.writeMessageBegin('createOrUpdateCalendarSharing', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userOrGroups: userOrGroups,
    sharingMode: sharingMode
  };
  var args = new CalendarService_createOrUpdateCalendarSharing_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_createOrUpdateCalendarSharing = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_createOrUpdateCalendarSharing_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateCalendarSharing failed: unknown result';
};
CalendarServiceClient.prototype.removeCalendarSharing = function(token, sharingIds, callback) {
  if (callback === undefined) {
    this.send_removeCalendarSharing(token, sharingIds);
    return this.recv_removeCalendarSharing();
  } else {
    var postData = this.send_removeCalendarSharing(token, sharingIds, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeCalendarSharing);
  }
};

CalendarServiceClient.prototype.send_removeCalendarSharing = function(token, sharingIds, callback) {
  this.output.writeMessageBegin('removeCalendarSharing', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    sharingIds: sharingIds
  };
  var args = new CalendarService_removeCalendarSharing_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_removeCalendarSharing = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_removeCalendarSharing_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeCalendarSharing failed: unknown result';
};
CalendarServiceClient.prototype.getAllWeekendDictionaries = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllWeekendDictionaries(token, filter);
    return this.recv_getAllWeekendDictionaries();
  } else {
    var postData = this.send_getAllWeekendDictionaries(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllWeekendDictionaries);
  }
};

CalendarServiceClient.prototype.send_getAllWeekendDictionaries = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllWeekendDictionaries', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new CalendarService_getAllWeekendDictionaries_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_getAllWeekendDictionaries = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_getAllWeekendDictionaries_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllWeekendDictionaries failed: unknown result';
};
CalendarServiceClient.prototype.createWeekendDictionaries = function(token, weekendDay, callback) {
  if (callback === undefined) {
    this.send_createWeekendDictionaries(token, weekendDay);
    return this.recv_createWeekendDictionaries();
  } else {
    var postData = this.send_createWeekendDictionaries(token, weekendDay, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createWeekendDictionaries);
  }
};

CalendarServiceClient.prototype.send_createWeekendDictionaries = function(token, weekendDay, callback) {
  this.output.writeMessageBegin('createWeekendDictionaries', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    weekendDay: weekendDay
  };
  var args = new CalendarService_createWeekendDictionaries_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_createWeekendDictionaries = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_createWeekendDictionaries_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createWeekendDictionaries failed: unknown result';
};
CalendarServiceClient.prototype.populateWeekends = function(token, weekendDay, callback) {
  if (callback === undefined) {
    this.send_populateWeekends(token, weekendDay);
    return this.recv_populateWeekends();
  } else {
    var postData = this.send_populateWeekends(token, weekendDay, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_populateWeekends);
  }
};

CalendarServiceClient.prototype.send_populateWeekends = function(token, weekendDay, callback) {
  this.output.writeMessageBegin('populateWeekends', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    weekendDay: weekendDay
  };
  var args = new CalendarService_populateWeekends_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_populateWeekends = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_populateWeekends_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'populateWeekends failed: unknown result';
};
CalendarServiceClient.prototype.removeWeekendDictionary = function(token, weekendDictionaryId, callback) {
  if (callback === undefined) {
    this.send_removeWeekendDictionary(token, weekendDictionaryId);
    return this.recv_removeWeekendDictionary();
  } else {
    var postData = this.send_removeWeekendDictionary(token, weekendDictionaryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeWeekendDictionary);
  }
};

CalendarServiceClient.prototype.send_removeWeekendDictionary = function(token, weekendDictionaryId, callback) {
  this.output.writeMessageBegin('removeWeekendDictionary', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    weekendDictionaryId: weekendDictionaryId
  };
  var args = new CalendarService_removeWeekendDictionary_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_removeWeekendDictionary = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_removeWeekendDictionary_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeWeekendDictionary failed: unknown result';
};
CalendarServiceClient.prototype.convertJiraTimeToDate = function(token, userId, jiraPeriod, callback) {
  if (callback === undefined) {
    this.send_convertJiraTimeToDate(token, userId, jiraPeriod);
    return this.recv_convertJiraTimeToDate();
  } else {
    var postData = this.send_convertJiraTimeToDate(token, userId, jiraPeriod, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_convertJiraTimeToDate);
  }
};

CalendarServiceClient.prototype.send_convertJiraTimeToDate = function(token, userId, jiraPeriod, callback) {
  this.output.writeMessageBegin('convertJiraTimeToDate', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    userId: userId,
    jiraPeriod: jiraPeriod
  };
  var args = new CalendarService_convertJiraTimeToDate_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CalendarServiceClient.prototype.recv_convertJiraTimeToDate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CalendarService_convertJiraTimeToDate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'convertJiraTimeToDate failed: unknown result';
};
