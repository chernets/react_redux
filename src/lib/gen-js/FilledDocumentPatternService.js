//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

FilledDocumentPatternService_getFilledDocumentPattern_args = function(args) {
  this.token = null;
  this.filledDocumentPatternId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filledDocumentPatternId !== undefined && args.filledDocumentPatternId !== null) {
      this.filledDocumentPatternId = args.filledDocumentPatternId;
    }
  }
};
FilledDocumentPatternService_getFilledDocumentPattern_args.prototype = {};
FilledDocumentPatternService_getFilledDocumentPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filledDocumentPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getFilledDocumentPattern_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getFilledDocumentPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filledDocumentPatternId !== null && this.filledDocumentPatternId !== undefined) {
    output.writeFieldBegin('filledDocumentPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.filledDocumentPatternId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_getFilledDocumentPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new FreezeDocumentPattern(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_getFilledDocumentPattern_result.prototype = {};
FilledDocumentPatternService_getFilledDocumentPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FreezeDocumentPattern();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getFilledDocumentPattern_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getFilledDocumentPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_createOrUpdateFilledDocumentPattern_args = function(args) {
  this.token = null;
  this.freezeDocumentPattern = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.freezeDocumentPattern !== undefined && args.freezeDocumentPattern !== null) {
      this.freezeDocumentPattern = new FreezeDocumentPattern(args.freezeDocumentPattern);
    }
  }
};
FilledDocumentPatternService_createOrUpdateFilledDocumentPattern_args.prototype = {};
FilledDocumentPatternService_createOrUpdateFilledDocumentPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.freezeDocumentPattern = new FreezeDocumentPattern();
        this.freezeDocumentPattern.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_createOrUpdateFilledDocumentPattern_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_createOrUpdateFilledDocumentPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.freezeDocumentPattern !== null && this.freezeDocumentPattern !== undefined) {
    output.writeFieldBegin('freezeDocumentPattern', Thrift.Type.STRUCT, 2);
    this.freezeDocumentPattern.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_createOrUpdateFilledDocumentPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new FreezeDocumentPattern(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_createOrUpdateFilledDocumentPattern_result.prototype = {};
FilledDocumentPatternService_createOrUpdateFilledDocumentPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FreezeDocumentPattern();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_createOrUpdateFilledDocumentPattern_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_createOrUpdateFilledDocumentPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_createAndCheckFilledDocumentPattern_args = function(args) {
  this.token = null;
  this.freezeDocumentPattern = null;
  this.stages = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.freezeDocumentPattern !== undefined && args.freezeDocumentPattern !== null) {
      this.freezeDocumentPattern = new FreezeDocumentPattern(args.freezeDocumentPattern);
    }
    if (args.stages !== undefined && args.stages !== null) {
      this.stages = Thrift.copyList(args.stages, [DocumentPatternStage]);
    }
  }
};
FilledDocumentPatternService_createAndCheckFilledDocumentPattern_args.prototype = {};
FilledDocumentPatternService_createAndCheckFilledDocumentPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.freezeDocumentPattern = new FreezeDocumentPattern();
        this.freezeDocumentPattern.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1524 = 0;
        var _rtmp31528;
        this.stages = [];
        var _etype1527 = 0;
        _rtmp31528 = input.readListBegin();
        _etype1527 = _rtmp31528.etype;
        _size1524 = _rtmp31528.size;
        for (var _i1529 = 0; _i1529 < _size1524; ++_i1529)
        {
          var elem1530 = null;
          elem1530 = new DocumentPatternStage();
          elem1530.read(input);
          this.stages.push(elem1530);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_createAndCheckFilledDocumentPattern_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_createAndCheckFilledDocumentPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.freezeDocumentPattern !== null && this.freezeDocumentPattern !== undefined) {
    output.writeFieldBegin('freezeDocumentPattern', Thrift.Type.STRUCT, 2);
    this.freezeDocumentPattern.write(output);
    output.writeFieldEnd();
  }
  if (this.stages !== null && this.stages !== undefined) {
    output.writeFieldBegin('stages', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.stages.length);
    for (var iter1531 in this.stages)
    {
      if (this.stages.hasOwnProperty(iter1531))
      {
        iter1531 = this.stages[iter1531];
        iter1531.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_createAndCheckFilledDocumentPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new FreezePatternValidation(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_createAndCheckFilledDocumentPattern_result.prototype = {};
FilledDocumentPatternService_createAndCheckFilledDocumentPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FreezePatternValidation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_createAndCheckFilledDocumentPattern_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_createAndCheckFilledDocumentPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_deleteFilledDocumentPattern_args = function(args) {
  this.token = null;
  this.filledDocumentPatternId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filledDocumentPatternId !== undefined && args.filledDocumentPatternId !== null) {
      this.filledDocumentPatternId = args.filledDocumentPatternId;
    }
  }
};
FilledDocumentPatternService_deleteFilledDocumentPattern_args.prototype = {};
FilledDocumentPatternService_deleteFilledDocumentPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filledDocumentPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_deleteFilledDocumentPattern_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_deleteFilledDocumentPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filledDocumentPatternId !== null && this.filledDocumentPatternId !== undefined) {
    output.writeFieldBegin('filledDocumentPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.filledDocumentPatternId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_deleteFilledDocumentPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_deleteFilledDocumentPattern_result.prototype = {};
FilledDocumentPatternService_deleteFilledDocumentPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_deleteFilledDocumentPattern_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_deleteFilledDocumentPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_getAllFilledDocumentPatternStages_args = function(args) {
  this.token = null;
  this.fillDocPatternId = null;
  this.filter = null;
  this.selector = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fillDocPatternId !== undefined && args.fillDocPatternId !== null) {
      this.fillDocPatternId = args.fillDocPatternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
    if (args.selector !== undefined && args.selector !== null) {
      this.selector = args.selector;
    }
  }
};
FilledDocumentPatternService_getAllFilledDocumentPatternStages_args.prototype = {};
FilledDocumentPatternService_getAllFilledDocumentPatternStages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fillDocPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.selector = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getAllFilledDocumentPatternStages_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getAllFilledDocumentPatternStages_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fillDocPatternId !== null && this.fillDocPatternId !== undefined) {
    output.writeFieldBegin('fillDocPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.fillDocPatternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.I32, 4);
    output.writeI32(this.selector);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_getAllFilledDocumentPatternStages_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStage]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_getAllFilledDocumentPatternStages_result.prototype = {};
FilledDocumentPatternService_getAllFilledDocumentPatternStages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1532 = 0;
        var _rtmp31536;
        this.success = [];
        var _etype1535 = 0;
        _rtmp31536 = input.readListBegin();
        _etype1535 = _rtmp31536.etype;
        _size1532 = _rtmp31536.size;
        for (var _i1537 = 0; _i1537 < _size1532; ++_i1537)
        {
          var elem1538 = null;
          elem1538 = new DocumentPatternStage();
          elem1538.read(input);
          this.success.push(elem1538);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getAllFilledDocumentPatternStages_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getAllFilledDocumentPatternStages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1539 in this.success)
    {
      if (this.success.hasOwnProperty(iter1539))
      {
        iter1539 = this.success[iter1539];
        iter1539.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_getFilledDocumentPatternStage_args = function(args) {
  this.token = null;
  this.fillDocPatternId = null;
  this.stageId = null;
  this.selector = null;
  this.registryId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fillDocPatternId !== undefined && args.fillDocPatternId !== null) {
      this.fillDocPatternId = args.fillDocPatternId;
    }
    if (args.stageId !== undefined && args.stageId !== null) {
      this.stageId = args.stageId;
    }
    if (args.selector !== undefined && args.selector !== null) {
      this.selector = args.selector;
    }
    if (args.registryId !== undefined && args.registryId !== null) {
      this.registryId = args.registryId;
    }
  }
};
FilledDocumentPatternService_getFilledDocumentPatternStage_args.prototype = {};
FilledDocumentPatternService_getFilledDocumentPatternStage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fillDocPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.selector = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.registryId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getFilledDocumentPatternStage_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getFilledDocumentPatternStage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fillDocPatternId !== null && this.fillDocPatternId !== undefined) {
    output.writeFieldBegin('fillDocPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.fillDocPatternId);
    output.writeFieldEnd();
  }
  if (this.stageId !== null && this.stageId !== undefined) {
    output.writeFieldBegin('stageId', Thrift.Type.STRING, 3);
    output.writeString(this.stageId);
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.I32, 4);
    output.writeI32(this.selector);
    output.writeFieldEnd();
  }
  if (this.registryId !== null && this.registryId !== undefined) {
    output.writeFieldBegin('registryId', Thrift.Type.STRING, 5);
    output.writeString(this.registryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_getFilledDocumentPatternStage_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentPatternStage(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_getFilledDocumentPatternStage_result.prototype = {};
FilledDocumentPatternService_getFilledDocumentPatternStage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentPatternStage();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getFilledDocumentPatternStage_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getFilledDocumentPatternStage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_getAllChildFilledDocumentPatternStages_args = function(args) {
  this.token = null;
  this.fillDocPatternId = null;
  this.stageId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fillDocPatternId !== undefined && args.fillDocPatternId !== null) {
      this.fillDocPatternId = args.fillDocPatternId;
    }
    if (args.stageId !== undefined && args.stageId !== null) {
      this.stageId = args.stageId;
    }
  }
};
FilledDocumentPatternService_getAllChildFilledDocumentPatternStages_args.prototype = {};
FilledDocumentPatternService_getAllChildFilledDocumentPatternStages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fillDocPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getAllChildFilledDocumentPatternStages_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getAllChildFilledDocumentPatternStages_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fillDocPatternId !== null && this.fillDocPatternId !== undefined) {
    output.writeFieldBegin('fillDocPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.fillDocPatternId);
    output.writeFieldEnd();
  }
  if (this.stageId !== null && this.stageId !== undefined) {
    output.writeFieldBegin('stageId', Thrift.Type.STRING, 3);
    output.writeString(this.stageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_getAllChildFilledDocumentPatternStages_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStage]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_getAllChildFilledDocumentPatternStages_result.prototype = {};
FilledDocumentPatternService_getAllChildFilledDocumentPatternStages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1540 = 0;
        var _rtmp31544;
        this.success = [];
        var _etype1543 = 0;
        _rtmp31544 = input.readListBegin();
        _etype1543 = _rtmp31544.etype;
        _size1540 = _rtmp31544.size;
        for (var _i1545 = 0; _i1545 < _size1540; ++_i1545)
        {
          var elem1546 = null;
          elem1546 = new DocumentPatternStage();
          elem1546.read(input);
          this.success.push(elem1546);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getAllChildFilledDocumentPatternStages_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getAllChildFilledDocumentPatternStages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1547 in this.success)
    {
      if (this.success.hasOwnProperty(iter1547))
      {
        iter1547 = this.success[iter1547];
        iter1547.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_updateFilledDocumentPatternStage_args = function(args) {
  this.token = null;
  this.fillDocPatternId = null;
  this.documentPatternStage = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fillDocPatternId !== undefined && args.fillDocPatternId !== null) {
      this.fillDocPatternId = args.fillDocPatternId;
    }
    if (args.documentPatternStage !== undefined && args.documentPatternStage !== null) {
      this.documentPatternStage = new DocumentPatternStage(args.documentPatternStage);
    }
  }
};
FilledDocumentPatternService_updateFilledDocumentPatternStage_args.prototype = {};
FilledDocumentPatternService_updateFilledDocumentPatternStage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fillDocPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.documentPatternStage = new DocumentPatternStage();
        this.documentPatternStage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_updateFilledDocumentPatternStage_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_updateFilledDocumentPatternStage_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fillDocPatternId !== null && this.fillDocPatternId !== undefined) {
    output.writeFieldBegin('fillDocPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.fillDocPatternId);
    output.writeFieldEnd();
  }
  if (this.documentPatternStage !== null && this.documentPatternStage !== undefined) {
    output.writeFieldBegin('documentPatternStage', Thrift.Type.STRUCT, 3);
    this.documentPatternStage.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_updateFilledDocumentPatternStage_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocumentPatternStage(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_updateFilledDocumentPatternStage_result.prototype = {};
FilledDocumentPatternService_updateFilledDocumentPatternStage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocumentPatternStage();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_updateFilledDocumentPatternStage_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_updateFilledDocumentPatternStage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_updateFilledDocumentPatternStageList_args = function(args) {
  this.token = null;
  this.fillDocPatternId = null;
  this.documentPatternStage = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fillDocPatternId !== undefined && args.fillDocPatternId !== null) {
      this.fillDocPatternId = args.fillDocPatternId;
    }
    if (args.documentPatternStage !== undefined && args.documentPatternStage !== null) {
      this.documentPatternStage = Thrift.copyList(args.documentPatternStage, [DocumentPatternStage]);
    }
  }
};
FilledDocumentPatternService_updateFilledDocumentPatternStageList_args.prototype = {};
FilledDocumentPatternService_updateFilledDocumentPatternStageList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fillDocPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1548 = 0;
        var _rtmp31552;
        this.documentPatternStage = [];
        var _etype1551 = 0;
        _rtmp31552 = input.readListBegin();
        _etype1551 = _rtmp31552.etype;
        _size1548 = _rtmp31552.size;
        for (var _i1553 = 0; _i1553 < _size1548; ++_i1553)
        {
          var elem1554 = null;
          elem1554 = new DocumentPatternStage();
          elem1554.read(input);
          this.documentPatternStage.push(elem1554);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_updateFilledDocumentPatternStageList_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_updateFilledDocumentPatternStageList_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fillDocPatternId !== null && this.fillDocPatternId !== undefined) {
    output.writeFieldBegin('fillDocPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.fillDocPatternId);
    output.writeFieldEnd();
  }
  if (this.documentPatternStage !== null && this.documentPatternStage !== undefined) {
    output.writeFieldBegin('documentPatternStage', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.documentPatternStage.length);
    for (var iter1555 in this.documentPatternStage)
    {
      if (this.documentPatternStage.hasOwnProperty(iter1555))
      {
        iter1555 = this.documentPatternStage[iter1555];
        iter1555.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_updateFilledDocumentPatternStageList_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStage]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_updateFilledDocumentPatternStageList_result.prototype = {};
FilledDocumentPatternService_updateFilledDocumentPatternStageList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1556 = 0;
        var _rtmp31560;
        this.success = [];
        var _etype1559 = 0;
        _rtmp31560 = input.readListBegin();
        _etype1559 = _rtmp31560.etype;
        _size1556 = _rtmp31560.size;
        for (var _i1561 = 0; _i1561 < _size1556; ++_i1561)
        {
          var elem1562 = null;
          elem1562 = new DocumentPatternStage();
          elem1562.read(input);
          this.success.push(elem1562);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_updateFilledDocumentPatternStageList_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_updateFilledDocumentPatternStageList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1563 in this.success)
    {
      if (this.success.hasOwnProperty(iter1563))
      {
        iter1563 = this.success[iter1563];
        iter1563.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_updateFilledDocumentPatternStagesLink_args = function(args) {
  this.token = null;
  this.fillDocPatternId = null;
  this.links = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fillDocPatternId !== undefined && args.fillDocPatternId !== null) {
      this.fillDocPatternId = args.fillDocPatternId;
    }
    if (args.links !== undefined && args.links !== null) {
      this.links = Thrift.copyList(args.links, [DocumentPatternStagesLink]);
    }
  }
};
FilledDocumentPatternService_updateFilledDocumentPatternStagesLink_args.prototype = {};
FilledDocumentPatternService_updateFilledDocumentPatternStagesLink_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fillDocPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1564 = 0;
        var _rtmp31568;
        this.links = [];
        var _etype1567 = 0;
        _rtmp31568 = input.readListBegin();
        _etype1567 = _rtmp31568.etype;
        _size1564 = _rtmp31568.size;
        for (var _i1569 = 0; _i1569 < _size1564; ++_i1569)
        {
          var elem1570 = null;
          elem1570 = new DocumentPatternStagesLink();
          elem1570.read(input);
          this.links.push(elem1570);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_updateFilledDocumentPatternStagesLink_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_updateFilledDocumentPatternStagesLink_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fillDocPatternId !== null && this.fillDocPatternId !== undefined) {
    output.writeFieldBegin('fillDocPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.fillDocPatternId);
    output.writeFieldEnd();
  }
  if (this.links !== null && this.links !== undefined) {
    output.writeFieldBegin('links', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.links.length);
    for (var iter1571 in this.links)
    {
      if (this.links.hasOwnProperty(iter1571))
      {
        iter1571 = this.links[iter1571];
        iter1571.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_updateFilledDocumentPatternStagesLink_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStagesLink]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_updateFilledDocumentPatternStagesLink_result.prototype = {};
FilledDocumentPatternService_updateFilledDocumentPatternStagesLink_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1572 = 0;
        var _rtmp31576;
        this.success = [];
        var _etype1575 = 0;
        _rtmp31576 = input.readListBegin();
        _etype1575 = _rtmp31576.etype;
        _size1572 = _rtmp31576.size;
        for (var _i1577 = 0; _i1577 < _size1572; ++_i1577)
        {
          var elem1578 = null;
          elem1578 = new DocumentPatternStagesLink();
          elem1578.read(input);
          this.success.push(elem1578);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_updateFilledDocumentPatternStagesLink_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_updateFilledDocumentPatternStagesLink_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1579 in this.success)
    {
      if (this.success.hasOwnProperty(iter1579))
      {
        iter1579 = this.success[iter1579];
        iter1579.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_getAllFilledDocumentPatternStagesLink_args = function(args) {
  this.token = null;
  this.fillDocPatternId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fillDocPatternId !== undefined && args.fillDocPatternId !== null) {
      this.fillDocPatternId = args.fillDocPatternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
FilledDocumentPatternService_getAllFilledDocumentPatternStagesLink_args.prototype = {};
FilledDocumentPatternService_getAllFilledDocumentPatternStagesLink_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fillDocPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getAllFilledDocumentPatternStagesLink_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getAllFilledDocumentPatternStagesLink_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fillDocPatternId !== null && this.fillDocPatternId !== undefined) {
    output.writeFieldBegin('fillDocPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.fillDocPatternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_getAllFilledDocumentPatternStagesLink_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStagesLink]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_getAllFilledDocumentPatternStagesLink_result.prototype = {};
FilledDocumentPatternService_getAllFilledDocumentPatternStagesLink_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1580 = 0;
        var _rtmp31584;
        this.success = [];
        var _etype1583 = 0;
        _rtmp31584 = input.readListBegin();
        _etype1583 = _rtmp31584.etype;
        _size1580 = _rtmp31584.size;
        for (var _i1585 = 0; _i1585 < _size1580; ++_i1585)
        {
          var elem1586 = null;
          elem1586 = new DocumentPatternStagesLink();
          elem1586.read(input);
          this.success.push(elem1586);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getAllFilledDocumentPatternStagesLink_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getAllFilledDocumentPatternStagesLink_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1587 in this.success)
    {
      if (this.success.hasOwnProperty(iter1587))
      {
        iter1587 = this.success[iter1587];
        iter1587.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_getAllFilledDocumentPatternStageExecutors_args = function(args) {
  this.token = null;
  this.fillDocPatternId = null;
  this.stageId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fillDocPatternId !== undefined && args.fillDocPatternId !== null) {
      this.fillDocPatternId = args.fillDocPatternId;
    }
    if (args.stageId !== undefined && args.stageId !== null) {
      this.stageId = args.stageId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
FilledDocumentPatternService_getAllFilledDocumentPatternStageExecutors_args.prototype = {};
FilledDocumentPatternService_getAllFilledDocumentPatternStageExecutors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fillDocPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getAllFilledDocumentPatternStageExecutors_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getAllFilledDocumentPatternStageExecutors_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fillDocPatternId !== null && this.fillDocPatternId !== undefined) {
    output.writeFieldBegin('fillDocPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.fillDocPatternId);
    output.writeFieldEnd();
  }
  if (this.stageId !== null && this.stageId !== undefined) {
    output.writeFieldBegin('stageId', Thrift.Type.STRING, 3);
    output.writeString(this.stageId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_getAllFilledDocumentPatternStageExecutors_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocumentPatternStagesExecutor]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_getAllFilledDocumentPatternStageExecutors_result.prototype = {};
FilledDocumentPatternService_getAllFilledDocumentPatternStageExecutors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1588 = 0;
        var _rtmp31592;
        this.success = [];
        var _etype1591 = 0;
        _rtmp31592 = input.readListBegin();
        _etype1591 = _rtmp31592.etype;
        _size1588 = _rtmp31592.size;
        for (var _i1593 = 0; _i1593 < _size1588; ++_i1593)
        {
          var elem1594 = null;
          elem1594 = new DocumentPatternStagesExecutor();
          elem1594.read(input);
          this.success.push(elem1594);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getAllFilledDocumentPatternStageExecutors_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getAllFilledDocumentPatternStageExecutors_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1595 in this.success)
    {
      if (this.success.hasOwnProperty(iter1595))
      {
        iter1595 = this.success[iter1595];
        iter1595.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_getFilledDocumentPatternStagesExecutors_args = function(args) {
  this.token = null;
  this.fillDocPatternId = null;
  this.stageIds = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fillDocPatternId !== undefined && args.fillDocPatternId !== null) {
      this.fillDocPatternId = args.fillDocPatternId;
    }
    if (args.stageIds !== undefined && args.stageIds !== null) {
      this.stageIds = Thrift.copyList(args.stageIds, [null]);
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
FilledDocumentPatternService_getFilledDocumentPatternStagesExecutors_args.prototype = {};
FilledDocumentPatternService_getFilledDocumentPatternStagesExecutors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fillDocPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1596 = 0;
        var _rtmp31600;
        this.stageIds = [];
        var _etype1599 = 0;
        _rtmp31600 = input.readListBegin();
        _etype1599 = _rtmp31600.etype;
        _size1596 = _rtmp31600.size;
        for (var _i1601 = 0; _i1601 < _size1596; ++_i1601)
        {
          var elem1602 = null;
          elem1602 = input.readString().value;
          this.stageIds.push(elem1602);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getFilledDocumentPatternStagesExecutors_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getFilledDocumentPatternStagesExecutors_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fillDocPatternId !== null && this.fillDocPatternId !== undefined) {
    output.writeFieldBegin('fillDocPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.fillDocPatternId);
    output.writeFieldEnd();
  }
  if (this.stageIds !== null && this.stageIds !== undefined) {
    output.writeFieldBegin('stageIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.stageIds.length);
    for (var iter1603 in this.stageIds)
    {
      if (this.stageIds.hasOwnProperty(iter1603))
      {
        iter1603 = this.stageIds[iter1603];
        output.writeString(iter1603);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_getFilledDocumentPatternStagesExecutors_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyList, DocumentPatternStagesExecutor]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_getFilledDocumentPatternStagesExecutors_result.prototype = {};
FilledDocumentPatternService_getFilledDocumentPatternStagesExecutors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size1604 = 0;
        var _rtmp31608;
        this.success = {};
        var _ktype1605 = 0;
        var _vtype1606 = 0;
        _rtmp31608 = input.readMapBegin();
        _ktype1605 = _rtmp31608.ktype;
        _vtype1606 = _rtmp31608.vtype;
        _size1604 = _rtmp31608.size;
        for (var _i1609 = 0; _i1609 < _size1604; ++_i1609)
        {
          if (_i1609 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key1610 = null;
          var val1611 = null;
          key1610 = input.readString().value;
          var _size1612 = 0;
          var _rtmp31616;
          val1611 = [];
          var _etype1615 = 0;
          _rtmp31616 = input.readListBegin();
          _etype1615 = _rtmp31616.etype;
          _size1612 = _rtmp31616.size;
          for (var _i1617 = 0; _i1617 < _size1612; ++_i1617)
          {
            var elem1618 = null;
            elem1618 = new DocumentPatternStagesExecutor();
            elem1618.read(input);
            val1611.push(elem1618);
          }
          input.readListEnd();
          this.success[key1610] = val1611;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_getFilledDocumentPatternStagesExecutors_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_getFilledDocumentPatternStagesExecutors_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter1619 in this.success)
    {
      if (this.success.hasOwnProperty(kiter1619))
      {
        var viter1620 = this.success[kiter1619];
        output.writeString(kiter1619);
        output.writeListBegin(Thrift.Type.STRUCT, viter1620.length);
        for (var iter1621 in viter1620)
        {
          if (viter1620.hasOwnProperty(iter1621))
          {
            iter1621 = viter1620[iter1621];
            iter1621.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_changeFilledDocumentPatternStages_args = function(args) {
  this.token = null;
  this.fillDocPatternId = null;
  this.stages = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fillDocPatternId !== undefined && args.fillDocPatternId !== null) {
      this.fillDocPatternId = args.fillDocPatternId;
    }
    if (args.stages !== undefined && args.stages !== null) {
      this.stages = Thrift.copyList(args.stages, [DocumentPatternStage]);
    }
  }
};
FilledDocumentPatternService_changeFilledDocumentPatternStages_args.prototype = {};
FilledDocumentPatternService_changeFilledDocumentPatternStages_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fillDocPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size1622 = 0;
        var _rtmp31626;
        this.stages = [];
        var _etype1625 = 0;
        _rtmp31626 = input.readListBegin();
        _etype1625 = _rtmp31626.etype;
        _size1622 = _rtmp31626.size;
        for (var _i1627 = 0; _i1627 < _size1622; ++_i1627)
        {
          var elem1628 = null;
          elem1628 = new DocumentPatternStage();
          elem1628.read(input);
          this.stages.push(elem1628);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_changeFilledDocumentPatternStages_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_changeFilledDocumentPatternStages_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fillDocPatternId !== null && this.fillDocPatternId !== undefined) {
    output.writeFieldBegin('fillDocPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.fillDocPatternId);
    output.writeFieldEnd();
  }
  if (this.stages !== null && this.stages !== undefined) {
    output.writeFieldBegin('stages', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.stages.length);
    for (var iter1629 in this.stages)
    {
      if (this.stages.hasOwnProperty(iter1629))
      {
        iter1629 = this.stages[iter1629];
        iter1629.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_changeFilledDocumentPatternStages_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_changeFilledDocumentPatternStages_result.prototype = {};
FilledDocumentPatternService_changeFilledDocumentPatternStages_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_changeFilledDocumentPatternStages_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_changeFilledDocumentPatternStages_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_checkFilledDocumentPattern_args = function(args) {
  this.token = null;
  this.fillDocPatternId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.fillDocPatternId !== undefined && args.fillDocPatternId !== null) {
      this.fillDocPatternId = args.fillDocPatternId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
FilledDocumentPatternService_checkFilledDocumentPattern_args.prototype = {};
FilledDocumentPatternService_checkFilledDocumentPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fillDocPatternId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_checkFilledDocumentPattern_args.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_checkFilledDocumentPattern_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fillDocPatternId !== null && this.fillDocPatternId !== undefined) {
    output.writeFieldBegin('fillDocPatternId', Thrift.Type.STRING, 2);
    output.writeString(this.fillDocPatternId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternService_checkFilledDocumentPattern_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilledDocumentPatternService_checkFilledDocumentPattern_result.prototype = {};
FilledDocumentPatternService_checkFilledDocumentPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size1630 = 0;
        var _rtmp31634;
        this.success = [];
        var _etype1633 = 0;
        _rtmp31634 = input.readListBegin();
        _etype1633 = _rtmp31634.etype;
        _size1630 = _rtmp31634.size;
        for (var _i1635 = 0; _i1635 < _size1630; ++_i1635)
        {
          var elem1636 = null;
          elem1636 = new PreconditionException();
          elem1636.read(input);
          this.success.push(elem1636);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilledDocumentPatternService_checkFilledDocumentPattern_result.prototype.write = function(output) {
  output.writeStructBegin('FilledDocumentPatternService_checkFilledDocumentPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter1637 in this.success)
    {
      if (this.success.hasOwnProperty(iter1637))
      {
        iter1637 = this.success[iter1637];
        iter1637.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilledDocumentPatternServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
FilledDocumentPatternServiceClient.prototype = {};
FilledDocumentPatternServiceClient.prototype.getFilledDocumentPattern = function(token, filledDocumentPatternId, callback) {
  if (callback === undefined) {
    this.send_getFilledDocumentPattern(token, filledDocumentPatternId);
    return this.recv_getFilledDocumentPattern();
  } else {
    var postData = this.send_getFilledDocumentPattern(token, filledDocumentPatternId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getFilledDocumentPattern);
  }
};

FilledDocumentPatternServiceClient.prototype.send_getFilledDocumentPattern = function(token, filledDocumentPatternId, callback) {
  this.output.writeMessageBegin('getFilledDocumentPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filledDocumentPatternId: filledDocumentPatternId
  };
  var args = new FilledDocumentPatternService_getFilledDocumentPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_getFilledDocumentPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_getFilledDocumentPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFilledDocumentPattern failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.createOrUpdateFilledDocumentPattern = function(token, freezeDocumentPattern, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateFilledDocumentPattern(token, freezeDocumentPattern);
    return this.recv_createOrUpdateFilledDocumentPattern();
  } else {
    var postData = this.send_createOrUpdateFilledDocumentPattern(token, freezeDocumentPattern, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateFilledDocumentPattern);
  }
};

FilledDocumentPatternServiceClient.prototype.send_createOrUpdateFilledDocumentPattern = function(token, freezeDocumentPattern, callback) {
  this.output.writeMessageBegin('createOrUpdateFilledDocumentPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    freezeDocumentPattern: freezeDocumentPattern
  };
  var args = new FilledDocumentPatternService_createOrUpdateFilledDocumentPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_createOrUpdateFilledDocumentPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_createOrUpdateFilledDocumentPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateFilledDocumentPattern failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.createAndCheckFilledDocumentPattern = function(token, freezeDocumentPattern, stages, callback) {
  if (callback === undefined) {
    this.send_createAndCheckFilledDocumentPattern(token, freezeDocumentPattern, stages);
    return this.recv_createAndCheckFilledDocumentPattern();
  } else {
    var postData = this.send_createAndCheckFilledDocumentPattern(token, freezeDocumentPattern, stages, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createAndCheckFilledDocumentPattern);
  }
};

FilledDocumentPatternServiceClient.prototype.send_createAndCheckFilledDocumentPattern = function(token, freezeDocumentPattern, stages, callback) {
  this.output.writeMessageBegin('createAndCheckFilledDocumentPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    freezeDocumentPattern: freezeDocumentPattern,
    stages: stages
  };
  var args = new FilledDocumentPatternService_createAndCheckFilledDocumentPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_createAndCheckFilledDocumentPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_createAndCheckFilledDocumentPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createAndCheckFilledDocumentPattern failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.deleteFilledDocumentPattern = function(token, filledDocumentPatternId, callback) {
  if (callback === undefined) {
    this.send_deleteFilledDocumentPattern(token, filledDocumentPatternId);
    return this.recv_deleteFilledDocumentPattern();
  } else {
    var postData = this.send_deleteFilledDocumentPattern(token, filledDocumentPatternId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_deleteFilledDocumentPattern);
  }
};

FilledDocumentPatternServiceClient.prototype.send_deleteFilledDocumentPattern = function(token, filledDocumentPatternId, callback) {
  this.output.writeMessageBegin('deleteFilledDocumentPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filledDocumentPatternId: filledDocumentPatternId
  };
  var args = new FilledDocumentPatternService_deleteFilledDocumentPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_deleteFilledDocumentPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_deleteFilledDocumentPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteFilledDocumentPattern failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.getAllFilledDocumentPatternStages = function(token, fillDocPatternId, filter, selector, callback) {
  if (callback === undefined) {
    this.send_getAllFilledDocumentPatternStages(token, fillDocPatternId, filter, selector);
    return this.recv_getAllFilledDocumentPatternStages();
  } else {
    var postData = this.send_getAllFilledDocumentPatternStages(token, fillDocPatternId, filter, selector, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllFilledDocumentPatternStages);
  }
};

FilledDocumentPatternServiceClient.prototype.send_getAllFilledDocumentPatternStages = function(token, fillDocPatternId, filter, selector, callback) {
  this.output.writeMessageBegin('getAllFilledDocumentPatternStages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fillDocPatternId: fillDocPatternId,
    filter: filter,
    selector: selector
  };
  var args = new FilledDocumentPatternService_getAllFilledDocumentPatternStages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_getAllFilledDocumentPatternStages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_getAllFilledDocumentPatternStages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllFilledDocumentPatternStages failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.getFilledDocumentPatternStage = function(token, fillDocPatternId, stageId, selector, registryId, callback) {
  if (callback === undefined) {
    this.send_getFilledDocumentPatternStage(token, fillDocPatternId, stageId, selector, registryId);
    return this.recv_getFilledDocumentPatternStage();
  } else {
    var postData = this.send_getFilledDocumentPatternStage(token, fillDocPatternId, stageId, selector, registryId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getFilledDocumentPatternStage);
  }
};

FilledDocumentPatternServiceClient.prototype.send_getFilledDocumentPatternStage = function(token, fillDocPatternId, stageId, selector, registryId, callback) {
  this.output.writeMessageBegin('getFilledDocumentPatternStage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fillDocPatternId: fillDocPatternId,
    stageId: stageId,
    selector: selector,
    registryId: registryId
  };
  var args = new FilledDocumentPatternService_getFilledDocumentPatternStage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_getFilledDocumentPatternStage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_getFilledDocumentPatternStage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFilledDocumentPatternStage failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.getAllChildFilledDocumentPatternStages = function(token, fillDocPatternId, stageId, callback) {
  if (callback === undefined) {
    this.send_getAllChildFilledDocumentPatternStages(token, fillDocPatternId, stageId);
    return this.recv_getAllChildFilledDocumentPatternStages();
  } else {
    var postData = this.send_getAllChildFilledDocumentPatternStages(token, fillDocPatternId, stageId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllChildFilledDocumentPatternStages);
  }
};

FilledDocumentPatternServiceClient.prototype.send_getAllChildFilledDocumentPatternStages = function(token, fillDocPatternId, stageId, callback) {
  this.output.writeMessageBegin('getAllChildFilledDocumentPatternStages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fillDocPatternId: fillDocPatternId,
    stageId: stageId
  };
  var args = new FilledDocumentPatternService_getAllChildFilledDocumentPatternStages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_getAllChildFilledDocumentPatternStages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_getAllChildFilledDocumentPatternStages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllChildFilledDocumentPatternStages failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.updateFilledDocumentPatternStage = function(token, fillDocPatternId, documentPatternStage, callback) {
  if (callback === undefined) {
    this.send_updateFilledDocumentPatternStage(token, fillDocPatternId, documentPatternStage);
    return this.recv_updateFilledDocumentPatternStage();
  } else {
    var postData = this.send_updateFilledDocumentPatternStage(token, fillDocPatternId, documentPatternStage, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateFilledDocumentPatternStage);
  }
};

FilledDocumentPatternServiceClient.prototype.send_updateFilledDocumentPatternStage = function(token, fillDocPatternId, documentPatternStage, callback) {
  this.output.writeMessageBegin('updateFilledDocumentPatternStage', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fillDocPatternId: fillDocPatternId,
    documentPatternStage: documentPatternStage
  };
  var args = new FilledDocumentPatternService_updateFilledDocumentPatternStage_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_updateFilledDocumentPatternStage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_updateFilledDocumentPatternStage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateFilledDocumentPatternStage failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.updateFilledDocumentPatternStageList = function(token, fillDocPatternId, documentPatternStage, callback) {
  if (callback === undefined) {
    this.send_updateFilledDocumentPatternStageList(token, fillDocPatternId, documentPatternStage);
    return this.recv_updateFilledDocumentPatternStageList();
  } else {
    var postData = this.send_updateFilledDocumentPatternStageList(token, fillDocPatternId, documentPatternStage, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateFilledDocumentPatternStageList);
  }
};

FilledDocumentPatternServiceClient.prototype.send_updateFilledDocumentPatternStageList = function(token, fillDocPatternId, documentPatternStage, callback) {
  this.output.writeMessageBegin('updateFilledDocumentPatternStageList', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fillDocPatternId: fillDocPatternId,
    documentPatternStage: documentPatternStage
  };
  var args = new FilledDocumentPatternService_updateFilledDocumentPatternStageList_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_updateFilledDocumentPatternStageList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_updateFilledDocumentPatternStageList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateFilledDocumentPatternStageList failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.updateFilledDocumentPatternStagesLink = function(token, fillDocPatternId, links, callback) {
  if (callback === undefined) {
    this.send_updateFilledDocumentPatternStagesLink(token, fillDocPatternId, links);
    return this.recv_updateFilledDocumentPatternStagesLink();
  } else {
    var postData = this.send_updateFilledDocumentPatternStagesLink(token, fillDocPatternId, links, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_updateFilledDocumentPatternStagesLink);
  }
};

FilledDocumentPatternServiceClient.prototype.send_updateFilledDocumentPatternStagesLink = function(token, fillDocPatternId, links, callback) {
  this.output.writeMessageBegin('updateFilledDocumentPatternStagesLink', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fillDocPatternId: fillDocPatternId,
    links: links
  };
  var args = new FilledDocumentPatternService_updateFilledDocumentPatternStagesLink_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_updateFilledDocumentPatternStagesLink = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_updateFilledDocumentPatternStagesLink_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateFilledDocumentPatternStagesLink failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.getAllFilledDocumentPatternStagesLink = function(token, fillDocPatternId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllFilledDocumentPatternStagesLink(token, fillDocPatternId, filter);
    return this.recv_getAllFilledDocumentPatternStagesLink();
  } else {
    var postData = this.send_getAllFilledDocumentPatternStagesLink(token, fillDocPatternId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllFilledDocumentPatternStagesLink);
  }
};

FilledDocumentPatternServiceClient.prototype.send_getAllFilledDocumentPatternStagesLink = function(token, fillDocPatternId, filter, callback) {
  this.output.writeMessageBegin('getAllFilledDocumentPatternStagesLink', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fillDocPatternId: fillDocPatternId,
    filter: filter
  };
  var args = new FilledDocumentPatternService_getAllFilledDocumentPatternStagesLink_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_getAllFilledDocumentPatternStagesLink = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_getAllFilledDocumentPatternStagesLink_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllFilledDocumentPatternStagesLink failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.getAllFilledDocumentPatternStageExecutors = function(token, fillDocPatternId, stageId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllFilledDocumentPatternStageExecutors(token, fillDocPatternId, stageId, filter);
    return this.recv_getAllFilledDocumentPatternStageExecutors();
  } else {
    var postData = this.send_getAllFilledDocumentPatternStageExecutors(token, fillDocPatternId, stageId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllFilledDocumentPatternStageExecutors);
  }
};

FilledDocumentPatternServiceClient.prototype.send_getAllFilledDocumentPatternStageExecutors = function(token, fillDocPatternId, stageId, filter, callback) {
  this.output.writeMessageBegin('getAllFilledDocumentPatternStageExecutors', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fillDocPatternId: fillDocPatternId,
    stageId: stageId,
    filter: filter
  };
  var args = new FilledDocumentPatternService_getAllFilledDocumentPatternStageExecutors_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_getAllFilledDocumentPatternStageExecutors = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_getAllFilledDocumentPatternStageExecutors_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllFilledDocumentPatternStageExecutors failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.getFilledDocumentPatternStagesExecutors = function(token, fillDocPatternId, stageIds, filter, callback) {
  if (callback === undefined) {
    this.send_getFilledDocumentPatternStagesExecutors(token, fillDocPatternId, stageIds, filter);
    return this.recv_getFilledDocumentPatternStagesExecutors();
  } else {
    var postData = this.send_getFilledDocumentPatternStagesExecutors(token, fillDocPatternId, stageIds, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getFilledDocumentPatternStagesExecutors);
  }
};

FilledDocumentPatternServiceClient.prototype.send_getFilledDocumentPatternStagesExecutors = function(token, fillDocPatternId, stageIds, filter, callback) {
  this.output.writeMessageBegin('getFilledDocumentPatternStagesExecutors', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fillDocPatternId: fillDocPatternId,
    stageIds: stageIds,
    filter: filter
  };
  var args = new FilledDocumentPatternService_getFilledDocumentPatternStagesExecutors_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_getFilledDocumentPatternStagesExecutors = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_getFilledDocumentPatternStagesExecutors_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getFilledDocumentPatternStagesExecutors failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.changeFilledDocumentPatternStages = function(token, fillDocPatternId, stages, callback) {
  if (callback === undefined) {
    this.send_changeFilledDocumentPatternStages(token, fillDocPatternId, stages);
    return this.recv_changeFilledDocumentPatternStages();
  } else {
    var postData = this.send_changeFilledDocumentPatternStages(token, fillDocPatternId, stages, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_changeFilledDocumentPatternStages);
  }
};

FilledDocumentPatternServiceClient.prototype.send_changeFilledDocumentPatternStages = function(token, fillDocPatternId, stages, callback) {
  this.output.writeMessageBegin('changeFilledDocumentPatternStages', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fillDocPatternId: fillDocPatternId,
    stages: stages
  };
  var args = new FilledDocumentPatternService_changeFilledDocumentPatternStages_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_changeFilledDocumentPatternStages = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_changeFilledDocumentPatternStages_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'changeFilledDocumentPatternStages failed: unknown result';
};
FilledDocumentPatternServiceClient.prototype.checkFilledDocumentPattern = function(token, fillDocPatternId, filter, callback) {
  if (callback === undefined) {
    this.send_checkFilledDocumentPattern(token, fillDocPatternId, filter);
    return this.recv_checkFilledDocumentPattern();
  } else {
    var postData = this.send_checkFilledDocumentPattern(token, fillDocPatternId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_checkFilledDocumentPattern);
  }
};

FilledDocumentPatternServiceClient.prototype.send_checkFilledDocumentPattern = function(token, fillDocPatternId, filter, callback) {
  this.output.writeMessageBegin('checkFilledDocumentPattern', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    fillDocPatternId: fillDocPatternId,
    filter: filter
  };
  var args = new FilledDocumentPatternService_checkFilledDocumentPattern_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilledDocumentPatternServiceClient.prototype.recv_checkFilledDocumentPattern = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilledDocumentPatternService_checkFilledDocumentPattern_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'checkFilledDocumentPattern failed: unknown result';
};
