//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


FilterFieldType = {
  'STRING' : 0,
  'NUMBER' : 1,
  'DATE' : 2,
  'BOOLEAN' : 3,
  'ENUMERATED' : 4,
  'DOUBLE' : 5,
  'STRING_FOR_REPLACE' : 6
};
FilterCondition = {
  'EQUAL' : 0,
  'NOT_EQUAL' : 1,
  'CONTAIN' : 2,
  'NOT_CONTAIN' : 3,
  'LESS' : 4,
  'LESS_OR_EQUAL' : 5,
  'MORE' : 6,
  'MORE_OR_EQUAL' : 7,
  'IN' : 8,
  'NOT_IN' : 9,
  'NULL' : 10,
  'NOT_NULL' : 11,
  'BETWEEN' : 12
};
FilterItem = function(args) {
  this.field = null;
  this.fType = null;
  this.condition = null;
  this.value = null;
  if (args) {
    if (args.field !== undefined && args.field !== null) {
      this.field = args.field;
    }
    if (args.fType !== undefined && args.fType !== null) {
      this.fType = args.fType;
    }
    if (args.condition !== undefined && args.condition !== null) {
      this.condition = args.condition;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
FilterItem.prototype = {};
FilterItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.field = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.fType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.condition = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterItem.prototype.write = function(output) {
  output.writeStructBegin('FilterItem');
  if (this.field !== null && this.field !== undefined) {
    output.writeFieldBegin('field', Thrift.Type.STRING, 1);
    output.writeString(this.field);
    output.writeFieldEnd();
  }
  if (this.fType !== null && this.fType !== undefined) {
    output.writeFieldBegin('fType', Thrift.Type.I32, 2);
    output.writeI32(this.fType);
    output.writeFieldEnd();
  }
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.I32, 3);
    output.writeI32(this.condition);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KazFilter = function(args) {
  this.position = null;
  this.countFilter = null;
  this.items = null;
  this.orders = null;
  if (args) {
    if (args.position !== undefined && args.position !== null) {
      this.position = args.position;
    }
    if (args.countFilter !== undefined && args.countFilter !== null) {
      this.countFilter = args.countFilter;
    }
    if (args.items !== undefined && args.items !== null) {
      this.items = Thrift.copyList(args.items, [FilterItem]);
    }
    if (args.orders !== undefined && args.orders !== null) {
      this.orders = Thrift.copyList(args.orders, [null]);
    }
  }
};
KazFilter.prototype = {};
KazFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.position = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.countFilter = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.items = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new FilterItem();
          elem6.read(input);
          this.items.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.orders = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.orders.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KazFilter.prototype.write = function(output) {
  output.writeStructBegin('KazFilter');
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I32, 1);
    output.writeI32(this.position);
    output.writeFieldEnd();
  }
  if (this.countFilter !== null && this.countFilter !== undefined) {
    output.writeFieldBegin('countFilter', Thrift.Type.I32, 2);
    output.writeI32(this.countFilter);
    output.writeFieldEnd();
  }
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter14 in this.items)
    {
      if (this.items.hasOwnProperty(iter14))
      {
        iter14 = this.items[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.orders !== null && this.orders !== undefined) {
    output.writeFieldBegin('orders', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.orders.length);
    for (var iter15 in this.orders)
    {
      if (this.orders.hasOwnProperty(iter15))
      {
        iter15 = this.orders[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

