//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

FilterService_getAllCustomFields_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
FilterService_getAllCustomFields_args.prototype = {};
FilterService_getAllCustomFields_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_getAllCustomFields_args.prototype.write = function(output) {
  output.writeStructBegin('FilterService_getAllCustomFields_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_getAllCustomFields_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [FilterField]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilterService_getAllCustomFields_result.prototype = {};
FilterService_getAllCustomFields_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2272 = 0;
        var _rtmp32276;
        this.success = [];
        var _etype2275 = 0;
        _rtmp32276 = input.readListBegin();
        _etype2275 = _rtmp32276.etype;
        _size2272 = _rtmp32276.size;
        for (var _i2277 = 0; _i2277 < _size2272; ++_i2277)
        {
          var elem2278 = null;
          elem2278 = new FilterField();
          elem2278.read(input);
          this.success.push(elem2278);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_getAllCustomFields_result.prototype.write = function(output) {
  output.writeStructBegin('FilterService_getAllCustomFields_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2279 in this.success)
    {
      if (this.success.hasOwnProperty(iter2279))
      {
        iter2279 = this.success[iter2279];
        iter2279.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_createOrUpdateCustomField_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new FilterField(args.filter);
    }
  }
};
FilterService_createOrUpdateCustomField_args.prototype = {};
FilterService_createOrUpdateCustomField_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new FilterField();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_createOrUpdateCustomField_args.prototype.write = function(output) {
  output.writeStructBegin('FilterService_createOrUpdateCustomField_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_createOrUpdateCustomField_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new FilterField(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilterService_createOrUpdateCustomField_result.prototype = {};
FilterService_createOrUpdateCustomField_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FilterField();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_createOrUpdateCustomField_result.prototype.write = function(output) {
  output.writeStructBegin('FilterService_createOrUpdateCustomField_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_removeCustomField_args = function(args) {
  this.token = null;
  this.filterId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filterId !== undefined && args.filterId !== null) {
      this.filterId = args.filterId;
    }
  }
};
FilterService_removeCustomField_args.prototype = {};
FilterService_removeCustomField_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_removeCustomField_args.prototype.write = function(output) {
  output.writeStructBegin('FilterService_removeCustomField_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filterId !== null && this.filterId !== undefined) {
    output.writeFieldBegin('filterId', Thrift.Type.STRING, 2);
    output.writeString(this.filterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_removeCustomField_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilterService_removeCustomField_result.prototype = {};
FilterService_removeCustomField_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_removeCustomField_result.prototype.write = function(output) {
  output.writeStructBegin('FilterService_removeCustomField_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_getAllCustomDocFilters_args = function(args) {
  this.token = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
FilterService_getAllCustomDocFilters_args.prototype = {};
FilterService_getAllCustomDocFilters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_getAllCustomDocFilters_args.prototype.write = function(output) {
  output.writeStructBegin('FilterService_getAllCustomDocFilters_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_getAllCustomDocFilters_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocFilter]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilterService_getAllCustomDocFilters_result.prototype = {};
FilterService_getAllCustomDocFilters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2280 = 0;
        var _rtmp32284;
        this.success = [];
        var _etype2283 = 0;
        _rtmp32284 = input.readListBegin();
        _etype2283 = _rtmp32284.etype;
        _size2280 = _rtmp32284.size;
        for (var _i2285 = 0; _i2285 < _size2280; ++_i2285)
        {
          var elem2286 = null;
          elem2286 = new DocFilter();
          elem2286.read(input);
          this.success.push(elem2286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_getAllCustomDocFilters_result.prototype.write = function(output) {
  output.writeStructBegin('FilterService_getAllCustomDocFilters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2287 in this.success)
    {
      if (this.success.hasOwnProperty(iter2287))
      {
        iter2287 = this.success[iter2287];
        iter2287.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_createOrUpdateCustomDocFilter_args = function(args) {
  this.token = null;
  this.filter = null;
  this.customFilterItems = null;
  this.filterFieldsWithPosition = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new DocFilter(args.filter);
    }
    if (args.customFilterItems !== undefined && args.customFilterItems !== null) {
      this.customFilterItems = Thrift.copyList(args.customFilterItems, [null]);
    }
    if (args.filterFieldsWithPosition !== undefined && args.filterFieldsWithPosition !== null) {
      this.filterFieldsWithPosition = Thrift.copyMap(args.filterFieldsWithPosition, [null]);
    }
  }
};
FilterService_createOrUpdateCustomDocFilter_args.prototype = {};
FilterService_createOrUpdateCustomDocFilter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new DocFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2288 = 0;
        var _rtmp32292;
        this.customFilterItems = [];
        var _etype2291 = 0;
        _rtmp32292 = input.readListBegin();
        _etype2291 = _rtmp32292.etype;
        _size2288 = _rtmp32292.size;
        for (var _i2293 = 0; _i2293 < _size2288; ++_i2293)
        {
          var elem2294 = null;
          elem2294 = input.readString().value;
          this.customFilterItems.push(elem2294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size2295 = 0;
        var _rtmp32299;
        this.filterFieldsWithPosition = {};
        var _ktype2296 = 0;
        var _vtype2297 = 0;
        _rtmp32299 = input.readMapBegin();
        _ktype2296 = _rtmp32299.ktype;
        _vtype2297 = _rtmp32299.vtype;
        _size2295 = _rtmp32299.size;
        for (var _i2300 = 0; _i2300 < _size2295; ++_i2300)
        {
          if (_i2300 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key2301 = null;
          var val2302 = null;
          key2301 = input.readI32().value;
          val2302 = input.readString().value;
          this.filterFieldsWithPosition[key2301] = val2302;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_createOrUpdateCustomDocFilter_args.prototype.write = function(output) {
  output.writeStructBegin('FilterService_createOrUpdateCustomDocFilter_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.customFilterItems !== null && this.customFilterItems !== undefined) {
    output.writeFieldBegin('customFilterItems', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.customFilterItems.length);
    for (var iter2303 in this.customFilterItems)
    {
      if (this.customFilterItems.hasOwnProperty(iter2303))
      {
        iter2303 = this.customFilterItems[iter2303];
        output.writeString(iter2303);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filterFieldsWithPosition !== null && this.filterFieldsWithPosition !== undefined) {
    output.writeFieldBegin('filterFieldsWithPosition', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.filterFieldsWithPosition));
    for (var kiter2304 in this.filterFieldsWithPosition)
    {
      if (this.filterFieldsWithPosition.hasOwnProperty(kiter2304))
      {
        var viter2305 = this.filterFieldsWithPosition[kiter2304];
        output.writeI32(kiter2304);
        output.writeString(viter2305);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_createOrUpdateCustomDocFilter_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new DocFilter(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilterService_createOrUpdateCustomDocFilter_result.prototype = {};
FilterService_createOrUpdateCustomDocFilter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new DocFilter();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_createOrUpdateCustomDocFilter_result.prototype.write = function(output) {
  output.writeStructBegin('FilterService_createOrUpdateCustomDocFilter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_removeCustomDocFilter_args = function(args) {
  this.token = null;
  this.docFilterId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docFilterId !== undefined && args.docFilterId !== null) {
      this.docFilterId = args.docFilterId;
    }
  }
};
FilterService_removeCustomDocFilter_args.prototype = {};
FilterService_removeCustomDocFilter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docFilterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_removeCustomDocFilter_args.prototype.write = function(output) {
  output.writeStructBegin('FilterService_removeCustomDocFilter_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docFilterId !== null && this.docFilterId !== undefined) {
    output.writeFieldBegin('docFilterId', Thrift.Type.STRING, 2);
    output.writeString(this.docFilterId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_removeCustomDocFilter_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilterService_removeCustomDocFilter_result.prototype = {};
FilterService_removeCustomDocFilter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_removeCustomDocFilter_result.prototype.write = function(output) {
  output.writeStructBegin('FilterService_removeCustomDocFilter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_createOrUpdateCustomFilterItem_args = function(args) {
  this.token = null;
  this.filterItem = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filterItem !== undefined && args.filterItem !== null) {
      this.filterItem = new CustomFilterItem(args.filterItem);
    }
  }
};
FilterService_createOrUpdateCustomFilterItem_args.prototype = {};
FilterService_createOrUpdateCustomFilterItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filterItem = new CustomFilterItem();
        this.filterItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_createOrUpdateCustomFilterItem_args.prototype.write = function(output) {
  output.writeStructBegin('FilterService_createOrUpdateCustomFilterItem_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filterItem !== null && this.filterItem !== undefined) {
    output.writeFieldBegin('filterItem', Thrift.Type.STRUCT, 2);
    this.filterItem.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_createOrUpdateCustomFilterItem_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new CustomFilterItem(args.success);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilterService_createOrUpdateCustomFilterItem_result.prototype = {};
FilterService_createOrUpdateCustomFilterItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CustomFilterItem();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_createOrUpdateCustomFilterItem_result.prototype.write = function(output) {
  output.writeStructBegin('FilterService_createOrUpdateCustomFilterItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_removeCustomFilterItem_args = function(args) {
  this.token = null;
  this.filterItemId = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.filterItemId !== undefined && args.filterItemId !== null) {
      this.filterItemId = args.filterItemId;
    }
  }
};
FilterService_removeCustomFilterItem_args.prototype = {};
FilterService_removeCustomFilterItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filterItemId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_removeCustomFilterItem_args.prototype.write = function(output) {
  output.writeStructBegin('FilterService_removeCustomFilterItem_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.filterItemId !== null && this.filterItemId !== undefined) {
    output.writeFieldBegin('filterItemId', Thrift.Type.STRING, 2);
    output.writeString(this.filterItemId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_removeCustomFilterItem_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilterService_removeCustomFilterItem_result.prototype = {};
FilterService_removeCustomFilterItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_removeCustomFilterItem_result.prototype.write = function(output) {
  output.writeStructBegin('FilterService_removeCustomFilterItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_addDocFiltersToUserGroups_args = function(args) {
  this.token = null;
  this.docFilterIds = null;
  this.userOrGroups = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docFilterIds !== undefined && args.docFilterIds !== null) {
      this.docFilterIds = Thrift.copyList(args.docFilterIds, [null]);
    }
    if (args.userOrGroups !== undefined && args.userOrGroups !== null) {
      this.userOrGroups = Thrift.copyList(args.userOrGroups, [UserOrGroup]);
    }
  }
};
FilterService_addDocFiltersToUserGroups_args.prototype = {};
FilterService_addDocFiltersToUserGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2306 = 0;
        var _rtmp32310;
        this.docFilterIds = [];
        var _etype2309 = 0;
        _rtmp32310 = input.readListBegin();
        _etype2309 = _rtmp32310.etype;
        _size2306 = _rtmp32310.size;
        for (var _i2311 = 0; _i2311 < _size2306; ++_i2311)
        {
          var elem2312 = null;
          elem2312 = input.readString().value;
          this.docFilterIds.push(elem2312);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2313 = 0;
        var _rtmp32317;
        this.userOrGroups = [];
        var _etype2316 = 0;
        _rtmp32317 = input.readListBegin();
        _etype2316 = _rtmp32317.etype;
        _size2313 = _rtmp32317.size;
        for (var _i2318 = 0; _i2318 < _size2313; ++_i2318)
        {
          var elem2319 = null;
          elem2319 = new UserOrGroup();
          elem2319.read(input);
          this.userOrGroups.push(elem2319);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_addDocFiltersToUserGroups_args.prototype.write = function(output) {
  output.writeStructBegin('FilterService_addDocFiltersToUserGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docFilterIds !== null && this.docFilterIds !== undefined) {
    output.writeFieldBegin('docFilterIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.docFilterIds.length);
    for (var iter2320 in this.docFilterIds)
    {
      if (this.docFilterIds.hasOwnProperty(iter2320))
      {
        iter2320 = this.docFilterIds[iter2320];
        output.writeString(iter2320);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userOrGroups !== null && this.userOrGroups !== undefined) {
    output.writeFieldBegin('userOrGroups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroups.length);
    for (var iter2321 in this.userOrGroups)
    {
      if (this.userOrGroups.hasOwnProperty(iter2321))
      {
        iter2321 = this.userOrGroups[iter2321];
        iter2321.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_addDocFiltersToUserGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilterService_addDocFiltersToUserGroups_result.prototype = {};
FilterService_addDocFiltersToUserGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_addDocFiltersToUserGroups_result.prototype.write = function(output) {
  output.writeStructBegin('FilterService_addDocFiltersToUserGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_removeDocFiltersFromUserGroups_args = function(args) {
  this.token = null;
  this.docFilterIds = null;
  this.userOrGroups = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docFilterIds !== undefined && args.docFilterIds !== null) {
      this.docFilterIds = Thrift.copyList(args.docFilterIds, [null]);
    }
    if (args.userOrGroups !== undefined && args.userOrGroups !== null) {
      this.userOrGroups = Thrift.copyList(args.userOrGroups, [UserOrGroup]);
    }
  }
};
FilterService_removeDocFiltersFromUserGroups_args.prototype = {};
FilterService_removeDocFiltersFromUserGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size2322 = 0;
        var _rtmp32326;
        this.docFilterIds = [];
        var _etype2325 = 0;
        _rtmp32326 = input.readListBegin();
        _etype2325 = _rtmp32326.etype;
        _size2322 = _rtmp32326.size;
        for (var _i2327 = 0; _i2327 < _size2322; ++_i2327)
        {
          var elem2328 = null;
          elem2328 = input.readString().value;
          this.docFilterIds.push(elem2328);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size2329 = 0;
        var _rtmp32333;
        this.userOrGroups = [];
        var _etype2332 = 0;
        _rtmp32333 = input.readListBegin();
        _etype2332 = _rtmp32333.etype;
        _size2329 = _rtmp32333.size;
        for (var _i2334 = 0; _i2334 < _size2329; ++_i2334)
        {
          var elem2335 = null;
          elem2335 = new UserOrGroup();
          elem2335.read(input);
          this.userOrGroups.push(elem2335);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_removeDocFiltersFromUserGroups_args.prototype.write = function(output) {
  output.writeStructBegin('FilterService_removeDocFiltersFromUserGroups_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docFilterIds !== null && this.docFilterIds !== undefined) {
    output.writeFieldBegin('docFilterIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.docFilterIds.length);
    for (var iter2336 in this.docFilterIds)
    {
      if (this.docFilterIds.hasOwnProperty(iter2336))
      {
        iter2336 = this.docFilterIds[iter2336];
        output.writeString(iter2336);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userOrGroups !== null && this.userOrGroups !== undefined) {
    output.writeFieldBegin('userOrGroups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.userOrGroups.length);
    for (var iter2337 in this.userOrGroups)
    {
      if (this.userOrGroups.hasOwnProperty(iter2337))
      {
        iter2337 = this.userOrGroups[iter2337];
        iter2337.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_removeDocFiltersFromUserGroups_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilterService_removeDocFiltersFromUserGroups_result.prototype = {};
FilterService_removeDocFiltersFromUserGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_removeDocFiltersFromUserGroups_result.prototype.write = function(output) {
  output.writeStructBegin('FilterService_removeDocFiltersFromUserGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_getAllDocFiltersByUserOrGroup_args = function(args) {
  this.token = null;
  this.type = null;
  this.userOrGroupId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.userOrGroupId !== undefined && args.userOrGroupId !== null) {
      this.userOrGroupId = args.userOrGroupId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
FilterService_getAllDocFiltersByUserOrGroup_args.prototype = {};
FilterService_getAllDocFiltersByUserOrGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userOrGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_getAllDocFiltersByUserOrGroup_args.prototype.write = function(output) {
  output.writeStructBegin('FilterService_getAllDocFiltersByUserOrGroup_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.userOrGroupId !== null && this.userOrGroupId !== undefined) {
    output.writeFieldBegin('userOrGroupId', Thrift.Type.STRING, 3);
    output.writeString(this.userOrGroupId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 4);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_getAllDocFiltersByUserOrGroup_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [DocFilter]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilterService_getAllDocFiltersByUserOrGroup_result.prototype = {};
FilterService_getAllDocFiltersByUserOrGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2338 = 0;
        var _rtmp32342;
        this.success = [];
        var _etype2341 = 0;
        _rtmp32342 = input.readListBegin();
        _etype2341 = _rtmp32342.etype;
        _size2338 = _rtmp32342.size;
        for (var _i2343 = 0; _i2343 < _size2338; ++_i2343)
        {
          var elem2344 = null;
          elem2344 = new DocFilter();
          elem2344.read(input);
          this.success.push(elem2344);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_getAllDocFiltersByUserOrGroup_result.prototype.write = function(output) {
  output.writeStructBegin('FilterService_getAllDocFiltersByUserOrGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2345 in this.success)
    {
      if (this.success.hasOwnProperty(iter2345))
      {
        iter2345 = this.success[iter2345];
        iter2345.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_getAllUserOrGroupsByDocFilterId_args = function(args) {
  this.token = null;
  this.docFilterId = null;
  this.filter = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.docFilterId !== undefined && args.docFilterId !== null) {
      this.docFilterId = args.docFilterId;
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new KazFilter(args.filter);
    }
  }
};
FilterService_getAllUserOrGroupsByDocFilterId_args.prototype = {};
FilterService_getAllUserOrGroupsByDocFilterId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.docFilterId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new KazFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_getAllUserOrGroupsByDocFilterId_args.prototype.write = function(output) {
  output.writeStructBegin('FilterService_getAllUserOrGroupsByDocFilterId_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.docFilterId !== null && this.docFilterId !== undefined) {
    output.writeFieldBegin('docFilterId', Thrift.Type.STRING, 2);
    output.writeString(this.docFilterId);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterService_getAllUserOrGroupsByDocFilterId_result = function(args) {
  this.success = null;
  this.validError = null;
  this.error = null;
  if (args instanceof PreconditionException) {
    this.validError = args;
    return;
  }
  if (args instanceof ServerException) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [UserOrGroup]);
    }
    if (args.validError !== undefined && args.validError !== null) {
      this.validError = args.validError;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FilterService_getAllUserOrGroupsByDocFilterId_result.prototype = {};
FilterService_getAllUserOrGroupsByDocFilterId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size2346 = 0;
        var _rtmp32350;
        this.success = [];
        var _etype2349 = 0;
        _rtmp32350 = input.readListBegin();
        _etype2349 = _rtmp32350.etype;
        _size2346 = _rtmp32350.size;
        for (var _i2351 = 0; _i2351 < _size2346; ++_i2351)
        {
          var elem2352 = null;
          elem2352 = new UserOrGroup();
          elem2352.read(input);
          this.success.push(elem2352);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.validError = new PreconditionException();
        this.validError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ServerException();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterService_getAllUserOrGroupsByDocFilterId_result.prototype.write = function(output) {
  output.writeStructBegin('FilterService_getAllUserOrGroupsByDocFilterId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter2353 in this.success)
    {
      if (this.success.hasOwnProperty(iter2353))
      {
        iter2353 = this.success[iter2353];
        iter2353.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.validError !== null && this.validError !== undefined) {
    output.writeFieldBegin('validError', Thrift.Type.STRUCT, 1);
    this.validError.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FilterServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
FilterServiceClient.prototype = {};
FilterServiceClient.prototype.getAllCustomFields = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllCustomFields(token, filter);
    return this.recv_getAllCustomFields();
  } else {
    var postData = this.send_getAllCustomFields(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllCustomFields);
  }
};

FilterServiceClient.prototype.send_getAllCustomFields = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllCustomFields', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new FilterService_getAllCustomFields_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilterServiceClient.prototype.recv_getAllCustomFields = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilterService_getAllCustomFields_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllCustomFields failed: unknown result';
};
FilterServiceClient.prototype.createOrUpdateCustomField = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateCustomField(token, filter);
    return this.recv_createOrUpdateCustomField();
  } else {
    var postData = this.send_createOrUpdateCustomField(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateCustomField);
  }
};

FilterServiceClient.prototype.send_createOrUpdateCustomField = function(token, filter, callback) {
  this.output.writeMessageBegin('createOrUpdateCustomField', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new FilterService_createOrUpdateCustomField_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilterServiceClient.prototype.recv_createOrUpdateCustomField = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilterService_createOrUpdateCustomField_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateCustomField failed: unknown result';
};
FilterServiceClient.prototype.removeCustomField = function(token, filterId, callback) {
  if (callback === undefined) {
    this.send_removeCustomField(token, filterId);
    return this.recv_removeCustomField();
  } else {
    var postData = this.send_removeCustomField(token, filterId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeCustomField);
  }
};

FilterServiceClient.prototype.send_removeCustomField = function(token, filterId, callback) {
  this.output.writeMessageBegin('removeCustomField', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filterId: filterId
  };
  var args = new FilterService_removeCustomField_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilterServiceClient.prototype.recv_removeCustomField = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilterService_removeCustomField_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeCustomField failed: unknown result';
};
FilterServiceClient.prototype.getAllCustomDocFilters = function(token, filter, callback) {
  if (callback === undefined) {
    this.send_getAllCustomDocFilters(token, filter);
    return this.recv_getAllCustomDocFilters();
  } else {
    var postData = this.send_getAllCustomDocFilters(token, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllCustomDocFilters);
  }
};

FilterServiceClient.prototype.send_getAllCustomDocFilters = function(token, filter, callback) {
  this.output.writeMessageBegin('getAllCustomDocFilters', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter
  };
  var args = new FilterService_getAllCustomDocFilters_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilterServiceClient.prototype.recv_getAllCustomDocFilters = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilterService_getAllCustomDocFilters_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllCustomDocFilters failed: unknown result';
};
FilterServiceClient.prototype.createOrUpdateCustomDocFilter = function(token, filter, customFilterItems, filterFieldsWithPosition, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateCustomDocFilter(token, filter, customFilterItems, filterFieldsWithPosition);
    return this.recv_createOrUpdateCustomDocFilter();
  } else {
    var postData = this.send_createOrUpdateCustomDocFilter(token, filter, customFilterItems, filterFieldsWithPosition, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateCustomDocFilter);
  }
};

FilterServiceClient.prototype.send_createOrUpdateCustomDocFilter = function(token, filter, customFilterItems, filterFieldsWithPosition, callback) {
  this.output.writeMessageBegin('createOrUpdateCustomDocFilter', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filter: filter,
    customFilterItems: customFilterItems,
    filterFieldsWithPosition: filterFieldsWithPosition
  };
  var args = new FilterService_createOrUpdateCustomDocFilter_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilterServiceClient.prototype.recv_createOrUpdateCustomDocFilter = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilterService_createOrUpdateCustomDocFilter_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateCustomDocFilter failed: unknown result';
};
FilterServiceClient.prototype.removeCustomDocFilter = function(token, docFilterId, callback) {
  if (callback === undefined) {
    this.send_removeCustomDocFilter(token, docFilterId);
    return this.recv_removeCustomDocFilter();
  } else {
    var postData = this.send_removeCustomDocFilter(token, docFilterId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeCustomDocFilter);
  }
};

FilterServiceClient.prototype.send_removeCustomDocFilter = function(token, docFilterId, callback) {
  this.output.writeMessageBegin('removeCustomDocFilter', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docFilterId: docFilterId
  };
  var args = new FilterService_removeCustomDocFilter_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilterServiceClient.prototype.recv_removeCustomDocFilter = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilterService_removeCustomDocFilter_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeCustomDocFilter failed: unknown result';
};
FilterServiceClient.prototype.createOrUpdateCustomFilterItem = function(token, filterItem, callback) {
  if (callback === undefined) {
    this.send_createOrUpdateCustomFilterItem(token, filterItem);
    return this.recv_createOrUpdateCustomFilterItem();
  } else {
    var postData = this.send_createOrUpdateCustomFilterItem(token, filterItem, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_createOrUpdateCustomFilterItem);
  }
};

FilterServiceClient.prototype.send_createOrUpdateCustomFilterItem = function(token, filterItem, callback) {
  this.output.writeMessageBegin('createOrUpdateCustomFilterItem', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filterItem: filterItem
  };
  var args = new FilterService_createOrUpdateCustomFilterItem_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilterServiceClient.prototype.recv_createOrUpdateCustomFilterItem = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilterService_createOrUpdateCustomFilterItem_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createOrUpdateCustomFilterItem failed: unknown result';
};
FilterServiceClient.prototype.removeCustomFilterItem = function(token, filterItemId, callback) {
  if (callback === undefined) {
    this.send_removeCustomFilterItem(token, filterItemId);
    return this.recv_removeCustomFilterItem();
  } else {
    var postData = this.send_removeCustomFilterItem(token, filterItemId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeCustomFilterItem);
  }
};

FilterServiceClient.prototype.send_removeCustomFilterItem = function(token, filterItemId, callback) {
  this.output.writeMessageBegin('removeCustomFilterItem', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    filterItemId: filterItemId
  };
  var args = new FilterService_removeCustomFilterItem_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilterServiceClient.prototype.recv_removeCustomFilterItem = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilterService_removeCustomFilterItem_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeCustomFilterItem failed: unknown result';
};
FilterServiceClient.prototype.addDocFiltersToUserGroups = function(token, docFilterIds, userOrGroups, callback) {
  if (callback === undefined) {
    this.send_addDocFiltersToUserGroups(token, docFilterIds, userOrGroups);
    return this.recv_addDocFiltersToUserGroups();
  } else {
    var postData = this.send_addDocFiltersToUserGroups(token, docFilterIds, userOrGroups, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addDocFiltersToUserGroups);
  }
};

FilterServiceClient.prototype.send_addDocFiltersToUserGroups = function(token, docFilterIds, userOrGroups, callback) {
  this.output.writeMessageBegin('addDocFiltersToUserGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docFilterIds: docFilterIds,
    userOrGroups: userOrGroups
  };
  var args = new FilterService_addDocFiltersToUserGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilterServiceClient.prototype.recv_addDocFiltersToUserGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilterService_addDocFiltersToUserGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addDocFiltersToUserGroups failed: unknown result';
};
FilterServiceClient.prototype.removeDocFiltersFromUserGroups = function(token, docFilterIds, userOrGroups, callback) {
  if (callback === undefined) {
    this.send_removeDocFiltersFromUserGroups(token, docFilterIds, userOrGroups);
    return this.recv_removeDocFiltersFromUserGroups();
  } else {
    var postData = this.send_removeDocFiltersFromUserGroups(token, docFilterIds, userOrGroups, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_removeDocFiltersFromUserGroups);
  }
};

FilterServiceClient.prototype.send_removeDocFiltersFromUserGroups = function(token, docFilterIds, userOrGroups, callback) {
  this.output.writeMessageBegin('removeDocFiltersFromUserGroups', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docFilterIds: docFilterIds,
    userOrGroups: userOrGroups
  };
  var args = new FilterService_removeDocFiltersFromUserGroups_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilterServiceClient.prototype.recv_removeDocFiltersFromUserGroups = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilterService_removeDocFiltersFromUserGroups_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeDocFiltersFromUserGroups failed: unknown result';
};
FilterServiceClient.prototype.getAllDocFiltersByUserOrGroup = function(token, type, userOrGroupId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllDocFiltersByUserOrGroup(token, type, userOrGroupId, filter);
    return this.recv_getAllDocFiltersByUserOrGroup();
  } else {
    var postData = this.send_getAllDocFiltersByUserOrGroup(token, type, userOrGroupId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllDocFiltersByUserOrGroup);
  }
};

FilterServiceClient.prototype.send_getAllDocFiltersByUserOrGroup = function(token, type, userOrGroupId, filter, callback) {
  this.output.writeMessageBegin('getAllDocFiltersByUserOrGroup', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    type: type,
    userOrGroupId: userOrGroupId,
    filter: filter
  };
  var args = new FilterService_getAllDocFiltersByUserOrGroup_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilterServiceClient.prototype.recv_getAllDocFiltersByUserOrGroup = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilterService_getAllDocFiltersByUserOrGroup_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllDocFiltersByUserOrGroup failed: unknown result';
};
FilterServiceClient.prototype.getAllUserOrGroupsByDocFilterId = function(token, docFilterId, filter, callback) {
  if (callback === undefined) {
    this.send_getAllUserOrGroupsByDocFilterId(token, docFilterId, filter);
    return this.recv_getAllUserOrGroupsByDocFilterId();
  } else {
    var postData = this.send_getAllUserOrGroupsByDocFilterId(token, docFilterId, filter, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getAllUserOrGroupsByDocFilterId);
  }
};

FilterServiceClient.prototype.send_getAllUserOrGroupsByDocFilterId = function(token, docFilterId, filter, callback) {
  this.output.writeMessageBegin('getAllUserOrGroupsByDocFilterId', Thrift.MessageType.CALL, this.seqid);
  var params = {
    token: token,
    docFilterId: docFilterId,
    filter: filter
  };
  var args = new FilterService_getAllUserOrGroupsByDocFilterId_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FilterServiceClient.prototype.recv_getAllUserOrGroupsByDocFilterId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FilterService_getAllUserOrGroupsByDocFilterId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.validError) {
    throw result.validError;
  }
  if (null !== result.error) {
    throw result.error;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getAllUserOrGroupsByDocFilterId failed: unknown result';
};
